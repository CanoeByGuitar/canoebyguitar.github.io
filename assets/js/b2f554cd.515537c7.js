"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/C++/Eigen/eigen","metadata":{"permalink":"/blog/C++/Eigen/eigen","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/Eigen/eigen.md","source":"@site/blog/C++/Eigen/eigen.md","title":"Eigen Cookbook","description":"Matrix","date":"2024-12-21T05:52:39.000Z","formattedDate":"December 21, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":1.005,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Eigen Cookbook","tags":["C++"]},"nextItem":{"title":"2024\u5e74\u5e95\u4e00\u4e9b\u60f3\u6cd5\u603b\u7ed3","permalink":"/blog/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003"}},"content":"## Matrix\\n```cpp\\nMatrix<float, Dynamic, 1> // n\u884c1\u5217\u7684float\u77e9\u9635\\n```\\n\\n## \u6e90\u7801\u5206\u6790\\nrefs: [eigen\u5b98\u7f51](https://eigen.tuxfamily.org/dox/TopicInsideEigenExample.html)\\n### \u6784\u9020\\n\\n### \u8d4b\u503c\\n`VectorXd v; v << 1, 2, 3;`\\n\u8fd9\u79cd\u5199\u6cd5\u662fcpp98\u7684\u7cdf\u7c95\uff0c\u56e0\u4e3a\u5f53\u65f6\u6ca1\u6709initializer_list\u3002\\n\u901a\u8fc7\u5185\u90e8\u7c7bCommaInitializer\u548c\u91cd\u8f7d`operator,`\u6765\u5b9e\u73b0\\n```cpp\\n// \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\\nstruct VectorXd {\\n    explicit VectorXd(int n) :\\n            size(n),\\n            current_idx(0) {\\n        data = new double[n];\\n    }\\n\\n    ~VectorXd() {\\n        delete[] data;\\n    }\\n\\n    double &operator[](int i) const {\\n        return *(data + i);\\n    }\\n\\n    double *data;\\n    int size;\\n    int current_idx;\\n\\n    struct CommaInitializer {\\n        explicit CommaInitializer(VectorXd &v) : vec(v) {}\\n\\n        CommaInitializer& operator,(double val){\\n            assert(vec.current_idx < vec.size);\\n            vec.data[vec.current_idx] = val;\\n            vec.current_idx++;\\n            return *this;\\n        };\\n\\n        VectorXd &vec;\\n    };\\n\\n    CommaInitializer operator<<(double val){\\n        CommaInitializer init(*this);\\n        init, val;\\n        return init;\\n    }\\n};\\n```\\n\\n## \u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u7533\u8bf7\u548c\u62f7\u8d1d\u8d4b\u503c\\n```cpp\\n// \u4e00\u822c\u7684\u5b9e\u73b0\u4e0b\\nu = v + w; \\n//\u5b9e\u9645\u4f1a\u6267\u884c\uff0c\u53d1\u751f\u4e86\u4e00\u6b21\u989d\u5916\u7684\u62f7\u8d1d\\nVectorXf tmp = v + w;\\nVectorXf u = tmp;\\n```"},{"id":"/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003","metadata":{"permalink":"/blog/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003.md","source":"@site/blog/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003.md","title":"2024\u5e74\u5e95\u4e00\u4e9b\u60f3\u6cd5\u603b\u7ed3","description":"Intro","date":"2024-12-21T05:52:39.000Z","formattedDate":"December 21, 2024","tags":[{"label":"\u968f\u7b14","permalink":"/blog/tags/\u968f\u7b14"}],"readingTime":3.53,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"2024\u5e74\u5e95\u4e00\u4e9b\u60f3\u6cd5\u603b\u7ed3","tags":["\u968f\u7b14"]},"prevItem":{"title":"Eigen Cookbook","permalink":"/blog/C++/Eigen/eigen"},"nextItem":{"title":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f","permalink":"/blog/C++/\u8bbe\u8ba1\u6a21\u5f0f/1"}},"content":"## Intro\\n2024\u5e7412\u670821\u65e5\uff0c\u8fc7\u53bb\u7684\u4e00\u4e2a\u6708\u5148\u540e\u7ecf\u5386\u4e86\u5f88\u591a\u4eba\u751f\u521d\u4f53\u9a8c\uff1a\\n1. \u6536\u83b7\u4e86\u5d29\u574f\u661f\u7a79\u94c1\u9053\u3001\u4e09\u89d2\u6d32\u884c\u52a8\u3001\u5b57\u8282\u667a\u80fd\u521b\u4f5c\u4e09\u4e2aoffer\uff0c\u5e76\u9009\u62e9\u4e86\u5d29\u94c1\uff0c\u62d2\u6389\u4e86\u53e6\u5916\u4e24\u4e2a\\n2. \u5728Siggraph Asia\u4e0apresent\u4e86\u5e08\u5144\u7684\u5de5\u4f5c\\n3. \u53bb\u7c73\u54c8\u6e38\u5b9e\u4e60\\n\\n\u4eca\u5929\u662f\u5b9e\u4e60\u4e00\u5468\u540e\uff0c\u5bf9\u81ea\u5df1offer\u7684\u9009\u62e9\u51fa\u73b0\u4e86\u6000\u7591\u548c\u540e\u6094\uff0c\u4f46\u662f\u7ecf\u8fc7\u68b3\u7406\uff0c\u89c9\u5f97offer\u9009\u7684\u6ca1\u6709\u9519\u3002\u73b0\u7f57\u5217\u51fa\u6765\u3002\\n\\n## Content\\n### \u57fa\u672c\u4fe1\u606f\\n\u56e0\u4e3a\u8003\u8651\u53bb\u6e38\u620f\u884c\u4e1a\uff0c\u6240\u4ee5\u5b57\u8282\u4e0d\u5728\u8003\u8651\u8303\u56f4\u5185\\n\\n* \u65f6\u95f4\\n\\n   \u7c73\u54c8\u6e3810:15 am - 19:00 pm\uff0c\u505a\u5b8c\u5de5\u4f5c19:00\u53ef\u8d70\uff0c\u5468\u56db\u7248\u672c\u65e523:00pm\uff0c\u5468\u672b\u52a0\u73ed\u6709\u53cc\u500d\u5de5\u8d44\uff1b\u4e09\u89d2\u6d3210 am - 20:30pm,\u7814\u53d1\u671f\u4e00\u5468\u4e94\u5929\uff0c\u653b\u575a\u671f\u5927\u5927\u5c0f\u5468\\n\\n* \u5c97\u4f4d\\n\\n   \u7c73\u54c8\u6e38unity\u7f16\u8f91\u5668\u5de5\u5177\u5f00\u53d1\uff0c\u975e\u7f8e\u672f\u5de5\u5177\u94fe\uff0c\u4e3b\u8981\u7528\u6237\u662f\u7b56\u5212\u3001\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002\u6bd4\u5982\u6280\u80fd\u7279\u6548\u7f16\u8f91\u5668\u3001\u573a\u666f\u7f16\u8f91\u5668\u3001\u5267\u60c5\u7f16\u8f91\u5668\u7b49\u7b49\u3002\\n   \u4e09\u89d2\u6d32\u6ca1\u6709\u53bb\u5b9e\u4e60\u8fc7\uff0cleader\u63cf\u8ff0\u662f\u5ba2\u6237\u7aef\u4e09\u7ec4\uff0c\u8d1f\u8d23\u5267\u60c5\u6a21\u5f0f\uff08\u5355\u4eba\u3001PC\u3001UE5\uff09\u548cPC\u7aef\u6027\u80fd\u4f18\u5316\uff08\u6e32\u67d3\u4e3a\u4e3b\uff09\\n\\n### \u601d\u8003\\n#### \u6211\u73b0\u5728\u60f3\u505a\u4ec0\u4e48\\n\\n\u60f3\u505afancy\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5f15\u64ce\u4fa7runtime\u7684\u6027\u80fd\u4f18\u5316\uff0c\u52a8\u753b\u3001\u7269\u7406\u65b9\u5411\uff0c\u6216\u8005\u662f\u505a3c\u6838\u5fc3\u7cfb\u7edf\uff0c\u4e0d\u60f3\u505a\u6e32\u67d3\uff0c\u56e0\u4e3a\u4e0d\u592a\u61c2\u6e32\u67d3\\n\\n#### \u6211\u672a\u6765\u60f3\u505a\u4ec0\u4e48\\n\\n\u60f3\u505a\u4e3b\u7a0b\uff0c\u60f3\u5bf9\u6e38\u620f\u5f00\u53d1\u6280\u672f\u4fa7\u7684\u65b9\u65b9\u9762\u9762\u90fd\u6df1\u5165\u4e86\u89e3\uff0c\u4e0d\u5c40\u9650\u4e8e\u5f15\u64ce\u6216\u67d0\u4e2a\u6280\u672f\u6a21\u5757\uff0c\u800c\u662f\u5168\u77e5\u5168\u80fd\uff0c\u5e7f\u5ea6\u6df1\u5ea6\u517c\u6709\uff0c\u540c\u65f6\u5177\u5907\u7ba1\u7406\u80fd\u529b\uff0c\u4e86\u89e3\u9879\u76ee\u7ba1\u7406\u548c\u6a21\u5757\u5206\u5de5\\n\\n#### \u60f3\u5446\u5728\u54ea\u4e2a\u57ce\u5e02\\n\\n\u4e0a\u6d77\uff0c\u6700\u719f\u6089\uff0c\u6700\u4e86\u89e3\uff0c\u79bb\u8001\u5bb6\u6700\u8fd1\uff0c\u79bb\u4e1c\u4eac\u4e5f\u4ec5\\n\\n#### \u9009\u62e9\\n\\n\u5982\u679c\u9009\u62e9\u4e09\u89d2\u6d32\u4e0a\u6d77\u56e2\u961f\uff0c\u5728\u4e09\u7ec4\uff0c\u505aPC\u7aef\u6027\u80fd\u4f18\u5316\uff0c\u664b\u5347\u7a7a\u95f4\u6709\u9650\uff0c\u5373\u4f7f\u80fd\u5f80\u4e0a\u5347\uff0c\u4e5f\u9700\u8981\u53bb\u6df1\u5733\u90a3\u8fb9\u624d\u80fd\u505a\u5230\u6838\u5fc3\u3002\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\uff0c\u73b0\u5728\u4f9d\u7136\u662f\u624b\u6e38\u5360\u5e02\u573a\u7684\u5927\u5934\uff0c\u672a\u6765\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4e5f\u4f1a\u662f\u624b\u6e38\u5927\u5934\uff08\u73b0\u5728\u9752\u5c11\u5e74\u7528\u79fb\u52a8\u8bbe\u5907\u66f4\u591a\uff09\uff0cunity\u5bf9\u624b\u6e38\u66f4\u53cb\u597d\u3002\\n\u53e6\u5916\uff0c\u5de5\u5177\u53ef\u4ee5\u63a5\u89e6\u5230\u4e1a\u52a1\u7ec4\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u6e05\u95f2\u7684\u5de5\u4f5c\u66f4\u80fd\u52a0\u7d27\u81ea\u6211\u5b66\u4e60\u3002\\n\\n#### \u7ed9\u672a\u6765\u7684\u5bc4\u8bed\\n\\n\u4eba\u751f\u662f\u5206\u4e3a\u591a\u4e2a\u9636\u6bb5\u7684\uff0c\u6e38\u620f\u6d3b\u4e0d\u4e86\u5f88\u591a\u5e74\uff0c\u6240\u4ee5\u672a\u6765\u4e09\u5e74\u7684\u5de5\u4f5c\u5b66\u4e60\u90fd\u662f\u4e3a\u4e86\u4e0b\u4e00\u6b21\u8df3\u69fd\u505a\u51c6\u5907\uff0c\u5e0c\u671b\u81ea\u5df1\u5728\u5e7f\u5ea6\u548c\u6df1\u5ea6\u90fd\u6709\u6df1\u8015\u3002\\n\u4e0b\u9762\u662f\u4e00\u4e9b\u8ba1\u5212\u7684\u60f3\u6cd5\uff1a\\n\\n1. core 3c act\u6218\u6597\uff0cdemo\u6253\u78e8\uff0c\u53ef\u4ee5\u81ea\u6211\u8bbe\u8ba1\u5de5\u5177\uff0c\u6765\u52a0\u901f\u6d41\u7a0b\\n2. \u52a8\u753b\u6a21\u5757\uff0cgameplay+\u6027\u80fd\u4f18\u5316\uff08\u6bd4\u5982\u538b\u7f29\u3001\u63d2\u503c\u3001motionmatch\u7b49\uff0c\u591a\u770bGDC\uff09\\n3. \u7279\u6548/\u7c92\u5b50\u7cfb\u7edf\uff0c\u6027\u80fd\u4f18\u5316\uff08\u5f15\u64ce\u4fa7\uff09"},{"id":"/C++/\u8bbe\u8ba1\u6a21\u5f0f/1","metadata":{"permalink":"/blog/C++/\u8bbe\u8ba1\u6a21\u5f0f/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u8bbe\u8ba1\u6a21\u5f0f/1.md","source":"@site/blog/C++/\u8bbe\u8ba1\u6a21\u5f0f/1.md","title":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f","description":"- \u5355\u4f8b\u6a21\u5f0f","date":"2024-09-08T07:07:57.000Z","formattedDate":"September 8, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":34.53,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f","tags":["C++"]},"prevItem":{"title":"2024\u5e74\u5e95\u4e00\u4e9b\u60f3\u6cd5\u603b\u7ed3","permalink":"/blog/\u6742\u8c08/\u968f\u7b14/\u9009offer\u540e\u7684\u601d\u8003"},"nextItem":{"title":"\u6a21\u7248\u5143\u5165\u95e8","permalink":"/blog/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1"}},"content":"\x3c!--truncate--\x3e\\n# \u6e38\u620f\u5f00\u53d1\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u8bbe\u8ba1\u6a21\u5f0f\\n\\n- \u5355\u4f8b\u6a21\u5f0f\\n- \u6a21\u677f\u6a21\u5f0f\\n- \u72b6\u6001\u6a21\u5f0f\\n- \u539f\u578b\u6a21\u5f0f\\n- CRTP \u6a21\u5f0f\\n- \u7ec4\u4ef6\u6a21\u5f0f\\n- \u89c2\u5bdf\u8005\u6a21\u5f0f\\n- \u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\\n- \u8bbf\u95ee\u8005\u6a21\u5f0f\\n\\n## \u5355\u4f8b\u6a21\u5f0f\\n\\n\u901a\u5e38\u7528\u4e8e\u6e38\u620f\u4e2d\u7684\u5168\u5c40\u7ba1\u7406\u7c7b\uff0c\u4fdd\u8bc1\u6574\u4e2a\u7a0b\u5e8f\uff08\u8fdb\u7a0b\uff09\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u5b58\u5728\u3002\u6709\u5f88\u591a\u79cd\u5e38\u89c1\u7684\u5199\u6cd5\uff1a\\n\\n1. \u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\uff08\u997f\u6c57\u6a21\u5f0f\uff09\\n\\n```cpp\\nGame game;\\n```\\n\\n\u6548\u679c\uff1a\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\u5c31\u4f1a\u521b\u5efa `game` \u5bf9\u8c61\uff0c\u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\\n\\n2. \u4f5c\u4e3a\u51fd\u6570\u5185\u90e8\u7684 static \u53d8\u91cf\uff08\u61d2\u6c57\u6a21\u5f0f\uff09\\n\\n```cpp\\nGame &getGame() {\\n    static Game game;\\n    return game;\\n}\\n\\ngetGame().updatePlayers();\\n```\\n\\n\u6548\u679c\uff1a\u7b2c\u4e00\u6b21\u8c03\u7528 `getGame()` \u65f6\u4f1a\u521d\u59cb\u5316\uff0c\u4e4b\u540e\u7684\u8c03\u7528\u4f1a\u76f4\u63a5\u8fd4\u56de\u4e0a\u6b21\u521b\u5efa\u7684\u5b9e\u4f8b\u3002\\n\\n\u6839\u636e\u4f60\u7684\u9700\u8981\uff0c\u5982\u679c\u4f60\u9700\u8981\u5728\u7a0b\u5e8f\u4e00\u542f\u52a8\u65f6 game \u5bf9\u8c61\u5c31\u53ef\u7528\uff0c\u5c31\u7528\u997f\u6c57\u6a21\u5f0f\u3002\\n\\n\u5982\u679c game \u7684\u521d\u59cb\u5316\u9700\u8981\u67d0\u4e9b\u6761\u4ef6\uff0c\u4f8b\u5982\u521b\u5efa Game \u7c7b\u524d\u9700\u8981 OpenGL \u521d\u59cb\u5316\uff0c\u90a3\u4e48\u53ef\u7528\u61d2\u6c57\u6a21\u5f0f\uff1a\\n\\n```cpp\\nint main() {\\n    glfwInit();                 // \u521d\u59cb\u5316 OpenGL\\n    getGame().initialize();     // \u7b2c\u4e00\u6b21\u8c03\u7528 getGame \u4f1a\u521d\u59cb\u5316 game \u5355\u4f8b\\n    getGame().updatePlayers();  // \u4e4b\u540e\u7684\u8c03\u7528\u603b\u662f\u8fd4\u56de\u5bf9\u540c\u4e00\u4e2a game \u5355\u4f8b\u7684\u5f15\u7528\\n}\\n```\\n\\n> \u63d0\u793a\uff1a\u5982\u679c\u8981\u628a\u5355\u4f8b\u5bf9\u8c61\u7684\u5b9a\u4e49\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u52a1\u5fc5\u6dfb\u52a0 inline \u4fee\u9970\u7b26\uff0c\u800c\u4e0d\u662f static\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u591a\u4e2a cpp \u6587\u4ef6\u5404\u81ea\u6709\u4e00\u4e2a Game \u5bf9\u8c61\u3002\\n\\n```cpp\\n// Game.hpp\\n\\ninline Game game;\\n\\ninline Game &getGame() {\\n    static Game game;\\n    return game;\\n}\\n```\\n\\n### \u5c01\u88c5\u5728\u7c7b\u5185\u90e8\\n\\n\u7531\u4e8e\u6240\u6709\u5355\u4f8b\u5168\u90e8\u66b4\u9732\u5728\u5168\u5c40\u540d\u5b57\u7a7a\u95f4\uff0c\u5bb9\u6613\u4ea7\u751f\u6df7\u4e71\u3002\\n\u4e00\u822c\u4f1a\u628a\u5355\u4f8b\u5bf9\u8c61\u6216\u51fd\u6570\u5c01\u88c5\u5728\u7c7b\u5185\u90e8\uff0c\u5e76\u4e14\u628a Game \u7684\u6784\u9020\u51fd\u6570\u8bbe\u4e3a private\uff0c\u907f\u514d\u7528\u6237\u4e0d\u614e\u76f4\u63a5\u521b\u5efa\u51fa\u672c\u5e94\u53ea\u6709\u5355\u4e2a\u5b9e\u4f8b\u7684 Game \u7c7b\u3002\\n\\n1. \u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\uff08\u997f\u6c57\u6a21\u5f0f\uff09\\n\\n```cpp\\nstruct Game {\\n    ...\\n\\n    Game(Game &&) = delete;\\n\\nprivate:\\n    Game() { ... }\\n\\npublic:\\n    inline static Game instance;  // \u5982\u679c\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u9700\u8981 inline\uff01\\n};\\n\\nGame::instance.updatePlayers();\\n```\\n\\n2. \u4f5c\u4e3a\u51fd\u6570\u5185\u90e8\u7684 static \u53d8\u91cf\uff08\u61d2\u6c57\u6a21\u5f0f\uff09\\n\\n```cpp\\nstruct Game {\\n    ...\\n\\n    Game(Game &&) = delete;\\n\\nprivate:\\n    Game() { ... }\\n\\npublic:\\n    inline static Game &instance() {  // \u8fd9\u91cc\u7684 inline \u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a\u7c7b\u4f53\u5185\u5c31\u5730\u5b9e\u73b0\u7684\u51fd\u6570\u81ea\u5e26 inline \u6548\u679c\\n        static Game game;\\n        return game;\\n    }\\n};\\n\\nGame::instance().updatePlayers();\\n```\\n\\n### \u901a\u7528\u7684\u5355\u4f8b\u6a21\u5f0f\u6a21\u677f\\n\\n```cpp\\ntemplate <class T>\\ninline T &singleton() {  // \u8fd9\u91cc\u7684 inline \u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3a\u5c31\u5730\u5b9e\u73b0\u7684\u6a21\u677f\u51fd\u6570\u81ea\u5e26 inline \u6548\u679c\\n    // \u53ea\u6709\u7b2c\u4e00\u6b21\u8fdb\u5165\u65f6\u4f1a\u6784\u9020\u4e00\u904d T\uff0c\u4e4b\u540e\u4e0d\u4f1a\u518d\u6784\u9020\\n    // \u4e0d\u540c\u7684 T \u4f1a\u5b9e\u4f8b\u5316\u51fa\u4e0d\u540c\u7684 singleton \u5b9e\u4f8b\uff0c\u5404\u81ea\u4f53\u5185\u7684 static \u53d8\u91cf\u72ec\u7acb\u8ba1\u7b97\uff0c\u4e92\u4e0d\u5e72\u6270\\n    static T inst;\\n    return inst;\\n}\\n\\nsingleton<Game>().updatePlayers();\\nsingleton<Other>().someMethod();\\n```\\n\\n\u4efb\u4f55\u7c7b\u578b T\uff0c\u53ea\u8981\u4ee5 `singleton<T>()` \u5f62\u5f0f\u83b7\u53d6\uff0c\u90fd\u80fd\u4fdd\u8bc1\u6bcf\u4e2a T \u90fd\u53ea\u6709\u4e00\u4efd\u5bf9\u8c61\u3002\uff08\u524d\u63d0\u662f\u4f60\u4e0d\u8981\u518d `T()` \u521b\u5efa\u5bf9\u8c61\uff09\\n\\n## \u6a21\u677f\u6a21\u5f0f\\n\\n> \u6ce8\u610f\uff1a\u6a21\u677f\u6a21\u5f0f\u548c C++ \u7684\u6a21\u677f\u5e76\u6ca1\u6709\u5fc5\u7136\u5173\u7cfb\uff01\u6a21\u677f\u6a21\u5f0f\u53ea\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u53ef\u4ee5\u7528\u6a21\u677f\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528\u865a\u51fd\u6570\u5b9e\u73b0\uff08\u5927\u591a\u53cd\u800c\u662f\u7528\u865a\u51fd\u6570\u5b9e\u73b0\u7684\uff09\\n\\n\u6a21\u677f\u6a21\u5f0f\u7528\u4e8e\u5c01\u88c5\u6e38\u620f\u4e2d\u4e00\u4e9b\u76f8\u4f3c\u7684\u5904\u7406\u903b\u8f91\uff0c\u628a\u5171\u540c\u7684\u90e8\u5206\u96c6\u4e2d\u5230\u4e00\u4e2a\u57fa\u7c7b\uff0c\u628a\u4e0d\u540c\u7684\u7ec6\u8282\u90e8\u5206\u7559\u7ed9\u5b50\u7c7b\u5b9e\u73b0\u3002\\n\\n\u548c\u7b56\u7565\u6a21\u5f0f\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u63a5\u6536\u7b56\u7565\u7684\u76f4\u63a5\u5c31\u662f\u57fa\u7c7b\u81ea\u5df1\u3002\\n\\n\u4f8b\u5982\uff0c\u4e00\u4e2a\u89d2\u8272\u56fa\u5b9a\u6bcf\u4e00\u5e27\u9700\u8981\u79fb\u52a8 3 \u6b21\uff0c\u7136\u540e\u7ed8\u5236 1 \u6b21\u3002\u663e\u7136\u9700\u8981\u628a\u201c\u79fb\u52a8\u201d\u548c\u201c\u7ed8\u5236\u201d\u4f5c\u4e3a\u4e24\u4e2a\u865a\u51fd\u6570\u63a5\u53e3\uff0c\u8ba9\u5b50\u7c7b\u6765\u5b9e\u73b0\u3002\\n\\n```cpp\\nstruct Character {\\n    virtual void draw() = 0;\\n    virtual void move() = 0;\\n};\\n\\nstruct Player : Character {\\n    void draw() override {\\n        drawPlayer();\\n    }\\n\\n    void move() override {\\n        movePlayer();\\n    }\\n};\\n\\nstruct Enemy : Character {\\n    void draw() override {\\n        drawEnemy();\\n    }\\n\\n    void move() override {\\n        moveEnemy();\\n    }\\n};\\n```\\n\\n\u5982\u679c\u8ba9\u8d1f\u8d23\u8c03\u7528 Character \u7684\u4eba\u6765\u5b9e\u73b0\u6bcf\u4e00\u5e27\u9700\u8981\u79fb\u52a8 3 \u6b21 + \u7ed8\u5236 1 \u6b21\u7684\u8bdd\uff0c\u5c31\u7834\u574f\u4e86\u5f00\u95ed\u539f\u5219\u3002\\n\\n```cpp\\nstruct Game {\\n    vector<Character *> chars;\\n\\n    void update() {\\n        for (auto &&c: chars) {\\n            c->move();\\n            c->move();\\n            c->move();\\n            c->draw();\\n        }\\n    }\\n}\\n```\\n\\n\u6539\u4e3a\u628a\u79fb\u52a8 3 \u6b21 + \u7ed8\u5236 1 \u6b21\u5c01\u88c5\u4e3a\u4e00\u4e2a Character \u7684\u666e\u901a\u51fd\u6570 update\u3002\\n\\n```cpp\\nstruct Character {\\nprotected:\\n    virtual void draw() = 0;\\n    virtual void move() = 0;\\n\\npublic:\\n    void update() {\\n        move();\\n        move();\\n        move();\\n        draw();\\n    }\\n};\\n\\nstruct Game {\\n    vector<Character *> chars;\\n\\n    void update() {\\n        for (auto &&c: chars) {\\n            c->update();\\n        }\\n    }\\n}\\n```\\n\\n\u8fd9\u6837\u8c03\u7528\u8005\u5c31\u5f88\u8f7b\u677e\u4e86\uff0c\u4e0d\u5fc5\u5173\u5fc3\u5e95\u5c42\u7ec6\u8282\uff0c\u800c update \u4e5f\u53ea\u901a\u8fc7\u63a5\u53e3\u548c\u5b50\u7c7b\u901a\u4fe1\uff0c\u6ee1\u8db3\u5f00\u95ed\u539f\u5219\u548c\u4f9d\u8d56\u5012\u7f6e\u539f\u5219\u3002\\n\\n### \u6a21\u677f\u6a21\u5f0f\u8fd8\u662f\u7b56\u7565\u6a21\u5f0f\uff1a\u5982\u4f55\u9009\u62e9\uff1f\\n\\n\u5f53\u4e00\u4e2a\u5bf9\u8c61\u6d89\u53ca\u5f88\u591a\u7b56\u7565\u65f6\uff0c\u7528\u7b56\u7565\u6a21\u5f0f\uff1b\u5f53\u53ea\u9700\u8981\u4e00\u4e2a\u7b56\u7565\uff0c\u4e14\u9700\u8981\u7528\u5230\u57fa\u7c7b\u7684\u6210\u5458\u65f6\uff0c\u7528\u6a21\u677f\u6a21\u5f0f\u3002\\n\\n\u4f8b\u5982\uff0c\u4e00\u4e2a\u89d2\u8272\u7684\u7b56\u7565\u6709\u79fb\u52a8\u7b56\u7565\u548c\u653b\u51fb\u7b56\u7565\uff0c\u79fb\u52a8\u65b9\u5f0f\u6709\u201c\u8d70\u8def\u201d\u3001\u201c\u8dd1\u6b65\u201d\u4e24\u79cd\uff0c\u653b\u51fb\u7b56\u7565\u53c8\u6709\u201c\u5e73A\u201d\u3001\u201c\u66b4\u51fb\u201d\u4e24\u79cd\u3002\\n\\n\u90a3\u4e48\u5c31\u7528\u7b56\u7565\u6a21\u5f0f\uff0c\u8ba9\u89d2\u8272\u5206\u522b\u6307\u5411\u79fb\u52a8\u7b56\u7565\u548c\u653b\u51fb\u7b56\u7565\u7684\u6307\u9488\u3002\\n\\n```cpp\\nstruct Character {\\n    MoveStrategy *moveStrategy;\\n    AttackStrategy *attackStrategy;\\n\\n    void update() {\\n        if (isKeyPressed(GLFW_KEY_S) {\\n            moveStrategy->move();\\n        } else if (isKeyPressed(GLFW_KEY_W)) {\\n            moveStrategy->run();\\n        }\\n        while (auto enemy = Game::instance().findEnemy(range)) {\\n            attackStrategy->attack(enemy);\\n        }\\n    }\\n};\\n```\\n\\n\u800c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u7b56\u7565\uff0c\u6bd4\u5982\u6b66\u5668\u7c7b\uff0c\u53ea\u9700\u8981\u653b\u51fb\u7b56\u7565\uff0c\u5e76\u4e14\u653b\u51fb\u7b56\u7565\u9700\u8981\u77e5\u9053\u6b66\u5668\u7684\u4f24\u5bb3\u503c\u3001\u5c04\u7a0b\u3001\u9644\u9b54\u5c5e\u6027\u7b49\u4fe1\u606f\uff0c\u90a3\u5c31\u9002\u5408\u6a21\u677f\u6a21\u5f0f\u3002\\n\\n```cpp\\nstruct Weapon {\\nprotected:\\n    double damage;\\n    double charge;\\n    MagicFlag magicFlags;\\n    double range;\\n\\n    virtual void attack(Enemy *enemy);\\n\\npublic:\\n    void update() {\\n        while (auto enemy = Game::instance().findEnemy(range)) {\\n            attack(enemy);\\n        }\\n    }\\n};\\n```\\n\\n### \u6700\u5e38\u89c1\u7684\u662f do_xxx \u5c01\u88c5\\n\\n\u4f8b\u5982\uff0c\u4e00\u4e2a\u5904\u7406\u5b57\u7b26\u4e32\u7684\u865a\u63a5\u53e3\u7c7b\uff1a\\n\\n```cpp\\nstruct Converter {\\n    virtual void process(const char *s, size_t len) = 0;\\n};\\n```\\n\\n\u8fd9\u4e2a\u63a5\u53e3\u662f\u8003\u8651 **\u5b9e\u73b0 Converter \u5b50\u7c7b\u7684\u65b9\u4fbf**\uff0c\u5bf9\u4e8e **\u8c03\u7528 Converter \u7684\u7528\u6237** \u4f7f\u7528\u8d77\u6765\u53ef\u80fd\u5e76\u4e0d\u65b9\u4fbf\u3002\\n\\n\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd0\u7528\u6a21\u677f\u6a21\u5f0f\uff0c\u628a\u539f\u6765\u7684\u865a\u51fd\u6570\u63a5\u53e3\u6539\u4e3a protected \u7684\u51fd\u6570\uff0c\u4e14\u540d\u5b57\u6539\u4e3a do_process\u3002\\n\\n```cpp\\nstruct Converter {\\nprotected:\\n    virtual void do_process(const char *s, size_t len) = 0;\\n\\npublic:\\n    void process(string_view str) {\\n        return do_process(str.data(), str.size());\\n    }\\n\\n    void process(string str) {\\n        return do_process(str.data(), str.size());\\n    }\\n\\n    void process(const char *cstr) {\\n        return do_process(cstr, strlen(cstr));\\n    }\\n};\\n```\\n\\n\u5b9e\u73b0 Converter \u7684\u5b50\u7c7b\u65f6\uff0c\u91cd\u5199\u4ed6\u7684 `do_process` \u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f protected \u7684\uff0c\u53ea\u80fd\u88ab\u7ee7\u627f\u4e86 Converter \u7684\u5b50\u7c7b\u8bbf\u95ee\u548c\u91cd\u5199\u3002\\n\\n\u5916\u5c42\u7528\u6237\u53ea\u80fd\u901a\u8fc7 Converter \u57fa\u7c7b\u5c01\u88c5\u597d\u7684 `process` \u51fd\u6570\uff0c\u907f\u514d\u5916\u5c42\u7528\u6237\u76f4\u63a5\u5e72\u6d89\u5e95\u5c42\u7ec6\u8282\u3002\\n\\n\u6807\u51c6\u5e93\u4e2d\u7684 `std::pmr::memory_resource`\u3001`std::codecvt` \u7b49\u90fd\u8fd0\u7528\u4e86 do_xxx \u5f0f\u7684\u6a21\u677f\u6a21\u5f0f\u5c01\u88c5\u3002\\n\\n## \u72b6\u6001\u6a21\u5f0f\\n\\n\u6e38\u620f\u4e2d\u7684\u89d2\u8272\u901a\u5e38\u6709\u591a\u79cd\u72b6\u6001\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u602a\u7269\u53ef\u80fd\u6709\u201c\u5f85\u673a\u201d\u3001\u201c\u5de1\u903b\u201d\u3001\u201c\u8ffd\u51fb\u201d\u3001\u201c\u653b\u51fb\u201d\u7b49\u591a\u79cd\u72b6\u6001\uff0c\u800c\u6bcf\u79cd\u72b6\u6001\u4e0b\u7684\u884c\u4e3a\u90fd\u4e0d\u4e00\u6837\u3002\\n\\n\u5982\u679c\u7528\u4e00\u4e2a\u679a\u4e3e\u53d8\u91cf\u6765\u8868\u793a\u5f53\u524d\u72b6\u6001\uff0c\u90a3\u6bcf\u6b21\u5c31\u90fd\u9700\u8981\u7528 switch \u6765\u5904\u7406\u4e0d\u540c\u7684\u72b6\u6001\u3002\\n\\n```cpp\\nenum MonsterState {\\n    Idle,\\n    Chase,\\n    Attack,\\n};\\n\\nstruct Monster {\\n    MonsterState state = Idle;\\n\\n    void update() {\\n        switch (state) {\\n            case Idle:\\n                if (seesPlayer())\\n                    state = Chase;\\n                break;\\n            case Chase:\\n                if (canAttack())\\n                    state = Attack;\\n                else if (!seesPlayer())\\n                    state = Idle;\\n                break;\\n            case Attack:\\n                if (!seesPlayer())\\n                    state = Idle;\\n                break;\\n        }\\n    }\\n};\\n```\\n\\n\u8fd9\u6216\u8bb8\u6027\u80fd\u4e0a\u6709\u4e00\u5b9a\u4f18\u52bf\uff0c\u7f3a\u70b9\u662f\uff0c\u6240\u6709\u4e0d\u540c\u72b6\u6001\u7684\u5904\u7406\u903b\u8f91\u5806\u79ef\u5728\u540c\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5982\u679c\u6709\u591a\u4e2a\u51fd\u6570\uff08\u4e0d\u53ea\u662f update\uff09\uff0c\u90a3\u4e48\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u65b0\u72b6\u6001\u5c31\u9700\u8981\u4fee\u6539\u6240\u6709\u51fd\u6570\uff0c\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219\u3002\\n\\n\u800c\u4e14\u5982\u679c\u4e0d\u540c\u7684\u72b6\u6001\u542b\u6709\u4e0d\u540c\u7684\u989d\u5916\u6570\u503c\u9700\u8981\u5b58\u50a8\uff0c\u6bd4\u5982 Chase \u72b6\u6001\u9700\u8981\u5b58\u50a8\u5f53\u524d\u901f\u5ea6\uff0c\u90a3\u5c31\u9700\u8981\u5728 Monster \u7c7b\u4e2d\u6dfb\u52a0 speed \u6210\u5458\uff0c\u800c state \u4e0d\u4e3a Chase \u65f6\u53c8\u7528\u4e0d\u5230\u8fd9\u4e2a\u6210\u5458\uff0c\u975e\u5e38\u5bb9\u6613\u6270\u4e71\u601d\u7ef4\u3002\\n\\n### \u72b6\u6001\u4e0d\u662f\u679a\u4e3e\uff0c\u800c\u662f\u7c7b\\n\\n\u4e3a\u6b64\uff0c\u63d0\u51fa\u4e86\u72b6\u6001\u6a21\u5f0f\uff0c\u5c06\u4e0d\u540c\u72b6\u6001\u7684\u5904\u7406\u903b\u8f91\u5206\u79bb\u5230\u4e0d\u540c\u7684\u7c7b\u4e2d\u3002\u4ed6\u628a\u6bcf\u79cd\u72b6\u6001\u62bd\u8c61\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u72b6\u6001\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8ba9\u89d2\u8272\u6301\u6709\u8868\u793a\u5f53\u524d\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u7528\u72b6\u6001\u5bf9\u8c61\u7684\u865a\u51fd\u6570\u6765\u8868\u793a\u5904\u7406\u903b\u8f91\uff0c\u800c\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u901a\u8fc7 if \u5224\u65ad\u6765\u6267\u884c\u4e0d\u540c\u7684\u884c\u4e3a\u3002\\n\\n```cpp\\nstruct Monster;\\n\\nstruct State {\\n    virtual void update(Monster *monster) = 0;\\n};\\n\\nstruct Idle : State {\\n    void update(Monster *monster) override {\\n        if (monster->seesPlayer()) {\\n            monster->setState(new Chase());\\n        }\\n    }\\n};\\n\\nstruct Chase : State {\\n    void update(Monster *monster) override {\\n        if (monster->canAttack()) {\\n            monster->setState(new Attack());\\n        } else if (!monster->seesPlayer()) {\\n            monster->setState(new Idle());\\n        }\\n    }\\n};\\n\\nstruct Attack : State {\\n    void update(Monster *monster) override {\\n        if (!monster->seesPlayer()) {\\n            monster->setState(new Idle());\\n        }\\n    }\\n};\\n\\nstruct Monster {\\n    State *state = new Idle();\\n\\n    void update() {\\n        state->update(this);\\n    }\\n\\n    void setState(State *newState) {\\n        delete state;\\n        state = newState;\\n    }\\n};\\n```\\n\\n## \u539f\u578b\u6a21\u5f0f\\n\\n\u539f\u578b\u6a21\u5f0f\u7528\u4e8e\u590d\u5236\u73b0\u6709\u7684\u5bf9\u8c61\uff0c\u4e14\u65b0\u5bf9\u8c61\u7684**\u5c5e\u6027**\u548c**\u7c7b\u578b**\u4e0e\u539f\u6765\u76f8\u540c\u3002\u5982\u4f55\u5b9e\u73b0\uff1f\\n\\n1. \u4e3a\u4ec0\u4e48\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e0d\u884c\uff1f\\n\\n\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u4e8e\u7c7b\u578b\u786e\u5b9a\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u5177\u6709\u865a\u51fd\u6570\uff0c\u53ef\u80fd\u5177\u6709\u989d\u5916\u6210\u5458\u7684\u591a\u6001\u7c7b\u578b\uff0c\u4f1a\u53d1\u751f object-slicing\uff0c\u5bfc\u81f4\u62f7\u8d1d\u51fa\u6765\u7684\u7c7b\u578b\u53ea\u662f\u57fa\u7c7b\u7684\u90e8\u5206\uff0c\u800c\u4e0d\u662f\u5b8c\u6574\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002\\n\\n```cpp\\nRedBall ball;\\nBall newball = ball;  // \u9519\u8bef\uff1a\u53d1\u751f\u4e86 object-slicing\uff01\u73b0\u5728 newball \u7684\u7c7b\u578b\u53ea\u662f Ball \u4e86\uff0c\u4e22\u5931\u4e86 RedBall \u7684\u4fe1\u606f\\n```\\n\\n2. \u4e3a\u4ec0\u4e48\u62f7\u8d1d\u6307\u9488\u4e0d\u884c\uff1f\\n\\n\u6307\u9488\u7684\u62f7\u8d1d\u662f\u6d45\u62f7\u8d1d\uff0c\u800c\u6211\u4eec\u9700\u8981\u7684\u662f\u6df1\u62f7\u8d1d\u3002\\n\\n```cpp\\nBall *ball = new RedBall();\\nBall *newball = ball;  // \u9519\u8bef\uff1a\u6307\u9488\u7684\u62f7\u8d1d\u662f\u6d45\u62f7\u8d1d\uff01newball \u548c ball \u6307\u5411\u7684\u4ecd\u7136\u662f\u540c\u4e00\u5bf9\u8c61\\n```\\n\\n3. \u9700\u8981\u8c03\u7528\u5230\u771f\u6b63\u7684\u6784\u9020\u51fd\u6570\uff0c\u540c\u65f6\u53c8\u57fa\u4e8e\u6307\u9488\\n\\n```cpp\\nBall *ball = new RedBall();\\nBall *newball = new RedBall(*dynamic_cast<RedBall *>(ball));  // \u53ef\u4ee5\uff0c\u4f46\u662f\u8fd9\u91cc\u663e\u5f0f\u5199\u51fa\u4e86 ball \u5185\u90e8\u7684\u771f\u6b63\u7c7b\u578b\uff0c\u8fdd\u80cc\u4e86\u5f00\u95ed\u539f\u5219\\n```\\n\\n4. \u5c06\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5c01\u88c5\u4e3a\u865a\u51fd\u6570\\n\\n\u539f\u578b\u6a21\u5f0f\u5c06\u5bf9\u8c61\u7684\u62f7\u8d1d\u65b9\u6cd5\u4f5c\u4e3a\u865a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u865a\u63a5\u53e3\u7684\u6307\u9488\uff0c\u907f\u514d\u4e86\u76f4\u63a5\u62f7\u8d1d\u7c7b\u578b\u3002\u4f46\u865a\u51fd\u6570\u5185\u90e8\u4f1a\u8c03\u7528\u5b50\u7c7b\u771f\u6b63\u7684\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u6df1\u62f7\u8d1d\u3002\\n\\n\u5bf9\u4e8e\u719f\u6089\u5de5\u5382\u6a21\u5f0f\u7684\u540c\u5b66\uff1a\u539f\u578b\u6a21\u5f0f\u76f8\u5f53\u4e8e\u628a\u6bcf\u4e2a\u5bf9\u8c61\u53d8\u6210\u4e86\u81ea\u5df1\u7684\u5de5\u5382\uff0c\u53ea\u9700\u8981\u6709\u4e00\u4e2a\u73b0\u6709\u7684\u5bf9\u8c61\uff0c\u5c31\u80fd\u4e0d\u65ad\u590d\u5236\u51fa\u548c\u4ed6\u76f8\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u3002\\n\\n```cpp\\nstruct Ball {\\n    virtual Ball *clone() = 0;\\n};\\n\\nstruct RedBall : Ball {\\n    Ball *clone() override {\\n        return new RedBall(*this);  // \u8c03\u7528 RedBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    }\\n};\\n\\nstruct BlueBall : Ball {\\n    Ball *clone() override {\\n        return new BlueBall(*this);  // \u8c03\u7528 BlueBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    }\\n\\n    int someData;  // \u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4f1a\u4e00\u5e76\u88ab\u62f7\u8d1d\u5230\\n};\\n```\\n\\n\u597d\u5904\u662f\uff0c\u8c03\u7528\u8005\u65e0\u9700\u77e5\u9053\u5177\u4f53\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u4ed6\u662f Ball \u7684\u5b50\u7c7b\uff0c\u5c31\u53ef\u4ee5\u514b\u9686\u51fa\u4e00\u4efd\u5b8c\u5168\u4e00\u6837\u7684\u5b50\u7c7b\u5bf9\u8c61\u6765\uff0c\u4e14\u8fd4\u56de\u7684\u4e5f\u662f\u6307\u9488\uff0c\u4e0d\u4f1a\u53d1\u751f object-slicing\u3002\\n\\n```cpp\\nBall *ball = new RedBall();\\n...\\nBall *newball = ball->clone();  // newball \u7684\u7c7b\u578b\u4ecd\u7136\u662f RedBall\\n```\\n\\n### clone \u8fd4\u56de\u4e3a\u667a\u80fd\u6307\u9488\\n\\n```cpp\\nstruct Ball {\\n    virtual unique_ptr<Ball> clone() = 0;\\n};\\n\\nstruct RedBall : Ball {\\n    unique_ptr<Ball> clone() override {\\n        return make_unique<RedBall>(*this);  // \u8c03\u7528 RedBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    }\\n};\\n\\nstruct BlueBall : Ball {\\n    unique_ptr<Ball> clone() override {\\n        return make_unique<BlueBall>(*this);  // \u8c03\u7528 BlueBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    }\\n\\n    int someData;  // \u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4f1a\u4e00\u5e76\u88ab\u62f7\u8d1d\u5230\u65b0\u5bf9\u8c61\u4e2d\\n};\\n```\\n\\n\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u5185\u5b58\u4e0d\u4f1a\u6cc4\u6f0f\u3002\\n\\n> \u5982\u679c\u8c03\u7528\u8005\u9700\u8981\u7684\u662f shared_ptr\uff0c\u600e\u4e48\u529e\uff1f\\n\\n\u7b54\uff1aunique_ptr \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a shared_ptr\u3002\\n\\n> \u5982\u679c\u8c03\u7528\u8005\u9700\u8981\u7684\u662f\u624b\u52a8 delete \u7684\u539f\u59cb\u6307\u9488\uff0c\u600e\u4e48\u529e\uff1f\\n\\n\u7b54\uff1aunique_ptr \u53ef\u4ee5\u901a\u8fc7 release\uff0c\u6545\u610f\u9020\u6210\u4e00\u6b21\u5185\u5b58\u6cc4\u6f0f\uff0c\u6210\u4e3a\u9700\u8981\u624b\u52a8\u7ba1\u7406\u7684\u539f\u59cb\u6307\u9488\u3002\\n\\n### CRTP \u6a21\u5f0f\u81ea\u52a8\u5b9e\u73b0 clone\\n\\nCRTP\uff08Curiously Recurring Template Pattern\uff09\u662f\u4e00\u79cd\u6a21\u677f\u5143\u7f16\u7a0b\u6280\u672f\uff0c\u5b83\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u95f4\u628a\u6d3e\u751f\u7c7b\u7684\u7c7b\u578b\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570\u4f20\u9012\u7ed9\u57fa\u7c7b\uff0c\u4ece\u800c\u5b9e\u73b0\u4e00\u4e9b\u81ea\u52a8\u5316\u7684\u529f\u80fd\u3002\\n\\n\u7279\u70b9\u662f\uff0c\u7ee7\u627f\u4e00\u4e2a CRTP \u7c7b\u65f6\uff0c\u9700\u8981\u628a\u5b50\u7c7b\u672c\u8eab\u4f5c\u4e3a\u57fa\u7c7b\u7684\u6a21\u677f\u53c2\u6570\u3002\\n\\n> \u5e76\u4e0d\u4f1a\u51fa\u73b0\u5faa\u73af\u5f15\u7528\u662f\u56e0\u4e3a\uff0c\u7528\u5230\u5b50\u7c7b\u7684\u5177\u4f53\u7c7b\u578b\u662f\u5728\u57fa\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5185\u90e8\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u57fa\u7c7b\u5185\u90e8\uff0c\u800c\u6a21\u677f\u7c7b\u578b\u7684\u6210\u5458\u51fd\u6570\u7684\u5b9e\u4f8b\u5316\u662f\u60f0\u6027\u7684\uff0c\u7528\u5230\u4e86\u624d\u4f1a\u5b9e\u4f8b\u5316\u3002\\n\\n```cpp\\ntemplate <class Derived>\\nstruct Pet {\\n    void feed() {\\n        Derived *that = static_cast<Derived *>(this);\\n        that->speak();\\n        that->speak();\\n    }\\n};\\n\\nstruct CatPet : Pet<CatPet> {\\n    void speak() {\\n        puts(\\"Meow!\\");\\n    }\\n};\\n\\nstruct DogPet : Pet<DogPet> {\\n    void speak() {\\n        puts(\\"Bark!\\");\\n    }\\n};\\n```\\n\\n\u4e00\u822c\u7684\u8c61\u7259\u5854\u7406\u8bba\u5bb6\u6559\u6750\u4e2d\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0cCRTP \u662f\u7528\u4e8e\u53d6\u4ee3\u865a\u51fd\u6570\uff0c\u66f4\u9ad8\u6548\u5730\u5b9e\u73b0\u6a21\u677f\u6a21\u5f0f\uff0c\u597d\u50cf CRTP \u5c31\u548c\u865a\u51fd\u6570\u52bf\u4e0d\u4e24\u7acb\u3002\\n\\n\u4f46\u5c0f\u5f6d\u8001\u5e08\u7684\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0cCRTP \u5e38\u5e38\u662f\u548c\u865a\u51fd\u6570\u4e00\u8d77\u51fa\u73b0\u7684\u597d\u642d\u6863\u3002\\n\\n\u4f8b\u5982 CRTP \u53ef\u4ee5\u5e2e\u52a9\u539f\u578b\u6a21\u5f0f\u5b9e\u73b0\u81ea\u52a8\u5316\u5b9a\u4e49 clone \u865a\u51fd\u6570\uff0c\u7a0d\u540e\u4ecb\u7ecd\u7684\u8bbf\u95ee\u8005\u6a21\u5f0f\u4e2d\u4e5f\u4f1a\u7528\u5230 CRTP\u3002\\n\\n```cpp\\nstruct Ball {\\n    virtual unique_ptr<Ball> clone() = 0;\\n};\\n\\ntemplate <class Derived>\\nstruct BallImpl : Ball {  // \u81ea\u52a8\u5b9e\u73b0 clone \u7684\u8f85\u52a9\u5de5\u5177\u7c7b\\n    unique_ptr<Ball> clone() override {\\n        Derived *that = static_cast<Derived *>(this);\\n        return make_unique<Derived>(*that);\\n    }\\n};\\n\\nstruct RedBall : BallImpl<RedBall> {\\n    // unique_ptr<Ball> clone() override {       // BallImpl \u81ea\u52a8\u5b9e\u73b0\u7684 clone \u7b49\u4ef7\u4e8e\\n    //     return make_unique<RedBall>(*this);  // \u8c03\u7528 RedBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    // }\\n};\\n\\nstruct BlueBall : BallImpl<BlueBall> {\\n    // unique_ptr<Ball> clone() override {       // BallImpl \u81ea\u52a8\u5b9e\u73b0\u7684 clone \u7b49\u4ef7\u4e8e\\n    //     return make_unique<BlueBall>(*this);  // \u8c03\u7528 BlueBall \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\\n    // }\\n};\\n```\\n\\n> \u5728\u5c0f\u5f6d\u8001\u5e08\u81ea\u4e3b\u7814\u53d1\u7684 Zeno \u4e2d\uff0c\u5bf9\u8c61\u7c7b\u578b `zeno::IObject` \u7684\u6df1\u62f7\u8d1d\u5c31\u8fd0\u7528\u4e86 CRTP \u52a0\u6301\u7684\u539f\u578b\u6a21\u5f0f\u3002\\n\\n## \u7ec4\u4ef6\u6a21\u5f0f\\n\\n\u6e38\u620f\u4e2d\u7684\u7269\u4f53\uff08\u6e38\u620f\u5bf9\u8c61\uff09\u901a\u5e38\u7531\u591a\u4e2a\u7ec4\u4ef6\u7ec4\u6210\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u89d2\u8272\u53ef\u80fd\u7531\u201c\u89d2\u8272\u63a7\u5236\u5668\u201d\u3001\u201c\u89d2\u8272\u5916\u89c2\u201d\u3001\u201c\u89d2\u8272\u52a8\u753b\u201d\u7b49\u7ec4\u4ef6\u7ec4\u6210\uff0c\u4e00\u4e2a\u5b50\u5f39\u53ef\u80fd\u7531\u201c\u5b50\u5f39\u7269\u7406\u201d\u3001\u201c\u5b50\u5f39\u5916\u89c2\u201d\u7b49\u7ec4\u4ef6\u7ec4\u6210\u3002\\n\\n\u7ec4\u4ef6\u6a21\u5f0f\u662f**\u6e38\u620f\u5f00\u53d1\u9886\u57df\u6700\u91cd\u8981\u7684\u8bbe\u8ba1\u6a21\u5f0f**\uff0c\u5b83\u5c06\u6e38\u620f\u5bf9\u8c61\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u53ea\u5173\u5fc3\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u800c\u4e0d\u5173\u5fc3\u5176\u4ed6\u7ec4\u4ef6\u7684\u903b\u8f91\u3002\\n\\n\u8e69\u811a\u7684\u6e38\u620f\u5f00\u53d1\u8005\uff08\u901a\u5e38\u662f 985 \u91cf\u4ea7\u51fa\u6765\u7684\u8c61\u7259\u5854\u5de8\u5a74\uff09\u4f1a\u628a\u6bcf\u4e2a\u7ec4\u4ef6\u5199\u6210\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u4f7f\u7528\u201c\u591a\u91cd\u7ee7\u627f\u201d\u7ee7\u627f\u51fa\u4e00\u4e2a\u73a9\u5bb6\u7c7b\u6765\uff0c\u5e76\u606c\u4e0d\u77e5\u803b\u5730\u58f0\u79f0\u201c\u6211\u4e5f\u4f1a\u7ec4\u4ef6\u6a21\u5f0f\u4e86\u201d\u3002\\n\\n\u7136\u800c\uff0c\u8fd9\u6837\u7684\u7f3a\u70b9\u6709\uff1a\\n\\n1. \u6e38\u620f\u5f00\u53d1\u4e2d\u666e\u904d\u6d89\u53ca\u5230 update \u51fd\u6570\uff0c\u800c\u73a9\u5bb6\u7c7b\u7684 update \u9700\u8981\u8f6e\u6d41\u8c03\u7528\u6bcf\u4e2a\u7ec4\u4ef6\u7684 update \u51fd\u6570\u3002\\n\\n\u800c\u591a\u91cd\u7ee7\u627f\u4e00\u65e6\u9047\u5230\u91cd\u540d\u7684 update \u51fd\u6570\uff0c\u4f1a\u76f4\u63a5\u62a5\u9519 \u201c\u6709\u6b67\u4e49\u7684\u51fd\u6570\u540d\u201d \u6446\u70c2\u4e0d\u5e72\u4e86\uff0c\u9700\u8981\u4f60\u624b\u5199\u65b0\u7684 update \u51fd\u6570\u3002\\n\\n```cpp\\nstruct Player : PlayerController, PlayerAppearance, PlayerAnimation {\\n    void update() {\\n        PlayerController::update();\\n        PlayerAppearance::update();\\n        PlayerAnimation::update();\\n    }\\n};\\n```\\n\\n2. C++\uff08\u548c\u5927\u591a\u6570\u975e\u811a\u672c\u8bed\u8a00\u90fd\uff09\u4e0d\u652f\u6301\u8fd0\u884c\u65f6\u6dfb\u52a0\u6216\u5220\u9664\u57fa\u7c7b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u89d2\u8272\uff0c\u6216\u662f\u4fee\u6539\u73b0\u6709\u89d2\u8272\u7684\u903b\u8f91\uff0c\u5c31\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u4e00\u904d\u6574\u4e2a\u6e38\u620f\u7684\u6e90\u7801\u3002\\n\\n\u5728\u7f51\u7edc\u6e38\u620f\u4e2d\uff0c\u66f4\u65b0 DLL \u548c\u66f4\u65b0\u8d44\u4ea7\uff08\u56fe\u7247\u3001\u97f3\u9891\u3001\u6a21\u578b\u7b49\uff09\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u3002\\n\\n- \u5bf9\u4e8e\u670d\u52a1\u7aef\u800c\u8a00\uff0c\u66f4\u65b0 DLL \u9700\u8981\u505c\u673a\u66f4\u65b0\uff0c\u66f4\u65b0\u8d44\u4ea7\u4e0d\u9700\u8981\uff0cDLL \u53ef\u4ee5\u88ab\u7f16\u7a0b\u5141\u8bb8\u52a8\u6001\u52a0\u8f7d\u65b0\u7684\u8d34\u56fe\u3002\\n- \u5bf9\u4e8e\u5ba2\u6237\u7aef\u800c\u8a00\uff0c\u66f4\u65b0 DLL \u9700\u8981\u91cd\u65b0\u8d70\u4e00\u904d\u5f88\u957f\u7684 App \u5ba1\u6838\u6d41\u7a0b\uff08\u56e0\u4e3a\u76f4\u63a5\u8fd0\u884c\u4e8e\u624b\u673a\u4e0a\u7684 C++ \u53ef\u4ee5\u8f7b\u677e\u690d\u5165\u75c5\u6bd2\uff09\uff0c\u800c\u66f4\u65b0\u8d44\u4ea7\u7684\u5ba1\u6838\u6d41\u7a0b\u77ed\u5f97\u591a\uff0c\u751a\u81f3\u5e72\u8106\u65e0\u9700\u5ba1\u6838\u3002\\n\\n\u56e0\u6b64\uff0c\u6e38\u620f\u5f00\u53d1\u8005\u5f88\u5c11\u4f1a\u628a\u6e38\u620f\u903b\u8f91\u76f4\u63a5\u5199\u6b7b\u5728 C++ \u4e2d\uff0c\u8fd9\u4f1a\u8ba9\u66f4\u65b0\u6e38\u620f\u903b\u8f91\uff08\u4f8b\u5982\u4fee\u590d BUG\uff09\u9700\u8981\u505c\u673a\u66f4\u65b0\u3002\uff08\u4f8b\u5982\u660e\u65e5\u65b9\u821f\u6bcf\u6b21\u505c\u673a\u66f4\u65b0\u90fd\u4f1a\u7ed9\u73a9\u5bb6\u53d1 200 \u5408\u6210\u7389\uff09\\n\\n> \u4f60\u7ecf\u5e38\u770b\u5230\u6e38\u620f\u9886\u57df\u7684 \u201cC++ \u5f00\u53d1\u5c97\u201d \u5b9e\u9645\u4e0a\u662f \u201c\u89e3\u91ca\u5668\u5f00\u53d1\u201d\u3002\\n\\n\u6e38\u620f\u5f00\u53d1\u8005\u4f1a\u628a\u7ecf\u5e38\u9700\u8981\u7ef4\u62a4\u548c\u66f4\u65b0\u7684\u6e38\u620f\u903b\u8f91\u5199\u5728\u5982 Lua\u3001Python \u7b49\u811a\u672c\u8bed\u8a00\u4e2d\uff0c\u7136\u540e\u5728 C++ \u4e2d\u96c6\u6210\u4e00\u4e2a Lua\u3001Python \u89e3\u91ca\u5668\uff0c\u6839\u636e\u89e3\u91ca\u5668\u7684\u8c03\u7528\u7ed3\u679c\uff0c\u52a8\u6001\u521b\u5efa\u51fa C++ \u5bf9\u8c61\uff0c\u7136\u540e\u628a\u8fd9\u4e9b C++ \u5bf9\u8c61\u5f53\u4f5c\u7ec4\u4ef6\u6dfb\u52a0\u5230\u6e38\u620f\u5bf9\u8c61\u4e0a\u3002\\n\\n\u5f53\u51fa\u73b0 BUG \u65f6\uff0c\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u4e9b\u811a\u672c\u8bed\u8a00\u7684\u4ee3\u7801\uff0c\u7136\u540e\u4ee5\u201c\u8d44\u4ea7\u201d\u7684\u5f62\u5f0f\uff0c\u5feb\u901f\u8d70\u4e00\u904d\u5ba1\u6838\u6d41\u7a0b\uff0c\u5c31\u53ef\u4ee5\u4fee\u590d BUG\uff0c\u65e0\u9700\u505c\u673a\u66f4\u65b0\u3002\uff08\u4f8b\u5982\u660e\u65e5\u65b9\u821f\u6709\u65f6\u5019\u4f1a\u201c\u8d44\u6e90\u5df2\u8fc7\u671f\u201d\u201c\u6b63\u5728\u4e0b\u8f7d\u8d44\u6e90\u201d\uff0c\u6709\u65f6\u662f\u66f4\u65b0\u4e86\u56fe\u7247\u8d44\u6e90\uff0c\u4e5f\u53ef\u80fd\u662f\u5728\u811a\u672c\u8bed\u8a00\u91cc\u52a8\u6001\u4fee\u590d\u4e86 BUG\uff09\\n\\n3. Java \u548c C# \u90fd\u6ca1\u6709\u591a\u91cd\u7ee7\u627f\u3002\u4f60\u8ba9\u4eba\u5bb6\u57fa\u4e8e C# \u7684 Unity \u600e\u4e48\u6d3b\uff1f\\n\\n\u56e0\u6b64\uff0c\u771f\u6b63\u7684\u7ec4\u4ef6\u6a21\u5f0f\u90fd\u4f1a\u5141\u8bb8\u52a8\u6001\u63d2\u5165\u7ec4\u4ef6\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u671f\u5199\u6b7b\u3002\u9664\u975e\u4f60\u662f\u67d0\u4e9b\u8c61\u7259\u5854\u7684\u4e00\u6b21\u6027\u6c99\u96d5\u5927\u4f5c\u4e1a\u3002\\n\\n\u6e38\u620f\u5bf9\u8c61\u7ec4\u4ef6\u5316\u540e\uff0c\u53ef\u4ee5\u7075\u6d3b\u5730\u7ec4\u5408\u51fa\u4e0d\u540c\u7684\u6e38\u620f\u5bf9\u8c61\uff0c\u800c\u4e0d\u5fc5\u4e3a\u6bcf\u4e00\u79cd\u7ec4\u5408\u90fd\u5199\u4e00\u4e2a\u7c7b\u3002\\n\\n```cpp\\nstruct Component {\\n    virtual void update(GameObject *go) = 0;\\n    virtual ~Component() = default;  // \u6ce8\u610f\uff01\\n};\\n\\nstruct GameObject {\\n    vector<Component *> components;\\n\\n    void add(Component *component) {\\n        components.push_back(component);\\n    }\\n\\n    void update() {\\n        for (auto &&c: components) {\\n            c->update(this);\\n        }\\n    }\\n};\\n```\\n\\n\u6ce8\u610f\uff1aComponent \u7684\u6790\u6784\u51fd\u6570\u5fc5\u987b\u4e3a\u865a\u51fd\u6570\u3002\u5426\u5219\uff0c\u5f53 Component \u88ab delete \u65f6\uff0c\u53ea\u4f1a\u8c03\u7528\u5230 Component \u8fd9\u4e2a\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u8c03\u7528\u5230\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\\n\\n\u5426\u5219\uff0c\u5982\u679c\u4f60\u7684\u5b50\u7c7b\u6709 string\u3001vector \u8fd9\u79cd\u6301\u6709\u5185\u5b58\u8d44\u6e90\u7684\u5bb9\u5668\u7c7b\uff0c\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u6f0f\uff0c\u5bfc\u81f4\u6e38\u620f\u8fd0\u884c\u8d8a\u4e45\u5185\u5b58\u5360\u7528\u8d8a\u5927\u3002\\n\\n> \u795e\u5947\u7684\u662f\uff0c\u5982\u679c\u4f60\u7684 Component \u5168\u90e8\u90fd\u662f\u7528 make_shared \u521b\u5efa\u7684\uff0c\u90a3\u5c31\u6ca1\u6709\u5185\u5b58\u6cc4\u6f0f\u4e86\uff0c\u8fd9\u5f97\u76ca\u4e8e shared_ptr \u4f1a\u5bf9 deleter \u505a\u7c7b\u578b\u64e6\u9664\u3002\\n> make_unique \u548c new \u521b\u5efa\u7684\u5c31\u4f1a\u6cc4\u6f0f\uff0c\u56e0\u4e3a\u4ed6\u4eec delete \u65f6\u662f\u4ee5\u57fa\u7c7b\u6307\u9488\u53bb delete \u7684\uff0c\u800c shared_ptr \u4f1a\u5728\u6784\u9020\u65f6\u5c31\u8bb0\u4f4f\u5b50\u7c7b\u7684 deleter\u3002\\n\\n\u6240\u6709\u7ec4\u4ef6\uff0c\u90fd\u652f\u6301 update\uff08\u6bcf\u5e27\u66f4\u65b0\uff09\u64cd\u4f5c\uff1a\\n\\n```cpp\\nstruct Movable : Component {\\n    glm::vec3 position;\\n    glm::vec3 velocity;\\n\\n    void update(GameObject *go) override {\\n        position += velocity * dt;\\n    }\\n};\\n```\\n\\n```cpp\\nstruct LivingBeing : Component {\\n    int ageLeft;\\n\\n    void update(GameObject *go) override {\\n        if (ageLeft < 0)\\n            go->kill();\\n        else\\n            ageLeft -= 1;\\n    }\\n};\\n```\\n\\n### \u7ec4\u4ef6\u7684\u521b\u5efa\\n\\n\u7ec4\u4ef6\u6709\u4e24\u79cd\u521b\u5efa\u65b9\u5f0f\uff1a\\n\\n1. \u7ec4\u4ef6\u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u5bf9\u8c61\uff0c\u7531 GameObject \u7684\u6784\u9020\u51fd\u6570\u521b\u5efa\u3002\\n\\n```cpp\\nstruct Player : GameObject {\\n    Movable *movable;\\n    LivingBeing *livingBeing;\\n    PlayerController *playerController;\\n    PlayerAppearance *playerAppearance;\\n\\n    Player() {\\n        movable = new Movable();\\n        livingBeing = new LivingBeing(42);\\n        playerController = new PlayerController();\\n        playerAppearance = new PlayerAppearance();\\n        add(movable);\\n        add(livingBeing);\\n        add(playerController);\\n        add(playerAppearance);\\n    }\\n};\\n```\\n\\n2. \u4e0d\u518d\u9700\u8981\u5b9a\u4e49 Player \u7c7b\u53ca\u5176\u6784\u9020\u51fd\u6570\u4e86\uff0c\u53ea\u9700\u4e00\u4e2a\u666e\u901a\u51fd\u6570\u521b\u5efa\u5177\u6709 Player \u6240\u9700\u6240\u6709\u7ec4\u4ef6\u7684 GameObject \u5bf9\u8c61\u5373\u53ef\u3002\\n\\n```cpp\\nGameObject *makePlayer() {\\n    GameObject *go = new GameObject();\\n\\n    go->add(new Movable());\\n    go->add(new LivingBeing(42));\\n    go->add(new PlayerController());\\n    go->add(new PlayerAppearance());\\n\\n    return go;\\n}\\n```\\n\\n\u6b63\u7ecf\u6e38\u620f\u5f15\u64ce\u90fd\u91c7\u7528\u540e\u8005\uff0c\u4e0d\u7528\u6dfb\u52a0 C++ \u6e90\u7801\uff0c\u53ea\u662f\u4ece xml \u7b49\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u6bcf\u4e2a\u7c7b\u6240\u4f9d\u8d56\u7684\u7ec4\u4ef6\uff0c\u5c31\u80fd\u521b\u5efa\u65b0\u7684\u73a9\u5bb6\u7c7b\uff0c\u65b9\u4fbf\u52a8\u6001\u66f4\u65b0\u6e38\u620f\u903b\u8f91\u800c\u65e0\u9700\u91cd\u65b0\u53d1\u5e03 dll\u3002\\n\\n### \u7ec4\u4ef6\u4e4b\u95f4\u5982\u4f55\u901a\u4fe1\\n\\n\u7f3a\u70b9\u662f\uff0c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u9700\u8981\u901a\u8fc7 GameObject \u6765\u5b9e\u73b0\uff0c\u800c GameObject \u5e76\u4e0d\u77e5\u9053\u5b83\u7684\u7ec4\u4ef6\u662f\u4ec0\u4e48\uff0c\u8fd9\u6837\u5c31\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u7ec4\u4ef6\u7684\u6210\u5458\u3002\\n\\n\u4f8b\u5982\uff0cPlayerController \u7ec4\u4ef6\u60f3\u8981\u6539\u53d8 Movable \u7ec4\u4ef6\u7684 velocity\uff0c\u5c31\u65e0\u6cd5\u76f4\u63a5\u6539\u3002\\n\\n```cpp\\nstruct PlayerController : Component {\\n    void update(GameObject *go) override {\\n        if (isKeyPressed(GLFW_KEY_W)) {\\n            go->velocity.y += 1; // \u9519\u8bef\uff01velocity \u662f Movable \u7ec4\u4ef6\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f GameObject \u91cc\u76f4\u63a5\u6709\u7684\\n        }\\n        if (isKeyPressed(GLFW_KEY_S)) {\\n            go->velocity.y -= 1;\\n        }\\n        if (isKeyPressed(GLFW_KEY_A)) {\\n            go->velocity.x -= 1;\\n        }\\n        if (isKeyPressed(GLFW_KEY_D)) {\\n            go->velocity.x += 1;\\n        }\\n    }\\n};\\n```\\n\\n\u5982\u4f55\u89e3\u51b3\u7ec4\u4ef6\u4e4b\u95f4\u901a\u4fe1\u96be\u7684\u95ee\u9898\uff1f\\n\\n1. \u628a\u5e38\u7528\u7684\u5b57\u6bb5\uff0c\u4f8b\u5982 position \u548c velocity \u76f4\u63a5\u653e\u5728 GameObject \u91cc\uff0c\u4f9b\u6240\u6709\u7ec4\u4ef6\u76f4\u63a5\u8bbf\u95ee\u3002\\n\\n```cpp\\nstruct GameObject {\\n    glm::vec3 position;\\n    glm::vec3 velocity;\\n\\n    ...\\n};\\n```\\n\\n2. \u5141\u8bb8\u7528\u6237\u6839\u636e\u5176\u4ed6\u7ec4\u4ef6\u7684\u7c7b\u578b\uff0c\u76f4\u63a5\u83b7\u53d6\u51fa\u5176\u4ed6\u7ec4\u4ef6\u7684\u6307\u9488\uff0c\u5373\u53ef\u8bbf\u95ee\u5176\u6210\u5458\u3002\\n\\n```cpp\\nstruct PlayerController : Component {\\n    void update(GameObject *go) override {\\n        Movable *movable = go->getComponent<Movable>();\\n        if (!movable) {\\n            throw runtime_error(\\"\u8fd9\u4e2a\u5bf9\u8c61\u4f3c\u4e4e\u4e0d\u652f\u6301\u79fb\u52a8\\");\\n        }\\n        if (isKeyPressed(GLFW_KEY_W)) {\\n            movable->velocity.y += 1;\\n        }\\n        if (isKeyPressed(GLFW_KEY_S)) {\\n            movable->velocity.y -= 1;\\n        }\\n        if (isKeyPressed(GLFW_KEY_A)) {\\n            movable->velocity.x -= 1;\\n        }\\n        if (isKeyPressed(GLFW_KEY_D)) {\\n            movable->velocity.x += 1;\\n        }\\n    }\\n};\\n```\\n\\n\u7136\u800c\uff0cgetComponent \u5982\u4f55\u5b9e\u73b0\uff1f\\n\\n```cpp\\nstruct GameObject {\\n    template <class T>\\n    T *getComponent() {\\n        for (auto &&c: components) {\\n            if (T *t = dynamic_cast<T *>(c)) {\\n                return t;\\n            }\\n        }\\n        return nullptr;\\n    }\\n};\\n```\\n\\n\u7528\u5230\u4e86 `dynamic_cast`\uff0c\u8fd9\u662f\u6bd4\u8f83\u4f4e\u6548\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u800c\u4e14\u4e5f\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219\u3002\\n\\n\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u5229\u7528 typeid \u505a map \u7684\u952e\uff0c\u52a0\u901f\u67e5\u627e\u3002\u6ca1\u6709\u6027\u80fd\u95ee\u9898\uff0c\u4f46\u4f9d\u7136\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219\u3002\\n\\n```cpp\\nstruct GameObject {\\n    unordered_map<type_index, Component *> components;\\n\\n    template <class T>\\n    T *getComponent() {\\n        if (auto it = components.find(typeid(T)); it != components.end()) {\\n            return dynamic_cast<T *>(it->second);\\n        } else {\\n            return nullptr;\\n        }\\n    }\\n\\n    void add(Component *component) {\\n        components[typeid(*component)] = component;\\n    }\\n};\\n```\\n\\n3. \u8ba9 PlayerController \u53d1\u51fa\u6307\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u5bf9\u8c61\uff0c\u7531 Movable \u68c0\u67e5\u5e76\u5904\u7406\u3002\\n\\n\u6d88\u606f\u7c7b\u578b\u4e5f\u662f\u591a\u6001\u7684\uff0c\u521d\u5b66\u8005\u53ef\u4ee5\u5148\u901a\u8fc7 `dynamic_cast` \u5b9e\u73b0\u7c7b\u578b\u68c0\u67e5\u3002\u7a0d\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u66f4\u4e13\u4e1a\u7684\u8bbf\u95ee\u8005\u6a21\u5f0f\u3002\\n\\n\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u80fd\u628a\u5b50\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u57fa\u7c7b\u6307\u9488\u3002\\n\\n\u800c dynamic_cast \u53ef\u4ee5\u628a\u57fa\u7c7b\u6307\u9488\u8f6c\u6362\u4e3a\u5b50\u7c7b\u6307\u9488\u3002\\n\\n\u5982\u679c\u4ed6\u6307\u5411\u7684\u5bf9\u8c61\u786e\u5b9e\u5c31\u662f\u90a3\u4e2a\u5b50\u7c7b\u7c7b\u578b\u7684\u8bdd\uff0c\u5c31\u6b63\u5e38\u8fd4\u56de\u5b50\u7c7b\u6307\u9488\u4e86\u3002\\n\\n\u5426\u5219\uff0c\u5982\u679c\u7c7b\u578b\u4e0d\u5339\u914d\uff0c`dynamic_cast` \u4f1a\u8fd4\u56de nullptr\u3002\u53ea\u9700\u5224\u65ad\u8fd4\u56de\u7684\u6307\u9488\u662f\u4e0d\u662f nullptr \u5c31\u77e5\u9053\u662f\u5426\u7c7b\u578b\u5339\u914d\u4e86\u3002\\n\\n### \u89c2\u5bdf\u8005\u6a21\u5f0f\\n\\n```cpp\\nstruct Message {\\n    virtual ~Message() = default;  // C++ \u89c4\u5b9a\uff1a\u53ea\u6709\u591a\u6001\u7c7b\u578b\u624d\u80fd dynamic_cast\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u4e0d\u5230\u865a\u51fd\u6570\uff0c\u90a3\u5c31\u53ea\u8ba9\u6790\u6784\u51fd\u6570\u4e3a\u865a\u51fd\u6570\uff0c\u5373\u53ef\u4f7f Message \u53d8\u4e3a\u591a\u6001\u7c7b\u578b\\n};\\n\\nstruct MoveMessage : Message {\\n    glm::vec3 velocityChange;\\n};\\n\\nstruct Component {\\n    virtual void update(GameObject *go) = 0;\\n    virtual void handleMessage(Message *msg) = 0;\\n    virtual ~Component() = default;\\n};\\n\\nstruct Movable : Component {\\n    glm::vec3 position;\\n    glm::vec3 velocity;\\n\\n    void handleMessage(Message *msg) override {\\n        // \u6240\u6709\u4e0d\u540c\u7684\u6d88\u606f\u7c7b\u578b\u90fd\u4f1a\u8fdb\u5165\u6b64\u51fd\u6570\\n        if (MoveMessage *mm = dynamic_cast<MoveMessage *>(msg)) {\\n            // \u4f46\u53ea\u6709\u771f\u6b63\u7c7b\u578b\u4e3a MoveMessage \u7684\u6d88\u606f\u4f1a\u88ab\u5904\u7406\\n            velocity += mm->velocityChange;\\n        }\\n    }\\n};\\n\\nstruct PlayerController : Component {\\n    void update(GameObject *go) override {\\n        if (isKeyPressed(GLFW_KEY_W)) {\\n            MoveMessage mm;\\n            mm.velocityChange.y += 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_S)) {\\n            MoveMessage mm;\\n            mm.velocityChange.y -= 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_A)) {\\n            MoveMessage mm;\\n            mm.velocityChange.x -= 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_D)) {\\n            MoveMessage mm;\\n            mm.velocityChange.x += 1;\\n            go->send(&mm);\\n        }\\n    }\\n};\\n```\\n\\n```cpp\\nstruct GameObject {\\n    vector<Component *> components;\\n\\n    void add(Component *component) {\\n        components.push_back(component);\\n    }\\n\\n    void update() {\\n        for (auto &&c: components) {\\n            c->update(this);\\n        }\\n    }\\n\\n    void send(Message *msg) {\\n        for (auto &&c: components) {\\n            c->handleMessage(msg);\\n        }\\n    }\\n};\\n```\\n\\n\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u6536\u5230\u6240\u6709\u6d88\u606f\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\\n\\n\u4f46\u8fd9\u6837\u505a\u7684\u7f3a\u70b9\u662f\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u9700\u8981\u5904\u7406\u6240\u6709\u6d88\u606f\uff0c\u4e0d\u8bba\u662f\u5426\u662f\u81ea\u5df1\u9700\u8981\u7684\uff0c\u5982\u679c\u7ec4\u4ef6\u6570\u91cf\u591a\uff0c\u6d88\u606f\u7c7b\u578b\u53c8\u591a\uff0c\u5c31\u4f1a\u51fa\u73b0\u6027\u80fd\u95ee\u9898\u3002\\n\\n### \u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\\n\\n\u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\u662f\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u5347\u7ea7\u7248\uff0c\u7531\u4e00\u4e2a\u4e2d\u5fc3\u7684\u4e8b\u4ef6\u603b\u7ebf\u6765\u7ba1\u7406\u6d88\u606f\u7684\u5206\u53d1\u3002\u4e8b\u4ef6\u603b\u7ebf\u901a\u5e38\u4f5c\u4e3a GameObject \u7684\u6210\u5458\u51fa\u73b0\u3002\\n\\n\u6bcf\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u8ba2\u9605\u81ea\u5df1\u611f\u5174\u8da3\u7684\u6d88\u606f\u7c7b\u578b\uff0c\u5f53\u4e8b\u4ef6\u603b\u7ebf\u6536\u5230\u6d88\u606f\u65f6\uff0c\u53ea\u628a\u6d88\u606f\u5206\u53d1\u7ed9\u8ba2\u9605\u8005\uff0c\u800c\u4e0d\u662f\u6240\u6709\u7ec4\u4ef6\u3002\\n\\n```cpp\\nstruct GameObject {\\n    vector<Component *> components;\\n    unordered_map<type_index, vector<Component *>> subscribers;  // \u4e8b\u4ef6\u603b\u7ebf\\n\\n    template <class EventType>\\n    void subscribe(Component *component) {\\n        subscribers[type_index(typeid(EventType))].push_back(component);\\n    }\\n\\n    template <class EventType>\\n    void send(EventType *msg) {\\n        for (auto &&c: subscribers[type_index(typeid(EventType))]) {\\n            c->handleMessage(msg);\\n        }\\n    }\\n\\n    void add(Component *component) {\\n        components.push_back(component);\\n        component->subscribeMessages(this);\\n    }\\n\\n    void update() {\\n        for (auto &&c: components) {\\n            c->update(this);\\n        }\\n    }\\n};\\n\\nstruct Component {\\n    virtual void update(GameObject *go) = 0;\\n    virtual void subscribeMessages(GameObject *go) = 0;\\n    virtual void handleMessage(Message *msg) = 0;\\n    virtual ~Component() = default;\\n};\\n\\nstruct Movable : Component {\\n    glm::vec3 position;\\n    glm::vec3 velocity;\\n\\n    void subscribeMessages(GameObject *go) {\\n        go->subscribe<MoveMessage>(this);\\n    }\\n\\n    void handleMessage(Message *msg) override {\\n        if (MoveMessage *mm = dynamic_cast<MoveMessage *>(msg)) {\\n            velocity += mm->velocityChange;\\n        }\\n    }\\n};\\n\\nstruct PlayerController : Component {\\n    void update(GameObject *go) override {\\n        if (isKeyPressed(GLFW_KEY_W)) {\\n            MoveMessage mm;\\n            mm.velocityChange.y += 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_S)) {\\n            MoveMessage mm;\\n            mm.velocityChange.y -= 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_A)) {\\n            MoveMessage mm;\\n            mm.velocityChange.x -= 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_D)) {\\n            MoveMessage mm;\\n            mm.velocityChange.x += 1;\\n            go->send(&mm);\\n        }\\n        if (isKeyPressed(GLFW_KEY_SPACE)) {\\n            JumpMessage jm;\\n            go->send(&jm);\\n        }\\n    }\\n};\\n```\\n\\n\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ec4\u4ef6\u4e4b\u95f4\u7684\u6309\u9700\u901a\u4fe1\u3002\\n\\n### \u8bbf\u95ee\u8005\u6a21\u5f0f\\n\\n```cpp\\nstruct Message {\\n    virtual ~Message() = default;\\n};\\n\\nstruct MoveMessage {\\n    glm::vec3 velocityChange;\\n};\\n\\nstruct JumpMessage {\\n    double jumpHeight;\\n};\\n```\\n\\n\u5982\u4f55\u5b9a\u4e49\u5bf9\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u6d88\u606f\u7684\u5904\u7406\u65b9\u5f0f\uff1f\\n\\n```cpp\\nstruct MessageVisitor;  // \u524d\u5411\u58f0\u660e\\n\\nstruct Message {\\n    virtual void accept(MessageVisitor *visitor) = 0;\\n    virtual ~Message() = default;\\n};\\n\\nstruct MoveMessage {\\n    glm::vec3 velocityChange;\\n\\n    void accept(MessageVisitor *visitor) override {\\n        visitor->visit(this);  // \u4f1a\u8c03\u7528\u5230 visit(MoveMessage *mm) \u8fd9\u4e2a\u91cd\u8f7d\\n    }\\n};\\n\\nstruct JumpMessage {\\n    double jumpHeight;\\n\\n    void accept(MessageVisitor *visitor) override {\\n        visitor->visit(this);  // \u4f1a\u8c03\u7528\u5230 visit(JumpMessage *mm) \u8fd9\u4e2a\u91cd\u8f7d\\n    }\\n};\\n\\nstruct MessageVisitor {\\n    virtual void visit(MoveMessage *mm) {}  // \u9ed8\u8ba4\u4e0d\u505a\u4efb\u4f55\u5904\u7406\\n    virtual void visit(JumpMessage *jm) {}  // \u9ed8\u8ba4\u4e0d\u505a\u4efb\u4f55\u5904\u7406\\n};\\n\\nstruct Movable : MessageVisitor {\\n    glm::vec3 position;\\n    glm::vec3 velocity;\\n\\n    void handleMessage(Message *msg) {\\n        msg->accept(this);\\n    }\\n\\n    void visit(MoveMessage *mm) override {\\n        velocity += mm->velocityChange;\\n    }\\n\\n    void visit(JumpMessage *jm) override {\\n        velocity.y += sqrt(2 * 9.8 * jm->jumpHeight);\\n    }\\n};\\n```\\n\\n\u8fd9\u5c31\u662f\u8bbf\u95ee\u8005\u6a21\u5f0f\uff0c\u540c\u65f6\u7528\u5230\u4e86\u9762\u5411\u5bf9\u8c61\u7684\u865a\u51fd\u6570\u548c\u91cd\u8f7d\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u5bf9\u6240\u6709\u4e0d\u540c\u7c7b\u578b\u6d88\u606f\u90fd\u80fd\u5b9a\u5236\u4e00\u4e2a\u5904\u7406\u65b9\u5f0f\uff0c\u800c\u4e0d\u7528\u901a\u8fc7\u4f4e\u6548\u7684 `dynamic_cast` \u5224\u65ad\u6d88\u606f\u7c7b\u578b\u3002\\n\\n\u8bbf\u95ee\u8005\u6a21\u5f0f\u662f\u5426\u7b26\u5408\u5f00\u95ed\u539f\u5219\u5462\uff1f\\n\\n\u5f53\u6211\u4eec\u65b0\u589e\u4e00\u79cd\u6d88\u606f\u7c7b\u578b\u65f6\uff0c\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\u6709\uff1a\\n\\n1. \u65b0\u589e\u6d88\u606f\u7c7b\u578b\\n2. \u5728 `MessageVisitor` \u4e2d\u6dfb\u52a0\u4e00\u4e2a `visit` \u7684\u91cd\u8f7d\\n\\n\u5f53\u6211\u4eec\u65b0\u589e\u4e00\u79cd\u7ec4\u4ef6\u7c7b\u578b\u65f6\uff0c\u9700\u8981\u4fee\u6539\u7684\u5730\u65b9\u6709\uff1a\\n\\n1. \u65b0\u589e\u7ec4\u4ef6\u7c7b\u578b\\n\\n\u8fd9\u4e09\u9879\u4fee\u6539\u90fd\u662f\u7b26\u5408\u5f00\u95ed\u539f\u5219\u7684\uff0c\u5e76\u4e0d\u4f1a\u51fa\u73b0\u7275\u4e00\u53d1\u800c\u52a8\u5168\u8eab\u7684\u60c5\u51b5\u3002\\n\\n\u4f46\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u8981\u5904\u7406\u6240\u6709\u6d88\u606f\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e0d\u7b26\u5408\u5f00\u95ed\u539f\u5219\u7684\u8bbe\u8ba1\uff0c\u56e0\u6b64\u6211\u4eec\u8ba9\u6240\u6709\u7684 visit \u865a\u51fd\u6570\u6709\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u90a3\u5c31\u662f\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u8fd9\u6837\u5f53\u65b0\u589e\u6d88\u606f\u7c7b\u578b\u65f6\uff0c\u867d\u7136\u9700\u8981\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u91cd\u65b0\u7f16\u8bd1\u4e86\uff0c\u4f46\u662f\u7a0b\u5e8f\u5458\u65e0\u9700\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6e90\u7801\u7ea7\u522b\u4e0a\uff0c\u662f\u6ee1\u8db3\u5f00\u95ed\u539f\u5219\u7684\u3002\\n\\n\u8bbf\u95ee\u8005\u6a21\u5f0f\u901a\u5e38\u7528\u4e8e acceptor \u6570\u91cf\u6709\u9650\uff0c\u4f46 visitor \u7684\u7ec4\u4ef6\u7c7b\u578b\u5343\u53d8\u4e07\u5316\u7684\u60c5\u51b5\u3002\\n\\n- \u5982\u679c\u6d88\u606f\u7c7b\u578b\u6709\u9650\uff0c\u7ec4\u4ef6\u7c7b\u578b\u53ef\u80fd\u7ecf\u5e38\u589e\u52a0\uff0c\u90a3\u9700\u8981\u628a\u7ec4\u4ef6\u7c7b\u578b\u4f5c\u4e3a visitor\uff0c\u6d88\u606f\u7c7b\u578b\u4f5c\u4e3a acceptor\u3002\\n- \u5982\u679c\u7ec4\u4ef6\u7c7b\u578b\u6709\u9650\uff0c\u6d88\u606f\u7c7b\u578b\u53ef\u80fd\u7ecf\u5e38\u589e\u52a0\uff0c\u90a3\u9700\u8981\u628a\u6d88\u606f\u7c7b\u578b\u4f5c\u4e3a visitor\uff0c\u7ec4\u4ef6\u7c7b\u578b\u4f5c\u4e3a acceptor\u3002\\n\\n- \u5e38\u4f5c\u4e3a acceptor \u7684\u6709\uff1a\u7f16\u8bd1\u5668\u5f00\u53d1\u4e2d\u7684 IR \u8282\u70b9\uff08\u4ee3\u7801\u4e2d\u95f4\u8868\u793a\uff09\uff0c\u6e38\u620f\u4e0e UI \u5f00\u53d1\u4e2d\u7684\u6d88\u606f\u7c7b\u578b\u3002\\n- \u5e38\u4f5c\u4e3a visitor \u7684\u6709\uff1a\u7f16\u8bd1\u5668\u5f00\u53d1\u4e2d\u7684\u4f18\u5316 pass\uff08\u4f1a\u4fee\u6539 IR \u8282\u70b9\uff09\uff0c\u6e38\u620f\u4e0e UI \u5f00\u53d1\u4e2d\u7684\u63a5\u53d7\u6d88\u606f\u7ec4\u4ef6\u7c7b\u578b\u3002\\n\\n\u4f46\u662f\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u8981\u5b9e\u73b0 `accept` \u7684\u91cd\u8f7d\uff0c\u5185\u5bb9\u5b8c\u5168\u4e00\u6837\uff0c\u51fa\u73b0\u4e86\u4ee3\u7801\u91cd\u590d\u3002\\n\\nJava \u7684\u6a21\u677f\u662f type-erasure \u7684\uff0c\u5bf9\u6b64\u675f\u624b\u65e0\u7b56\u3002\u800c C++ \u7684\u6a21\u677f\u662f refined-generic\uff0c\u53ef\u4ee5\u5229\u7528 CRTP \u81ea\u52a8\u5b9e\u73b0\u8fd9\u90e8\u5206\uff1a\\n\\n```cpp\\nstruct Message {\\n    virtual void accept(MessageVisitor *visitor) = 0;\\n    virtual ~Message() = default;\\n};\\n\\ntemplate <class Derived>\\nstruct MessageImpl : Message {\\n    void accept(MessageVisitor *visitor) override {\\n        static_assert(std::is_base_of_v<MessageImpl, Derived>);\\n        visitor->visit(static_cast<Derived *>(this));\\n    }\\n};\\n\\nstruct MoveMessage : MessageImpl<MoveMessage> {\\n    glm::vec3 velocityChange;\\n    // \u81ea\u52a8\u5b9e\u73b0\u4e86 accept \u51fd\u6570\\n};\\n\\nstruct JumpMessage : MessageImpl<JumpMessage> {\\n    double jumpHeight;\\n};\\n```\\n\\n> \u5728\u5c0f\u5f6d\u8001\u5e08\u81ea\u4e3b\u7814\u53d1\u7684 Zeno \u4e2d\uff0cZFX \u7f16\u8bd1\u5668\u7684 IR \u4f18\u5316\u7cfb\u7edf\u5c31\u8fd0\u7528\u4e86 CRTP \u52a0\u6301\u7684\u8bbf\u95ee\u8005\u6a21\u5f0f\u3002\\n\\n## MVC \u6a21\u5f0f\\n\\n\u8bbe\u8ba1\u6a21\u5f0f\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8bdd\u9898\uff0c\u672c\u671f\u5148\u8bb2\u5230\u8fd9\u91cc\uff0c\u4e0b\u96c6\u6211\u4eec\u7ee7\u7eed\u4ecb\u7ecd UI \u5f00\u53d1\u4e2d\u5927\u540d\u9f0e\u9f0e\u7684 MVC \u6a21\u5f0f\u3002\\n\\nMVC \u6a21\u5f0f\u662f\u4e00\u79cd\u67b6\u6784\u6a21\u5f0f\uff0c\u5b83\u5c06\u5e94\u7528\u7a0b\u5e8f\u5206\u4e3a\u4e09\u4e2a\u6838\u5fc3\u90e8\u5206\uff1a\u6a21\u578b\uff08Model\uff09\u3001\u89c6\u56fe\uff08View\uff09\u548c\u63a7\u5236\u5668\uff08Controller\uff09\uff0c\u901a\u8fc7\u5206\u79bb\u5e94\u7528\u7a0b\u5e8f\u7684\u8f93\u5165\u3001\u5904\u7406\u548c\u8f93\u51fa\u6765\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002\\n\\n- \u6a21\u578b\uff08Model\uff09\uff1a\u8d1f\u8d23\u5904\u7406\u6570\u636e\u548c\u4e1a\u52a1\u903b\u8f91\uff0c\u901a\u5e38\u7531\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u5e93\u7ec4\u6210\u3002\\n- \u89c6\u56fe\uff08View\uff09\uff1a\u8d1f\u8d23\u5c55\u793a\u6570\u636e\u548c\u7528\u6237\u754c\u9762\uff0c\u901a\u5e38\u7531 HTML\u3001CSS \u548c JavaScript \u7ec4\u6210\u3002\\n- \u63a7\u5236\u5668\uff08Controller\uff09\uff1a\u8d1f\u8d23\u5904\u7406\u7528\u6237\u4ea4\u4e92\u548c\u8c03\u5ea6\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u901a\u5e38\u7531\u540e\u7aef\u8bed\u8a00\uff08\u5982 PHP\u3001Java \u7b49\uff09\u5b9e\u73b0\u3002\\n\\nMVC \u6a21\u5f0f\u7684\u4f18\u70b9\uff1a\\n\\n- \u4f4e\u8026\u5408\uff1a\u6a21\u578b\u3001\u89c6\u56fe\u548c\u63a7\u5236\u5668\u4e4b\u95f4\u7684\u804c\u8d23\u6e05\u6670\uff0c\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u8fdb\u884c\u5355\u72ec\u7684\u4fee\u6539\u548c\u7ef4\u62a4\u3002\\n- \u53ef\u6269\u5c55\u6027\uff1a\u7531\u4e8e\u6a21\u578b\u3001\u89c6\u56fe\u548c\u63a7\u5236\u5668\u4e4b\u95f4\u7684\u4f4e\u8026\u5408\u6027\uff0c\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\u548c\u7ec4\u4ef6\u3002\\n- \u53ef\u7ef4\u62a4\u6027\uff1a\u5206\u79bb\u4e86\u4e0d\u540c\u7684\u804c\u8d23\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u7ef4\u62a4\u3002"},{"id":"/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1","metadata":{"permalink":"/blog/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1.md","source":"@site/blog/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1.md","title":"\u6a21\u7248\u5143\u5165\u95e8","description":"\u6a21\u7248\u7c7b\u578b\u63a8\u5bfc","date":"2024-08-05T16:57:03.000Z","formattedDate":"August 5, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":18.9,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u6a21\u7248\u5143\u5165\u95e8","tags":["C++"]},"prevItem":{"title":"\u5e38\u7528\u8bbe\u8ba1\u6a21\u5f0f","permalink":"/blog/C++/\u8bbe\u8ba1\u6a21\u5f0f/1"},"nextItem":{"title":"\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001","permalink":"/blog/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1"}},"content":"\x3c!--truncate--\x3e\\n\\n## \u6a21\u7248\u7c7b\u578b\u63a8\u5bfc\\n\\n```cpp\\ntemplate<typename T>\\nvoid f(ParamType param);\\n\\nf(expr)\\n```\\n\\n\u5bf9\u4e0a\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u4f9d\u636eParamType\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\\n\\n> 1. ParamType\u662f\u6307\u9488\u6216\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u4e0d\u662f\u901a\u7528\u5f15\u7528\uff08Universal Reference\uff09\u3010\u901a\u7528\u5f15\u7528\u5e94\u8be5\u662fmodern effective c++\u7684\u4f5c\u8005\u63d0\u51fa\u6765\u7684\u6982\u5ff5\uff0c\u8868\u793a\u6a21\u7248\u4e2d&&\u9488\u5bf9\u4f20\u5165\u7684\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u63d0\u4f9b\u4e0d\u540c\u7684\u6548\u679c\uff0c\u672c\u8d28cpp\u53ea\u6709\u5f15\u7528\u6298\u53e0\u3011\\n> 2. ParamType\u662f\u901a\u7528\u5f15\u7528\uff08Universal Reference\uff09\\n> 3. ParamType\u65e2\u4e0d\u662f\u6307\u9488\u4e5f\u4e0d\u662f\u5f15\u7528\\n\\n### ParamType\u662f\u6307\u9488\u6216\u666e\u901a\u5f15\u7528\u7c7b\u578b\\n\\n```cpp\\n/// \u5f15\u7528\\ntemplate<typename T>\\nvoid f(T& param);\\n\\nint x = 27;\\nconst int cx = x;\\nconst int& rx = x;\\n\\nf(x); // T is int, ParamType is int&\\nf(cx); // T is const int, ParamType is const int&\\nf(rx); // T is const int, ParamType is const int&\\n\\n\\n```\\n\\n**const\u4fee\u9970\u4f1a\u8ddf\u968f\u4f20\u9012\u8fdb\u6a21\u7248\u53c2\u6570T\uff1b\u4f46\u662f\u5f15\u7528\u4fee\u9970\u4f1a\u88ab\u5ffd\u7565\uff08\u6307\u9488\u4e0e\u5f15\u7528\u7c7b\u4f3c\uff09**\\n\\n```cpp\\ntemplate<typename T>\\nvoid f(const T& param);\\n\\nint x = 27;\\nconst int cx = x;\\nconst int& rx = x;\\n\\nf(x); // T is int, ParamType is const int&\\nf(cx); // T is int, ParamType is const int&\\nf(rx); // T is int, ParamType is const int&\\n```\\n\\n### ParamType\u662f\u901a\u7528\u5f15\u7528\\n\\n```cpp\\ntemplat<typename T>\\nvoid f(T&& param);\\n\\nint x = 27;\\nconst int cx = x;\\nconst int& rx = x;\\n\\nf(x); // x is lvalue, T is int&, ParamType is int&\\nf(cx); // x is lvalue, T is const int&, ParamType is const int&\\nf(rx); // x is lvalue, T is const int&, ParamType is const int&\\nf(27); // x is rvalue, T is int, ParamType is int&&\\n```\\n\\n\u5982\u679c\u4f20\u5165f\u7684\u662f\u4e2a\u5de6\u503c\uff0cT\u548cParamType\u90fd\u4f1a\u88ab\u63a8\u5bfc\u4e3a\u5de6\u503c\u5f15\u7528\\n\\n\u5982\u679c\u4f20\u5165f\u7684\u662f\u53f3\u503c\uff0c \u89c4\u5219\u540ccase1\\n\\n> \u5f15\u7528\u6298\u53e0\uff1f&\u4f20\u7ed9 && \u6216\u8005 && \u4f20\u7ed9& \u90fd\u4f1a\u53d8\u6210&\uff1b && \u4f20\u7ed9&&\u8fd8\u662f&&\\n\\n### ParamType\u4e0d\u662f\u5f15\u7528/\u6307\u9488\\n\\n```cpp\\ntemplat<typename T>\\nvoid f(T param);\\n\\nint x = 27;\\nconst int cx = x;\\nconst int& rx = x;\\nint* y = x;\\n\\nf(x); // T is int, ParamType is int\\nf(cx); // T is int, ParamType is int\\nf(rx); // T is int, ParamType is int\\nf(y); // T is int*, ParamType is int*\\n```\\n\\n\u4f20\u5f15\u7528\uff0c\u503c\u4f20\u9012\uff0c\u51fd\u6570\u4e2d\u7684T\u76f8\u5f53\u4e8e\u662f\u4e2a\u6df1\u62f7\u8d1d\uff0c\u56e0\u6b64T\u4e0d\u4f1a\u5e26const\\n\\n**\u4f20\u6307\u9488\u8fdb\u53bb\u4f1a\u89e3\u6790\u6210\u6307\u9488\u7c7b\u578b**\\n\\n```cpp\\nstruct A {\\nint x = 0;\\n};\\n\\n\\ntemplate<typename T>\\nvoid f1(T a){\\n    a.x = 1;\\n}\\n\\ntemplate<typename T>\\nvoid f2(T& a){\\n    a.x = 2;\\n}\\n\\nint main() {\\n    A a;\\n    A& a1 = a;\\n    A& a2 = a;\\n\\n    // auto a11 = a;  auto = A, a1 is A\\n    f1(a1);\\n    std::cout << a1.x << std::endl;\\n\\n    // auto& a22 = a;  auto = A, a22 is A&\\n    f2(a2);\\n    std::cout << a2.x << std::endl;\\n}\\n```\\n\\n## auto\u7c7b\u578b\u63a8\u5bfc\\n\\n>  auto type deduction *is* template type deduction\\n\\n```cpp\\n// auto x = 27; \u7b49\u4ef7\u4e8e\\ntemplate<typename T>\\nvoid f(T param);\\nf(27);  // auto = T = int\\n\\n// const auto cx = x; \u7b49\u4ef7\u4e8e\\ntemplate<typename T>\\nvoid f(const T param);\\nf(cx);  // auto = T = int\\n\\n// const auto& rx = x;\\ntemplate<typename T>\\nvoid f(const T& param);\\nf(rx);  // auto = T = int\\n\\n// auto&& y = std::move(x)\\ntemplate<typename T>\\nvoid f(T&& param);\\nf(y); // auto = T = int, ParamType = int&&\\n```\\n\\n\\n\\n\u4e3a\u4ec0\u4e48\u4e0b\u9762\u4e24\u4e2a\u90fd\u53ef\u4ee5\\n\\n```cpp\\nint main() {\\n    auto a1 = new A; // case 3\\n    delete a1;\\n\\n    auto* a2 = new A; // case 1\\n    delete a2;\\n}\\n```\\n\\n\\n\\n## \u6a21\u7248\u53c2\u6570\\n\\n\u6a21\u7248\u53c2\u6570\u4e3b\u8981\u6709\u4e09\u79cd\\n\\n>1. \u7c7b\u578b\\n>2. \u6574\u6570\u548c\u6574\u6570\u7684\u884d\u751f\u7c7b\u578b\\n>3. \u6a21\u7248\\n\\n### \u7c7b\u578b\u6a21\u7248\u53c2\u6570\\n\\n```cpp\\ntemplate<typename T>\\nvoid print(const T& t){\\n    std::cout << t << std::endl;\\n}\\n\\nprint(1);\\nint x = 1;\\nprint(x);\\n```\\n\\n### \u6574\u6570\\n\\n\u5fc5\u987b\u7f16\u8bd1\u671f\u786e\u5b9a\u7684\u503c\\n\\n```cpp\\ntemplate <int* p>\\nvoid f(int data){\\n    *p = data;\\n}\\n\\nint g = 1;\\n\\nstruct A{\\n    int m1;\\n    static int m2;\\n};\\n\\nint A::m2 = 1;\\n\\nint main(){\\n    f<&g>(0);\\n    f<&A::m2>(0);\\n\\n    static int c = 3;\\n    f<&A::m2>(0);\\n}\\n```\\n\\n**\u6574\u6570\u884d\u751f\u7c7b\u578b**\\n\\n\u5730\u5740\u5728\u7f16\u8bd1\u671f\u80af\u5b9a\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u53ea\u8981\u4fdd\u8bc1\u67d0\u4e2a\u5730\u5740\u7684\u6570\u636e\u5728\u8fd0\u884c\u671f\u95f4\u662f\u4e0d\u53d8\u7684\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\\n\\n```cpp\\ntemplate <int* p>\\nvoid f(int data){\\n    *p = data;\\n}\\n\\n```\\n\\n**\u51fd\u6570\u6307\u9488**\\n\\n\u56e0\u4e3a\u51fd\u6570\u5730\u5740\u5728\u7a0b\u5e8f\u6bb5\uff0c\u6267\u884c\u8fc7\u7a0b\u5c31\u4e0d\u4f1a\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4f5c\u6a21\u7248\u53c2\u6570\\n\\n```cpp\\n//\\n// Created by ChenhuiWang on 2024/3/28.\\n\\n// Copyright (c) 2024 Tencent. All rights reserved.\\n//\\n#include \\"iostream\\"\\n#include <vector>\\n\\ntemplate <void (*func)()>\\nvoid f(){\\n    func();\\n}\\n\\nvoid f1(){}\\n\\nstruct A{\\n    void f2(){}\\n    static void f3(){}\\n};\\n\\nint main(){\\n    constexpr void (*pf1)() = &f1;\\n\\n    f<&f1>();\\n    f<pf1>();\\n    f<&A::f2>(); //error: &A::f2\u7684\u7c7b\u578b\u662fvoid (Test::*)()\\n    f<&A::f3>();\\n}\\n```\\n\\n\\n\\n### \u6a21\u7248\u7c7b\u578b\uff08\u6a21\u7248\u5d4c\u5957\uff09\\n\\n```cpp\\ntemplate <template<typename, typename> typename Tem>\\nvoid f(){\\n    Tem<int, std::string> te;\\n    te.show();\\n}\\n\\ntemplate<typename T1, typename T2>\\nstruct A1{\\n    void show(){\\n        std::cout << 1 << std::endl;\\n    }\\n};\\n\\ntemplate<typename T1, typename T2>\\nstruct A2{\\n    void show(){\\n        std::cout << 2 << std::endl;\\n    }\\n};\\n\\nint main(){\\n    f<A1>(); //A1\u5b9e\u4f8b\u5316\u524d\u5728\u662ftemplate\u7c7b\u578b\\n    f<A2>();\\n}\\n```\\n\\n## \u53d8\u53c2\u6a21\u7248\\n\\n```cpp\\ntemplate<typename... Ts>\\nauto sum(Ts... ts){\\n    return (ts + ...);\\n}\\n\\nint main(){\\n    sum(1, 2);\\n    sum(1.0, 2);\\n}\\n```\\n\\ntypename... \u8868\u793a\u5305pack\uff0c \u5305\u540d\u4e3aTs\uff0c Ts... \u8868\u793a\u5bf9Ts\u8fdb\u884c\u89e3\u5305\uff0c \u5fc5\u987b\u5728\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u3002\\n\\nTs\u53ef\u4ee5\u4e3a\u7a7a\\n\\n### \u89e3\u5305\u65b9\u6cd5\\n\\n1. \u76f4\u63a5\u5c55\u5f00,\u5305\u4f1a\u88ab\u7f16\u8bd1\u5668\u5c55\u5f00\u4e3a\u9017\u53f7\u95f4\u9694\u7684\u53c2\u6570\\n\\n```cpp\\nstd::byte memory[16384];\\nvoid* head = memory;\\n\\ntemplate<typename T, typename... Args>\\nT& create(Args... args){\\n    auto& obj = *new(head) T(args...); // use operator new\\n    head += sizeof(T);\\n    return obj;\\n}\\n\\nstruct A{\\n    A(int, double){}\\n}\\n\\nint main(){\\n    auto a = Create<A, int, double>(1, 2.5);\\n}\\n\\n// \u6a21\u7248\u5b9e\u4f8b\u5316\u540e\u4f1a\u8fd9\u6837\\nA& create(int arg1, double arg2){\\n    auto& obj = *new(head) A(arg1, arg2);\\n    head += sizeof(T);\\n    return obj;\\n}\\n    \\n```\\n\\n2. \u5d4c\u5957\u5c55\u5f00\\n\\n```cpp\\ntemplate<typename T, int... N>\\nstd::vector<T> GetSubVector(const std::vector<T>& src){\\n    return std::vector<T>{src.at(N)...}\\n}\\n```\\n\\n3. \u6309\u7167\u7b26\u53f7\u5c55\u5f00\uff08c++ 17\uff09\u6298\u53e0\u8868\u8fbe\u5f0f\\n\\n```cpp\\n// c++17\u4e4b\u524d\\ntemplate<typename T>\\nauto sum(T arg){\\n    return arg;\\n}\\n\\ntemplate<typename T, typename... Ts>\\nauto sum(T t, Ts... ts){\\n    return t + sum<Ts...>(ts);\\n}\\n\\nsum<int, double, float, short>(1, 1.0, 2.0, 3);\\n==> 1 + sum<double, float, short>(1.0, 2.0, 3);\\n==> 1 + 1.0 + sum<float, short>(2.0, 3);\\n==> 1 + 1.0 + 2.0 + sum<short>(3);\\n==> 1 + 1.0 + 2.0 + 3\\n\\n// c++17 \u4e4b\u540e\\ntemplate<typename T>\\nauto sum(T... ts){\\n    // \u4e09\u4e2a\u70b9\u5728\u5de6\u8fb9\uff0c \u8868\u793a\u4ece\u5de6\u5230\u53f3\u5408\u5e76\\n    // \u6298\u53e0\u8868\u8fbe\u5f0f\u5fc5\u987b\u8981\u6709\u62ec\u53f7\\n    return (... + ts); \\n}\\n```\\n\\n## \u6a21\u7248\u94fe\u63a5\\n\\n### \u5199\u5728header\u4e2d\u7684\u539f\u56e0\\n\\n```cpp\\n// a.h\\ntemplate<typename T>\\nvoid f();\\n\\n// a.cpp\\n// \u5982\u679c\u628a\u8fd9\u4e2a\u5199\u8fdba.h\u5c31\u4e0d\u4f1a\u62a5\u9519\u4e86\uff0c\u5e76\u4e14\u5982\u679ca.h\u88ab\u591a\u6587\u4ef6include\uff0c\u4e0d\u4f1a\u4ea7\u751fmulti defined\\n// \u56e0\u4e3a\u672a\u5b9e\u4f8b\u5316\u7684\u6a21\u7248\u662f\u81ea\u52a8inline\u7684\\n// \u6ce8\u610f\u5168\u7279\u5316\u7684\u8bdd\u5c31\u4e0d\u4f1a\u81ea\u52a8inline\u4e86\uff0c\u4ed6\u662f\u5b9e\u4f8b\u5316\u540e\u7684\u6a21\u7248\u51fd\u6570\\ntemplate<typename T>\\nvoid f(){\\n    \\n}\\n\\n// main.cpp\\n#include <a.h>\\nint main(){\\n    f<int>();\\n}\\n\\n\\n```\\n\\n\u4ea7\u751f\u4e24\u4e2a\u7f16\u8bd1\u5355\u5143 main.o\u548ca.o\\n\\nmain.o\u4e2d`void  f<int>();` \u53bb\u5176\u4ed6\u5730\u65b9\u627e\u5b9e\u73b0\uff0c\u4f46\u662fa.o\u4e2d\u6ca1\u6709\u4f7f\u7528`f<int>`\u5c31\u4e0d\u4f1a\u4ea7\u751f\u76f8\u5e94\u7684\u51fd\u6570\u88ab\u94fe\u63a5\u4e86\u3002\\n\\n### \u6a21\u7248\u663e\u793a\u5b9e\u4f8b\u5316\\n\\n```cpp\\n// a.h\\ntemplate<typename T>\\nvoid f();\\n\\n// a.cpp\\ntemplate<typename T>\\nvoid f(){}\\n\\n// \u663e\u5f0f\u5b9e\u4f8b\u5316\\ntemplate f<int>();\\n\\n// main.cpp\\n#include <a.h>\\nint main(){\\n    f<int>();\\n}\\n\\n```\\n\\n\\n\\n## SFINAE\\n\\n**Substitution Failure Is Not An Error**\\n\\n```cpp\\n//\\n// Created by ChenhuiWang on 2024/3/29.\\n\\n// Copyright (c) 2024 Tencent. All rights reserved.\\n//\\n#include <iostream>\\n\\ntemplate<typename T, bool Condition>\\nstruct EnableIf{};\\n\\ntemplate<typename T>\\nstruct EnableIf<T, true>{\\n    using type = T;\\n};\\n\\ntemplate<typename T>\\nvoid f(typename EnableIf<T, sizeof(T) <= sizeof(void*)>::type t){\\n    std::cout << \\"1\\" << std::endl;\\n}\\n\\ntemplate<typename T>\\nvoid f(typename EnableIf<T, (sizeof(T) > sizeof(void*))>::type t){\\n    std::cout << \\"2\\" << std::endl;\\n}\\n\\nstruct A{\\n    int data[16];\\n};\\nvoid Demo(){\\n    f<int>(1);\\n    A a;\\n    f<A>(a);\\n}\\n\\n//\u5b9e\u4f8b\u5316\u8fc7\u7a0b,\u8fdb\u884c\u6a21\u7248\u5339\u914d\\nf<int>(1)\\n    ==> void f(typename EnableIf<T, sizeof(T) <= sizeof(void*)>::type t)\\n    ==> \u547d\u4e2dEnableIf\u7684EnableIf<T, true>\u7684\u7279\u5316\u7248\u672c\\n    ==> f(int)\\n\\nf<A>(a)\\n    ==> void f(typename EnableIf<T, sizeof(T) <= sizeof(void*)>::type t)\\n    ==> \u6ca1\u6709\u8fd9\u4e2a\u7279\u5316\u7248\u672c\uff0c\u56de\u5f52\u5230\u901a\u7528\u6a21\u7248template<typename T, bool Condition> struct EnableIf{};\\n\\t==> \u901a\u7528\u7248\u672c\u6ca1\u6709::type, \u5339\u914d\u5931\u8d25\\n    ==> \u7ee7\u7eed\u5339\u914d void f(typename EnableIf<T, sizeof(T) > sizeof(void*)>::type t)\\n    ==> \u547d\u4e2dEnableIf\u7684EnableIf<T, true>\u7684\u7279\u5316\u7248\u672c\\n    ==> f(A)\\n```\\n\\n\u8fd9\u91cc\u7684enable_if\u662fstd::enable_if\u7684\u7b80\u5316\u7248\u3002\\n\\nSFINAE\u662f\u6a21\u7248\u5143\u7f16\u7a0b\u6700\u91cd\u8981\u7684\u7406\u8bba\u57fa\u7840\uff0c\u6838\u5fc3\u5728\u4e8e\u3010\u6784\u9020\u4e00\u79cd\u6a21\u5f0f\uff0c\u8ba9\u5176\u5339\u914d\u6210\u529f\u6216\u5931\u8d25\u3011\\n\\n\\n\\n## \u6a21\u7248\u5143\u7f16\u7a0b\\n\\n\u6a21\u7248\u5143\u5c31\u662f**\u9759\u6001\u8ba1\u7b97+\u7c7b\u578b\u5904\u7406**\\n\\n### \u9759\u6001\u8ba1\u7b97\\n\\n#### \u6574\u6570\u8fd0\u7b97\\n\\n```cpp\\ntemplate<int N>\\nstruct Fib{\\n    constexpr static int value = Fib<N - 2>::value + Fib<N - 1>::value;\\n};\\n\\ntemplate<>\\nstruct Fib<0>{\\n    constexpr static int value = 1;\\n};\\n\\ntemplate<>\\nstruct Fib<1>{\\n    constexpr static int value = 1;\\n};\\n\\nint main(){\\n    int a[Fib<10>::value];\\n}\\n```\\n\\n#### \u903b\u8f91\u8fd0\u7b97\\n\\n\u66f4\u591a\u7684\u662f\u5bf9\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\\n\\n```cpp\\ntemplate<typename T1, typename T2>\\nstruct is_same{\\n    constexpr static bool value = false;\\n};\\n\\ntemplate<typename T>\\nstruct is_same<T, T> {\\n    constexpr static bool value = true;\\n};\\n\\ntemplate<typename T>\\ntypename std::enable_if<is_same<T, int>::value, void>::type\\nf(T t){}\\n```\\n\\n\u5199\u8d77\u6765\u6bd4\u8f83\u5570\u55e6\uff0c\u6240\u4ee5\u66f4\u591a\u662f\u8fd9\u6837\\n\\n```cpp\\ntemplate<typename T, T val>\\nstruct integer_const{\\n    constexpr static T value = val;\\n}\\n\\ntemplate<bool val>\\nusing bool_constant = integer_constant<bool, val>;\\n```\\n\\n### \u7c7b\u578b\u5904\u7406\uff08\u8403\u53d6\uff09\u3010type traits\u3011\\n\\n#### \u6761\u4ef6\u7c7b\u578b\\n\\nstd::conditional\\n\\n```cpp\\ntemplate<bool cond, typename T1, typename T2>\\nstruct conditional {\\n    using type = T1;\\n};\\n\\ntemplate<typename T1, typename T2>\\nstruct conditional<false, T1, T2>{\\n    using type = T2;\\n};\\n\\ntemplate <typename T>\\nvoid f(typename conditional<std::is_fundamental<T>::value, T, const T&>::type t){\\n\\n}\\n\\nvoid Demo(){\\n    int a = 0;\\n    std::string str = \\"abc\\";\\n    f<int>(a);\\n    f<std::string>(str);\\n}\\n```\\n\\n#### \u8f85\u52a9\u5de5\u5177\\n\\n```cpp\\ntemplate <bool cond, typename T1, typename T2>\\nusing conditional_t = typename conditional<cond, T1, T2>::type;\\n\\ntemplate <typename T>\\nvoid f(conditional_t<std::is_fundamental<T>::value, T, const T&> t){\\n\\n}\\n```\\n\\n\\n\\n## \u6848\u4f8b\\n\\n### \u5b9e\u73b0\u4e00\u4e2a\u52a8\u6001\u7684get\\n\\n```cpp\\n// std::get\u8fd4\u56de\u503c\u7c7b\u578b\u5728\u7f16\u8bd1\u671f\u5c31\u662f\u786e\u5b9a\u7684\\nstd::tuple<int, std::string, float> tp = {1, \\"1\\", 1.0};\\nstd::cout << std::get<0>(tp);\\n\\n// \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u52a8\u6001\u7684get, \u6bd4\u5982get(tp, i)\\n```\\n\\n```cpp\\n\\n//\\n// Created by ChenhuiWang on 2024/4/11.\\n\\n// Copyright (c) 2024 Tencent. All rights reserved.\\n//\\n#include <tuple>\\n#include <string>\\n#include <iostream>\\n\\nstruct Base {\\n    virtual void f() const = 0;\\n};\\n\\nstruct D1 : public Base {\\n    void f() const override {\\n    }\\n};\\n\\nstruct D2 : public Base {\\n    void f() const override {\\n    }\\n};\\n\\ntemplate<typename... Args>\\nstd::enable_if_t<\\n        std::conjunction_v<\\n                std::is_base_of<Base, Args>...\\n                        >, void>\\nInvoke(const std::tuple<Args...> &tup, size_t index) {\\n\\n}\\n\\nint main() {\\n    std::tuple tu{D1(), D2(), D1()};\\n    Invoke(tu, 1);\\n}\\n\\n```\\n\\n\u7136\u800cInvoke\u51fd\u6570\u91ccindex\u662f\u8fd0\u884c\u671f\u53d8\u91cf\uff0c\u4e0d\u80fd\u4f7f\u7528`std::get<index>`\uff0c\u6240\u4ee5\u91c7\u7528**\u7f16\u8bd1\u671f\u5c55\u5f00**\u7684\u65b9\u5f0f\\n\\n```cpp\\nstruct Base {\\n    virtual void f() const = 0;\\n};\\n\\nstruct D1 : public Base {\\n    void f() const override {\\n        std::cout << \\"1\\\\n\\";\\n    }\\n};\\n\\nstruct D2 : public Base {\\n    void f() const override {\\n        std::cout << \\"2\\\\n\\";\\n    }\\n};\\n\\n\\ntemplate<int N, typename... Args>\\nvoid TryInvoke(const std::tuple<Args...>& tup, size_t index){\\n    if constexpr (N < sizeof...(Args)){\\n        if(index == N){\\n            std::get<N>(tup).f();\\n            return;\\n        }\\n\\n        TryInvoke<N + 1, Args...>(tup, index);\\n    }\\n}\\n\\ntemplate<typename... Args>\\nstd::enable_if_t<\\n        std::conjunction_v<\\n                std::is_base_of<Base, Args>...\\n                        >, void>\\nInvoke(const std::tuple<Args...> &tup, size_t index) {\\n    if(index >= sizeof...(Args)){\\n        return;\\n    }\\n    TryInvoke<0, Args...>(tup, index);\\n}\\n\\nint main() {\\n    std::tuple tu{D1(), D2(), D1()};\\n    Invoke(tu, 0);\\n    Invoke(tu, 1);\\n}\\n\\n```\\n\\n\u8fd9\u91cc\u7528\u5230\u4e86\u6a21\u7248\u5b9e\u4f8b\u5316\u7684\u9012\u5f52\uff0c\u5728\u7f16\u8bd1\u671f\u9012\u5f52\u751f\u6210\u591a\u4e2a\u6a21\u7248\u51fd\u6570\\n\\n### \u5b9e\u73b0\u4e00\u4e2astd::invoke\\n\\n```cpp\\ntemplate<typename T, typename... Args>\\nauto invoke(T&& obj, Args&&... args){\\n    return obj(std::forward<Args>(args)...);\\n}\\n\\nvoid f(int a){\\n    std::cout << a;\\n}\\n\\nint main(){\\n    invoke(f, 4);\\n}\\n```\\n\\n### \u5b9e\u73b0\u4e00\u4e2astd::apply\\n\\n```cpp\\ntemplate<typename T, typename... Args>\\nauto invoke(T&& obj, Args&&... args){\\n    return obj(std::forward<Args>(args)...);\\n}\\n\\ntemplate<typename T, typename Tup, size_t... Index>\\ndecltype(auto) my_apply(T&& obj, Tup&& tup){\\n    return invoke(obj, std::get<Index>(std::forward<Tup>(tup))...);\\n}\\n\\nvoid f(int a, int b){\\n    std::cout << a << \\" \\" << b;\\n}\\n\\nint main(){\\n    invoke(f, 4, 5);\\n    std::tuple<int, char>tup = {1, \'a\'};\\n    my_apply<void(*)(int, int),  std::tuple<int, char>, 0, 1>(f, std::move(tup));\\n}\\n```\\n\\n\u8c03\u7528\u592a\u5570\u55e6\u4e86\uff0c\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u81ea\u52a8\u751f\u6210\u4ece0\u5230N-1\u7684\u5e8f\u5217\\n\\n```cpp\\ntemplate<int N, int... Index>\\nstruct A : public A<N - 1, N - 1, Index...> {\\n\\n};\\n\\ntemplate<int... Index>\\nstruct A<0, Index...> {\\n    static void printIndex() {\\n        ((std::cout << Index << \\" \\"), ...);\\n    }\\n};\\n\\nint main() {\\n    A<5>::printIndex();\\n}\\n```\\n\\n```cpp\\ntemplate <size_t... Index>\\nstruct sequence {\\n    static void printIndex() {\\n        ((std::cout << Index << \\" \\"), ...) << std::endl;\\n\\n    }\\n};\\n\\ntemplate<size_t N, size_t... Index>\\nstruct make_sequence : make_sequence<N - 1, N - 1, Index...> {};\\n\\ntemplate <size_t... Index>\\nstruct make_sequence<0, Index...> {\\n    using result = sequence<Index...>;\\n};\\n\\ntemplate<typename T, typename... Args>\\nauto invoke(T&& obj, Args&&... args) {\\n    return obj(std::forward<Args>(args)...);\\n}\\n\\ntemplate<typename T, typename Tup, size_t... Index>\\nauto apply_impl(T&& obj, Tup&& tup, sequence<Index...>) {\\n    return invoke(std::forward<T>(obj), std::get<Index>(std::forward<Tup>(tup))...);\\n}\\n\\ntemplate<typename T, typename Tup>\\nauto my_apply(T&& obj, Tup&& tup) {\\n    make_sequence<std::tuple_size_v<std::decay_t<Tup>>>::result::printIndex();\\n    typename make_sequence<std::tuple_size_v<std::decay_t<Tup>>>::result res;\\n    return apply_impl(std::forward<T>(obj), std::forward<Tup>(tup), res);\\n}\\n\\nvoid f(int a, double b, char c) {\\n    std::cout << a << \\" \\" << b << \\" \\" << c ;\\n}\\n\\nint main() {\\n    std::tuple tu{1, 1.4, \'a\'};\\n    my_apply(f, tu);\\n    return 0;\\n}\\n```\\n\\n\\n\\n### \u5b9e\u73b0\u4e00\u4e2avariant\\n\\nstd::variant\u7528\u6cd5\\n\\n```cpp\\nstruct A{\\n    A() = default;\\n};\\nint main(){\\n    std::variant<A, int, char, std::string> var;\\n    var = 1;\\n    std::cout << var.index();\\n}\\n```\\n\\n\u53ef\u4ee5\u5b58\u653e\u591a\u79cd\u7c7b\u578b\u4f46\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u5b58\u653e\u4e00\u79cd\\n\\n```cpp\\ntemplate<typename T1, typename T2>\\nclass variant{\\npublic:\\n    variant(const T1& t1){\\n        data.t1 = t1;\\n    };\\n    variant(const T2& t2){\\n        data.t2 = t2;\\n    };\\n\\nprivate:\\n    union{\\n        T1 t1;\\n        T2 t2;\\n    }data;\\n    int index;\\n};\\n```\\n\\n\u5bf9\u4e8e\u4efb\u610f\u53c2\u6570\u7684variant\u65e0\u6cd5\u6620\u5c04\u5230union\u4e2d\\n\\n\u672c\u6765variant\u7684\u76ee\u7684\u5c31\u662f\u590d\u7528\u5185\u5b58\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7ba1\u7406\u4e00\u5757\u5185\u5b58\\n\\n```cpp\\ntemplate<typename... Ts>\\nclass variant{\\npublic:\\n    template<int Index, typename... Args>\\n    variant(Args&&... args){\\n\\n    }\\nprivate:\\n    void* data = std::malloc(std::max(sizeof(Ts)...));\\n    int index;\\n};\\n\\nint main(){\\n    variant<1, int> va; //\u65e0\u6cd5\u6b63\u786e\u5b9e\u4f8b\u5316\u6a21\u7248\u7c7b\u7684\u6a21\u7248\u6784\u9020\u51fd\u6570\\n}\\n```\\n\\n\u7136\u800c\u6a21\u7248\u7c7b\u7684\u6a21\u7248\u6784\u9020\u51fd\u6570\u662f\u4e0d\u80fd\u5b9e\u4f8b\u5316\u7684\uff0c\u56e0\u4e3a\u4f1a\u88ab\u8bc6\u522b\u6210\u7c7b\u6a21\u7248\u53c2\u6570\uff0c\u56e0\u6b64\u6784\u9020\u51fd\u6570\u53ea\u80fd\u4f9d\u8d56\u4e8e\u81ea\u52a8\u63a8\u5bfc\\n\\nIndex\u600e\u4e48\u63a8\u5bfc\u5462 ==> \u4f7f\u7528\u4e00\u4e2ain_place\u6a21\u7248\u7c7b\\n\\n```cpp\\ntemplate<size_t Index>\\nstruct in_place_index_t{\\n    explicit in_place_index_t() = default;\\n};\\n\\ntemplate<size_t Index>\\ninline constexpr in_place_index_t<Index> in_place_index{}\\n\\n\\ntemplate<typename... Ts>\\nclass variant{\\npublic:\\n    template<size_t Index, typename... Args>\\n    variant(const in_place_index_t<Index>& index, Args&&... args){\\n\\n    }\\nprivate:\\n    void* data = std::malloc(std::max(sizeof(Ts)...));\\n    int index;\\n};\\n\\nint main(){\\n    variant<int, char> var_int{in_place_index<0>(), 1};\\n    variant<int, char> var_char{in_place_index<1>(), \'a\'};\\n}\\n```\\n\\n\\n\\n\u5b9e\u73b0\u6784\u9020\u51fd\u6570\u9700\u8981\uff0cnew \u521b\u5efa\u76f8\u5e94\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5c31\u9700\u8981\u4ece\u9759\u6001\u7684\u6a21\u7248\u53c2\u6570size_t Index\u5230\u5177\u4f53\u7c7b\u578b\u7684\u5de5\u5177, \u989d\u5916\u5b9e\u73b0\u4e86\u4e00\u4e2aget\u65b9\u6cd5\\n\\n```cpp\\ntemplate<size_t Index, typename Head, typename... Types>\\nstruct get_type_by_index : get_type_by_index<Index - 1, Types...>{};\\n\\ntemplate<typename Head, typename... Types>\\nstruct get_type_by_index<0, Head, Types...>{\\n    using type = Head;\\n};\\n\\ntemplate<typename... Ts>\\nclass variant{\\npublic:\\n    template<size_t Index, typename... Args>\\n    variant(const in_place_index_t<Index>& index, Args&&... args){\\n        using data_type = std::decay_t<typename get_type_by_index<Index, Ts...>::type>;\\n        mData = new data_type(args...);\\n        mIndex = Index;\\n    }\\n\\n    int index() const {\\n        return index;\\n    }\\n\\n    template<size_t Index>\\n    auto get() const {\\n        using data_type = std::decay_t<typename get_type_by_index<Index, Ts...>::type>;\\n        return *static_cast<data_type*>(mData);\\n    }\\n\\nprivate:\\n    void* mData = std::malloc(std::max(sizeof(Ts)...));\\n    int mIndex;\\n};\\n```\\n\\n\u800c\u6790\u6784\u3001\u62f7\u8d1d\u6784\u9020\u3001\u62f7\u8d1d\u8d4b\u503c\u9700\u8981\u4ece\u8fd0\u884c\u65f6\u7684mIndex\u6210\u5458\u53d8\u91cf\u5230\u5177\u4f53\u7c7b\u578b\uff0c\u91c7\u7528**\u9759\u6001\u7a77\u4e3e\u6240\u6709\u53ef\u80fd\u60c5\u51b5**\u7684\u65b9\u5f0f\\n\\n```cpp\\ntemplate<typename... Ts>\\nclass variant {\\nprivate:\\n    template<typename Type>\\n    void destory_data() {\\n        delete static_cast<std::add_pointer_t<Type>>(mData);\\n\\t}\\n    \\n    template<typename Type>\\n    void create_data(const void* other_data){\\n        new(mData) Type(*static_cast<const Type*>(other_data));\\n    }\\n    \\npublic:\\n\\t~variant() {\\n        std::array<void (variant<Ts...>::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant<Ts...>::destory_data<Ts>...\\n        };\\n        if(mData != nullptr){\\n            (this->*destroy_functions.at(mIndex))();\\n        }\\n    }\\n    \\n    variant(const variant& other){\\n        std::array<void(variant::*)(const void*), sizeof...(Ts)> create_functions = {\\n              &variant::create_data<Ts>...\\n        };\\n        mIndex = other.mIndex;\\n        (this->*create_functions.at(mIndex))(other.mData);\\n    }\\n\\n    variant(variant&& other){\\n        mData = other.mData;\\n        mIndex = other.mIndex;\\n        other.mData = nullptr;\\n        other.mIndex = -1;\\n    }\\n\\n    variant& operator=(const variant& other){\\n        if(this == &other) return *this;\\n        // release data\\n        std::array<void (variant::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant::destory_data<Ts>...\\n        };\\n        (this->*destroy_functions.at(mIndex))();\\n\\n        // copy assignment\\n        std::array<void(variant::*)(const void*), sizeof...(Ts)> create_functions = {\\n                &variant::create_data<Ts>...\\n        };\\n        mIndex = other.mIndex;\\n        (this->*create_functions.at(mIndex))(other.mData);\\n\\n        return *this;\\n    }\\n\\n    variant& operator=(variant&& other){\\n        if(this == &other) return *this;\\n\\n        // release data\\n        std::array<void (variant::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant::destory_data<Ts>...\\n        };\\n        (this->*destroy_functions.at(mIndex))();\\n\\n        // move assignment\\n        mData = other.mData;\\n        mIndex = other.mIndex;\\n        other.mData = nullptr;\\n        other.mIndex = -1;\\n\\n        return *this;\\n    }\\n\\n}\\n```\\n\\n\\n\\n\u7136\u540e\u60f3\u5b9e\u73b0variant<int, char> var(1); \u800c\u4e0d\u901a\u8fc7in_place_index\u6765\u6784\u9020\uff0c\u8fdb\u800c\u53ef\u4ee5\u652f\u6301implicit\u8f6c\u5316\uff0c `variant<int, char> var = 1`\\n\\n\u9700\u8981\u4e00\u4e2a\u5de5\u5177\u4ecetype ==> index\\n\\n```cpp\\ntemplate <typename Target, typename Head, typename... Ts>\\nstruct get_index_from_types {\\n    constexpr static size_t value = get_index_from_types<Target, Ts...>::value + 1;\\n};\\n\\ntemplate <typename Target, typename... Ts>\\nstruct get_index_from_types<Target, Target, Ts...>{\\n    constexpr static size_t value = 0;\\n};\\n\\nstd::cout << get_index_from_types<Test1, int, char, std::string, Test1>::value;\\n\\ntemplate<typename T>\\n    variant(T&& t){\\n        constexpr size_t index = get_index_from_types<T, Ts...>::value;\\n        new(mData) T(std::forward<T>(t));\\n        mIndex = index;\\n}\\n\\ntemplate<typename Type>\\n    auto get() const {\\n        constexpr size_t index = get_index_from_types<Type, Ts...>::value;\\n        return get<index>();\\n    }\\n\\n```\\n\\n\u5b8c\u6574\u4ee3\u7801\\n\\n```cpp\\n//\\n// Created by ChenhuiWang on 2024/4/3.\\n\\n// Copyright (c) 2024 Tencent. All rights reserved.\\n//\\n#include <iostream>\\n#include <array>\\n\\n\\ntemplate<size_t Index>\\nstruct in_place_index_t {\\n    explicit in_place_index_t() = default;\\n};\\n\\ntemplate<size_t Index>\\ninline constexpr in_place_index_t<Index> in_place_index{};\\n\\ntemplate<size_t Index, typename Head, typename... Types>\\nstruct get_type_by_index : get_type_by_index<Index - 1, Types...> {\\n};\\n\\ntemplate<typename Head, typename... Types>\\nstruct get_type_by_index<0, Head, Types...> {\\n    using type = Head;\\n};\\n\\ntemplate <typename Target, typename Head, typename... Ts>\\nstruct get_index_from_types {\\n    constexpr static size_t value = get_index_from_types<Target, Ts...>::value + 1;\\n};\\n\\ntemplate <typename Target, typename... Ts>\\nstruct get_index_from_types<Target, Target, Ts...>{\\n    constexpr static size_t value = 0;\\n};\\n\\n\\n\\ntemplate<typename... Ts>\\nclass variant {\\npublic:\\n    template<size_t Index, typename... Args>\\n    variant(const in_place_index_t<Index> &index, Args &&... args) {\\n        using data_type = std::decay_t<typename get_type_by_index<Index, Ts...>::type>;\\n        new(mData) data_type(args...);\\n        mIndex = Index;\\n    }\\n\\n    template<typename T>\\n    variant(T&& t){\\n        constexpr size_t index = get_index_from_types<T, Ts...>::value;\\n        new(mData) T(std::forward<T>(t));\\n        mIndex = index;\\n    }\\n\\n    ~variant() {\\n        std::array<void (variant::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant::destory_data<Ts>...\\n        };\\n        if(mData != nullptr){\\n            (this->*destroy_functions.at(mIndex))();\\n        }\\n    }\\n\\n    variant(const variant& other){\\n        std::array<void(variant::*)(const void*), sizeof...(Ts)> create_functions = {\\n              &variant::create_data<Ts>...\\n        };\\n        mIndex = other.mIndex;\\n        (this->*create_functions.at(mIndex))(other.mData);\\n    }\\n\\n    variant(variant&& other){\\n        mData = other.mData;\\n        mIndex = other.mIndex;\\n        other.mData = nullptr;\\n        other.mIndex = -1;\\n    }\\n\\n    variant& operator=(const variant& other){\\n        if(this == &other) return *this;\\n        // release data\\n        std::array<void (variant::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant::destory_data<Ts>...\\n        };\\n        (this->*destroy_functions.at(mIndex))();\\n\\n        // copy assignment\\n        std::array<void(variant::*)(const void*), sizeof...(Ts)> create_functions = {\\n                &variant::create_data<Ts>...\\n        };\\n        mIndex = other.mIndex;\\n        (this->*create_functions.at(mIndex))(other.mData);\\n\\n        return *this;\\n    }\\n\\n    variant& operator=(variant&& other){\\n        if(this == &other) return *this;\\n\\n        // release data\\n        std::array<void (variant::*)(), sizeof...(Ts)> destroy_functions = {\\n                &variant::destory_data<Ts>...\\n        };\\n        (this->*destroy_functions.at(mIndex))();\\n\\n        // move assignment\\n        mData = other.mData;\\n        mIndex = other.mIndex;\\n        other.mData = nullptr;\\n        other.mIndex = -1;\\n\\n        return *this;\\n    }\\n\\n    int index() const {\\n        return index;\\n    }\\n\\n    template<size_t Index>\\n    auto get() const {\\n        assert(Index == mIndex);\\n        using data_type = std::decay_t<typename get_type_by_index<Index, Ts...>::type>;\\n        return *static_cast<data_type *>(mData);\\n    }\\n\\n    template<typename Type>\\n    auto get() const {\\n        constexpr size_t index = get_index_from_types<Type, Ts...>::value;\\n        return get<index>();\\n    }\\n\\nprivate:\\n    void *mData = std::malloc(std::max(sizeof(Ts)...));\\n    int mIndex;\\n\\n    template<typename Type>\\n    void destory_data() {\\n        delete static_cast<Type*>(mData);\\n    }\\n\\n\\n    template<typename Type>\\n    void create_data(const void* other_data){\\n        new(mData) Type(*static_cast<const Type*>(other_data));\\n    }\\n};\\n\\n\\nstruct Test1{\\n    ~Test1(){\\n        std::cout << \\"~Test1()\\" << std::endl;\\n    }\\n};\\nstruct Test2{\\n    ~Test2(){\\n        std::cout << \\"~Test2()\\" << std::endl;\\n    }\\n};\\n\\nint main() {\\n    variant<Test1, Test2> var1(in_place_index<0>);\\n//    variant<Test1, Test2> var2(var1);\\n//\\n//    std::variant<short, int> v = 1;\\n//    std::cout << v.index();\\n//    std::cout << get_index_from_types<int, int>::value;\\n//\\n//    std::cout << get_index_from_types<Test1, int, char, std::string, Test1>::value;\\n\\n    struct A{\\n        A(int m, char n) : m(m), n(n) {}\\n        int m;\\n        char n;\\n    };\\n\\n//    std::variant<int, A> v(A{1, \'c\'});\\n//    v = A{2, \'a\'};\\n\\n    variant<int, A> var3(A{1, \'c\'});\\n    var3 = A{2, \'a\'};\\n    std::cout << var3.get<A>().m;\\n    std::cout << var3.get<0>();\\n\\n    std::variant<int, char> a(std::in_place_index<0>, 3);\\n}\\n```"},{"id":"/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1","metadata":{"permalink":"/blog/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1.md","source":"@site/blog/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1.md","title":"\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001","description":"\u52a8\u6001\u591a\u6001","date":"2024-07-28T04:38:49.000Z","formattedDate":"July 28, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":4.845,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001","tags":["C++"]},"prevItem":{"title":"\u6a21\u7248\u5143\u5165\u95e8","permalink":"/blog/C++/\u6a21\u7248\u5143\u8303\u5f0f\u5165\u95e8/1"},"nextItem":{"title":"UE C++ Cookbook","permalink":"/blog/Unreal/UE_Cookbook/1"}},"content":"\x3c!--truncate--\x3e\\n## \u52a8\u6001\u591a\u6001\\n\u52a8\u6001\u591a\u6001\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u5b9e\u73b0\u591a\u8d28\u53d8\u91cf\u7684\u5bb9\u5668\uff0c\u7136\u540e\u904d\u5386\u6267\u884c\u540c\u540d\u51fd\u6570\uff0c\u4ea7\u751f\u4e0d\u540c\u6548\u679c\u3002\\n\u7f3a\u70b9\u663e\u7136\u5c31\u662fvptr\u7684\u5bfb\u5740\u5f00\u9500\\n```cpp\\nnamespace VirtualFunction {\\n    struct IShape {\\n        virtual ~IShape() = default;\\n\\n        virtual float Area() = 0;\\n    };\\n\\n    struct Circle : public IShape {\\n        float r = 1;\\n\\n        float Area() override {\\n            return 3.14f * r * r;\\n        }\\n    };\\n\\n    struct Rect : public IShape {\\n        float a = 1, b = 1;\\n\\n        float Area() override {\\n            return a * b;\\n        }\\n    };\\n\\n    void f() {\\n        IShape *circle = new Circle();\\n        IShape *rect = new Rect();\\n        std::cout << circle->Area() << rect->Area();\\n        delete circle;\\n        delete rect;\\n    }\\n}\\n```\\n\\n## \u9759\u6001\u591a\u6001\\n### \u6a21\u7248\u51fd\u6570\\n\u7528\u6a21\u7248\u51fd\u6570\uff0c\u628a\u62bd\u8c61\u7c7b\u4f5c\u4e3a\u6a21\u7248\u53c2\u6570\u4f20\u5165\uff0c\u7136\u540e\u6267\u884c\uff0c\u867d\u7136\u8868\u8fbe\u4e0a\u80fd\u4f53\u73b0\u591a\u6001\u6027\uff0c\\n\u4f46\u662f\u5355\u7eaf\u8fd9\u6837\u4f3c\u4e4e\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u3002\u6bd5\u7adf\u5728\u4f7f\u7528\u591a\u6001\u65f6\uff0c\u4e0d\u4f1a\u4e00\u4e2a\u4e2a\u624b\u52a8\u7684\u53bb\u521b\u5efa\u5bf9\u8c61\u6267\u884c\u51fd\u6570\u3002\\n\\n\u56e0\u6b64\u4f18\u70b9\u662f\u7f16\u8bd1\u5668\u591a\u6001\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u989d\u5916\u5f00\u9500\uff1b\u7f3a\u70b9\u662f\u505a\u4e0d\u5230\u201c\u591a\u8d28\u53d8\u91cf\u5bb9\u5668\u904d\u5386\u201d\u3010\u9664\u975e\u901a\u8fc7variant\uff0c\u540e\u6587\u4f1a\u8bb2\u3011\\n```cpp\\nnamespace NormalTemplate {\\n    struct Circle {\\n        float r = 1;\\n        float Area() const { return 3.14f * r * r; }\\n    };\\n\\n    struct Rect {\\n        float a = 1, b = 1;\\n        float Area() const { return a * b; }\\n    };\\n\\n    template<typename Shape>\\n    float Area(const Shape &shape) {\\n        return shape.Area();\\n    }\\n\\n    void f(){\\n        Circle circle;\\n        Rect rect;\\n        std::cout << Area(circle) << Area(rect);\\n    }\\n}\\n```\\n\\n### CRTP\\n\u666e\u901a\u7684\u6a21\u7248\u51fd\u6570\u7684\u5b9e\u73b0\u80fd\u8868\u8fbe\u591a\u6001\u8bed\u4e49\uff0c\u4f46\u662f\u5b58\u5728\u6ca1\u6709\u66f4\u591a\u7684\u5408\u7406\u6027\uff1b\\n\u800cCRTP\u9664\u4e86\u80fd\u8868\u8fbe\u591a\u6001\u8bed\u4e49\uff08is-a\uff09\uff0c\u5728\u672c\u8d28\u4e0a\u5b83\u662f\u4e00\u79cdhas-ability\u7684\u8bed\u4e49. \\n\\nis-a\u5c31\u662f\u719f\u77e5\u7684\u7ee7\u627f\u5173\u7cfb\uff0cCircle\u7ee7\u627f\u81eaShape\uff0c\u81ea\u7136\u6709Shape\u8ba1\u7b97Area\u7684\u529f\u80fd\uff1b\\n\u800c\u591a\u4e2aCRTP Derived\u7c7b\u8868\u8fbe\u7684\u662f\u8fd9\u4e9b\u7c7b\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u7684\u80fd\u529b\uff0c\u8fd9\u4e2a\u80fd\u529b\u4e0d\u662f\u4eceBase\u90a3\u8fb9\u7ee7\u627f\u8fc7\u6765\u7684\uff08\u867d\u7136\u597d\u50cf\u542c\u8d77\u6765\u548c\u591a\u6001\u8bed\u4e49\u4e5f\u5dee\u4e0d\u591a\uff09\u3002\\n\\n> \u5728\u5e94\u7528\u4e2d\uff0cCRTP\u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u7b80\u5316\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u5f02\u8d28\u5bb9\u5668\u904d\u5386\u3002\\n\\n\u6bd4\u5982\u6211\u6709\u5f88\u591a\u5361\u724c\uff0c\u90fd\u5e0c\u671b\u5b83\u6709\u590d\u5236\u81ea\u8eab\u5c5e\u6027\u7684\u80fd\u529b\\n```\\nstruct Card{}\\nstruct CardA : public Card{\\n    CardA Clone(){\\n        return CardA(*this);\\n    }\\n    int a;\\n}\\n\\nstruct CardB : public Card{\\n    CardB Clone(){\\n        return CardB(*this);\\n    }\\n    float b;\\n}\\n```\\n\u5982\u679c\u8fd9\u6837\u5199\uff0c\u6bcf\u591a\u4e00\u4e2a\u5361\u724c\u90fd\u8981\u91cd\u65b0\u5199\u4e00\u4e0bClone\u51fd\u6570\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7CRTP\uff0c\u8868\u8fbe\u5361\u724c\u62e5\u6709\u590d\u5236\u81ea\u8eab\u5230\u80fd\u529b\uff0c\u6765\u5b9e\u73b0**\u591a\u4e2a\u7c7b\u6709\u76f8\u4f3c\u51fd\u6570\u7684\u7b80\u5316\u5199\u6cd5**\\n```cpp\\ntemplate<typename Derived>\\n    struct Card {\\n        Derived Clone() {\\n            return Derived(*static_cast<Derived *>(this));\\n        };\\n    };\\n\\n    struct CardA : public Card<CardA> {\\n        int a = 1;\\n    };\\n\\n    struct CardB : public Card<CardA> {\\n        float b = 1;\\n    };\\n    \\n    void f(){\\n        CardA a;\\n        auto a1 = a.Clone();\\n    }\\n```\\n\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u5e38\u89c1\uff0c\u5404\u79cd\u5f00\u6e90\u9879\u76ee\u4e2d\u90fd\u6709\u51fa\u73b0\uff0c\u6bd4\u5982UE\u7684TCommands\\n\\n\u518d\u6765\u4e00\u4e2a\u4f53\u73b0CRTP\u591a\u6001\u8bed\u4e49\u7684\u4f8b\u5b50\\n```cpp\\nnamespace CRTP {\\n    template<typename Derived>\\n    struct IShape {\\n        float Area() {\\n            return dynamic_cast<Derived *>(this)->Area();\\n        }\\n    };\\n\\n    struct Circle : public IShape<Circle> {\\n        float r = 1;\\n\\n        float Area() {\\n            return 3.14f * r * r;\\n        }\\n    };\\n\\n    struct Rect : public IShape<Rect> {\\n        float a = 1, b = 1;\\n\\n        float Area() {\\n            return a * b;\\n        }\\n    };\\n\\n    void f() {\\n        Circle circle;\\n        Rect rect;\\n        std::cout << circle.Area() << rect.Area();\\n    }\\n}\\n```\\n\u540c\u6837\u7684\uff0c\u8fd9\u6837\u7684\u591a\u6001\u4e5f\u662f\u63d0\u4f9b\u4e0d\u4e86\u5f02\u8d28\u5bb9\u5668\u904d\u5386\\n\\n### \u7528Variant\u6539\u9020\u9759\u6001\u591a\u6001\\n\u901a\u8fc7Variant\uff0c\u5c31\u53ef\u4ee5\u5f3a\u884c\u8d4b\u4e88\u4e24\u79cd\u9759\u6001\u591a\u6001**\u5f02\u8d28\u5bb9\u5668\u904d\u5386**\uff0c \u867d\u7136\u597d\u50cf\u6ca1\u89c1\u54ea\u4e2a\u5f00\u6e90\u8f6f\u4ef6\u8fd9\u6837\u5199\u8fc7\u3002\\n```cpp\\nnamespace NormalVariant {\\n    struct Circle {\\n        float r = 1;\\n\\n        float Area() const {\\n            return 3.14f * r * r;\\n        }\\n    };\\n\\n    struct Rect {\\n        float a = 1, b = 1;\\n\\n        float Area() const {\\n            return a * b;\\n        }\\n    };\\n\\n    template<typename Shape>\\n    float Area(const Shape &shape) {\\n        return shape.Area();\\n    }\\n\\n    void f() {\\n        std::variant<Circle, Rect> shape;\\n        std::vector<std::variant<Circle, Rect>> ShapeList;\\n        for (const auto &item: ShapeList) {\\n            std::visit([](auto &&arg) {\\n                std::cout << Area(arg);\\n            }, item);\\n        }\\n    }\\n}\\n```\\n\u601d\u8003\u4e00\u4e0b\u8fd9\u6709\u4ec0\u4e48\u7f3a\u70b9\u5bfc\u81f4\u6ca1\u4ec0\u4e48\u4eba\u7528\uff08\u731c\u6d4b\uff09\\n1. variant\u4fdd\u5b58data\u6307\u9488\u548c\u989d\u5916\u7684\u4e00\u4e2aint Index\u6307\u793a\u5f53\u524d\u5b58\u50a8\u7684\u7c7b\u578b, \u5185\u5b58\u5f00\u9500\u66f4\u5927\\n2. visit\u5199\u6cd5\u8ba9\u4eba\u5206\u89e3\uff0c\u4eff\u51fd\u6570\u4e5f\u4e0d\u4fbf\u4e8edebug"},{"id":"/Unreal/UE_Cookbook/1","metadata":{"permalink":"/blog/Unreal/UE_Cookbook/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/UE_Cookbook/1.md","source":"@site/blog/Unreal/UE_Cookbook/1.md","title":"UE C++ Cookbook","description":"\u6253\u5370\u51fd\u6570","date":"2024-07-25T19:26:18.000Z","formattedDate":"July 25, 2024","tags":[{"label":"UE","permalink":"/blog/tags/ue"}],"readingTime":1.475,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"UE C++ Cookbook","tags":["UE"]},"prevItem":{"title":"\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001","permalink":"/blog/C++/\u52a8\u6001\u591a\u6001\u548c\u9759\u6001\u591a\u6001/1"},"nextItem":{"title":"Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3","permalink":"/blog/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1"}},"content":"\x3c!--truncate--\x3e\\n## \u6253\u5370\u51fd\u6570\\n```cpp\\n#pragma once\\n\\n#include \\"CoreMinimal.h\\"\\n\\nDECLARE_LOG_CATEGORY_EXTERN(MM, Log, All);\\n\\ninline DEFINE_LOG_CATEGORY(MM);\\n\\n\\n// FString\\ntemplate <typename T>\\nvoid TPrint(FString DataName, const T& Data)\\n{\\n\\tUE_LOG(MM, Log, TEXT(\\"%s : %s\\"), *DataName, *Data);\\n}\\n\\ntemplate <>\\ninline void TPrint<float>(FString DataName, const float& Data)\\n{\\n\\tUE_LOG(MM, Log, TEXT(\\"%s : %.3f\\"), *DataName, Data);\\n}\\n\\ntemplate <>\\ninline void TPrint<double>(FString DataName, const double& Data)\\n{\\n\\tUE_LOG(MM, Log, TEXT(\\"%s : %.3f\\"), *DataName, Data);\\n}\\n\\ntemplate <>\\ninline void TPrint<int>(FString DataName, const int& Data)\\n{\\n\\tUE_LOG(MM, Log, TEXT(\\"%s : %d\\"), *DataName, Data);\\n}\\n\\ntemplate <>\\ninline void TPrint<bool>(FString DataName, const bool& Data)\\n{\\n\\tUE_LOG(MM, Log, TEXT(\\"%s : %s\\"), *DataName, Data ? TEXT(\\"True\\") : TEXT(\\"False\\"));\\n}\\n\\n\\n#define MPrint(var) UE_LOG(MM, Log, TEXT(\\"%s\\"), *(var));\\n#define MMPrint(var) TPrint<std::decay_t<decltype(var)>>(TEXT(#var), var)\\n\\nstruct FSeparatorRAII\\n{\\n\\tFSeparatorRAII(const FString& InName)\\n\\t\\t: Name(InName)\\n\\t{\\n\\t\\tFString Sep = FString(TEXT(\\"---------\\")) + Name + FString(TEXT(\\"----------\\"));\\n\\t\\tMPrint(Sep);\\n\\t}\\n\\n\\t~FSeparatorRAII()\\n\\t{\\n\\t\\tMPrint(FString(L\\"---------\\") + Name + FString(L\\"----------\\"));\\n\\t}\\n\\n\\tFString Name;\\n};\\n\\n```\\n## FString\u3001FName\\n```cpp\\nvoid BlinkEditorModule::TestFString()\\n{\\n\\tFString Str(\\"aaa\\");\\n\\tFString WStr(TEXT(\\"Aaa\\"));\\n\\tMMPrint(WStr);\\n\\tMMPrint(Str.Len());\\n\\tMMPrint(WStr.Len());\\n\\tMMPrint(WStr == Str); // default: Ignore_Case\\n\\tMMPrint(WStr.Equals(Str)); // default: Case_Sensitive\\n\\n\\t// API\\n\\tFString S = L\\"www.google.com\\";\\n\\n\\t// Split\\n\\t{\\n\\t\\tFSeparatorRAII Sep(FString(L\\"Split\\"));\\n\\t\\tFString left, right;\\n\\t\\tS.Split(\\".\\", &left, &right);\\n\\t\\tMMPrint(left);\\n\\t\\tMMPrint(right);\\n\\t\\tS.Split(L\\".\\", &left, &right);\\n\\t\\tMMPrint(left);\\n\\t\\tMMPrint(right);\\n\\t}\\n\\n\\t// Append\\n\\t{\\n\\t\\tFSeparatorRAII Sep(FString(\\"Append\\"));\\n\\t\\tS.Append(L\\"?\u6211\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5e05\\");\\n\\t\\tMPrint(S);\\n\\t}\\n\\n\\t// SubString Methods\\n\\t{\\n\\t\\tFSeparatorRAII Sep(FString(\\"SubString Methods\\"));\\n\\t\\tint32 Idx;\\n\\n\\t\\tS.FindChar(\'?\', Idx);\\n\\t\\tMMPrint(Idx);\\n\\n\\t\\tMMPrint(S.Mid(Idx));\\n\\t\\tMMPrint(S.Mid(Idx, 3));\\n\\t\\tMMPrint(S.RightChop(Idx)); // \u53bb\u6389\u53f3\u4fa7n\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u5269\u4e0b\u7684\\n\\t\\tMMPrint(S.Right(Idx)); // \u8fd4\u56de\u53f3\u4fa7n\u4e2a\u5b57\u7b26\\n\\t\\tMMPrint(S.LeftChop(2)); // \u53bb\u6389\u53f3\u4fa7n\u4e2a\u5b57\u7b26\uff0c\u8fd4\u56de\u5269\u4e0b\u7684\\n\\t\\tMMPrint(S.Left(2)); // \u8fd4\u56de\u5de6\u4fa7n\u4e2a\u5b57\u7b26\\n\\t}\\n\\n\\t{\\n\\t\\tFSeparatorRAII Sep(FString(\\"FName\\"));\\n\\t\\tFName N1(FString(\\"yes\\"));\\n\\t\\tFName N2(FString(\\"Yes\\"));\\n\\t\\tMPrint(N1.ToString());\\n\\t\\tMPrint(N2.ToString());\\n\\t\\tMMPrint(N1 == N2);\\n\\t}\\n}\\n```"},{"id":"/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1","metadata":{"permalink":"/blog/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1.md","source":"@site/blog/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1.md","title":"Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3","description":"C++11","date":"2024-07-21T15:24:51.000Z","formattedDate":"July 21, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":0.225,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3","tags":["C++"]},"prevItem":{"title":"UE C++ Cookbook","permalink":"/blog/Unreal/UE_Cookbook/1"},"nextItem":{"title":"\u4eff\u51fd\u6570\u548cstd::function","permalink":"/blog/C++/\u4eff\u51fd\u6570/1"}},"content":"\x3c!--truncate--\x3e\\n## C++11\\n* \u4e3a\u4e86\u5b9e\u73b0\u79fb\u52a8\u590d\u5236\u800c\u63d0\u51fa\u7684\u53f3\u503c\u5f15\u7528\\n* lambda,std::bind\uff0cstd::function\\n\\n\\n\\n## C++17\\n* std::for_each\\n* \u7ed3\u6784\u5316\u7ed1\u5b9a auto& [a, b] = f() \u4f46\u8fd9\u4e2a\u5728ue4.26\u7528\u4e0d\u4e86\\n* std::string_view"},{"id":"/C++/\u4eff\u51fd\u6570/1","metadata":{"permalink":"/blog/C++/\u4eff\u51fd\u6570/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u4eff\u51fd\u6570/1.md","source":"@site/blog/C++/\u4eff\u51fd\u6570/1.md","title":"\u4eff\u51fd\u6570\u548cstd::function","description":"\u95ee\u9898\u5f15\u5165","date":"2024-07-21T15:24:51.000Z","formattedDate":"July 21, 2024","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":7.855,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4eff\u51fd\u6570\u548cstd::function","tags":["C++"]},"prevItem":{"title":"Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3","permalink":"/blog/C++/Modern Cpp\u65b0\u7279\u6027\u603b\u7ed3/1"},"nextItem":{"title":"Rewind Debugger","permalink":"/blog/Unreal/RewindDebugger/1"}},"content":"\x3c!--truncate--\x3e\\n## \u95ee\u9898\u5f15\u5165\\n\u5e38\u5e38\u7528\u5230\u5404\u79cd\u5f62\u5f0f\u7684\u4eff\u51fd\u6570\u8c03\u7528api\uff0cstl\u662f\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e9b\u51fd\u6570/\u7c7b\u7684\\n```cpp\\n// sort\uff0c for_each\u7684\u5b9e\u73b0\u662f\u600e\u6837\u7684\\nstd::sort(nums.begin(), nums.end(), [](int a, int b){return a > b;});\\n\\nstd::for_each(nums.begin(), nums.end(), [](int& item){});\\n\\n// \u9700\u8981\u5b9a\u4e49Vec3\u7684bool\u8fd0\u7b97\u548cstd::hash<Vec3>()(const Vec3&)\\nstd:: nordered_map<Vec3, int, std::hash<Vec3>, std::equal_to<Vec3>> mp; \\n\\n// \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u7684std::greater<int>\u53ef\u4ee5\u5199\u6210std::greater<>\\nstd::priority_queue<int, std::vector<int>, std::greater<int>> q; \\n\\n// \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u65e2\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7dVec3\u7684operator<, \u53c8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u91cd\u8f7d\u4e86operator()(Vec3, Vec3)\u7684cmp\u7c7b\uff0c \u4f46\u662f\u4e0d\u80fd\u628acmp\u5199\u6210lambda\\nstd::priority_queue<Vec3> q; \\n```\\n\u8fd8\u6709\u5c31\u662fstd::function\u662f\u600e\u4e48\u5bf9\u5404\u79cd\u5f62\u5f0f\u7684\u4eff\u51fd\u6570\u8fdb\u884c\u5c01\u88c5\u7684\uff0c\u53c8\u6709\u4ec0\u4e48\u4f18\u70b9\uff1fstd::bind\u662f\u5e72\u4ec0\u4e48\u7684\uff1f\\n\x3c!--truncate--\x3e\\n## c\u51fd\u6570\u6307\u9488\\n\u51fd\u6570\u6307\u9488\u7684\u58f0\u660e\u683c\u5f0f\\n`typedef void(*AttackFunc)(Hero&)`, \u661f\u53f7\u548c\u51fd\u6570\u540d\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u52a0\u62ec\u53f7\uff0c\u524d\u9762\u5199\u8fd4\u56de\u503c\uff0c\u540e\u9762\u5199\u53c2\u6570\u3002\\n\\n\u51fd\u6570\u4f5c\u4e3a\u4e00\u7b49\u516c\u6c11\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u7b56\u7565\u6a21\u5f0f\uff08Stragegy Pattern\uff09, \u4f7f\u5f97\u67d0\u4e2a\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u53ef\u63d2\u62d4\uff0c\u53ef\u5199\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u53ef\u5199\u8fdb\u914d\u7f6e\u6587\u4ef6\u7b49\u7b49\u3002\\n```cpp\\nstruct Hero{\\n    int hp = 10;\\n};\\n\\ntypedef void (*AttackFunc)(Hero&);\\n\\nvoid Tick(Hero& hero, AttackFunc func){\\n    func(hero);\\n}\\n\\nvoid AttackSword(Hero& hero){\\n    hero.hp -= 1;\\n}\\n\\nvoid AttackGun(Hero& hero){\\n    hero.hp -= 5;\\n}\\n\\n\\nint main(){\\n    Hero hero;\\n    Tick(hero, AttackGun);\\n    Tick(hero, AttackSword);\\n}\\n\\n```\\n\\n\u8fd9\u79cd\u65b9\u5f0f\u6709\u4e24\u4e2a\u7f3a\u70b9\uff1a\\n\\n* \u65e0\u6cd5\u4f20\u9012\u989d\u5916\u53c2\u6570\uff08\u6355\u83b7\u5c40\u90e8\u53d8\u91cf\uff09\\n* \u5f97\u58f0\u660e\u6210\u5168\u5c40\u51fd\u6570\uff0c\u65e0\u6cd5\u5c31\u5730\u5b9a\u4e49\\n\\nc\u8bed\u8a00\u901a\u8fc7void*\u7c7b\u578b\u64e6\u9664\u53ef\u4ee5\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\\n```cpp\\nvoid Tick(Hero& hero, AttackFunc func, int val){\\n    func(hero, &val);\\n}\\n\\nvoid AttackSword(Hero& hero, void* value){\\n    hero.hp -= *static_cast<int*>(value);\\n}\\n\\nvoid AttackGun(Hero& hero, void* value){\\n    hero.hp -= *static_cast<int*>(value) * 2;\\n}\\n\\n\\nint main(){\\n    Hero hero;\\n    int BaseDamage = 1;\\n    Tick(hero, AttackGun, BaseDamage);\\n    Tick(hero, AttackSword, BaseDamage);\\n}\\n```\\n\u5982\u679c\u9700\u8981\u6355\u83b7\u66f4\u591a\u7684\u5c40\u90e8\u53c2\u6570\u5c31\u5f97\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u628avoid*\u8f6c\u578b\u6210\u7ed3\u6784\u4f53\u6307\u9488\\n\\n\\n## \u4eff\u51fd\u6570\u548clambda\\n\u9996\u5148\u6211\u4eec\u77e5\u9053functor\u548clambda\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u7528[cppinsight](https://cppinsights.io/)\u53ef\u4ee5\u770b\u5230\u7f16\u8bd1\u5668\u80cc\u540e\u751f\u6210\u7684\u4ee3\u7801\uff08\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7528\u6765\u8c03\u8bd5\u6a21\u677f\u5143\uff0c\u795e\u5668\uff01\uff09\\n\u4eff\u51fd\u6570\u91cd\u8f7doperator()\u662f\u5efa\u8bae\u52a0const\u7684\uff0c\u56e0\u4e3a\u8c03\u7528\u8005\u4e00\u822c\u559c\u6b22`const AttackFunc& func`\u8fd9\u79cd\u5f62\u5f0f\u4f20\u5165\uff0c\u53ea\u80fd\u6267\u884cconst\u65b9\u6cd5\u3002\\n\\n\\n\\n```cpp\\nstruct Hero{\\n    int hp = 10;\\n};\\n\\nstruct AttackFunctorSword{\\n    void operator()(Hero& hero) const {\\n        hero.hp -= value; \\n    };\\n    int value = 1;\\n};\\n\\nstruct AttackFunctorGun{\\n    void operator()(Hero& hero) const{\\n        hero.hp -= value;\\n    };\\n    int value = 1;\\n};\\n\\ntemplate <typename AttackFunc>\\nvoid Tick(Hero& hero, const AttackFunc& func){\\n    func(hero);\\n}\\n\\n\\nint main(){\\n    Hero hero;\\n    int BaseDamage = 1;\\n    \\n    AttackFunctorGun gunFunctor; \\n    gunFunctor.value = BaseDamage;\\n\\n    AttackFunctorSword swordFunctor; \\n    swordFunctor.value = BaseDamage;\\n\\n    Tick(hero, gunFunctor);\\n    Tick(hero, swordFunctor);\\n}\\n\\n```\\n\\n\u5176\u5b9elambda\u91cc\u7684operator()\u4e5f\u662f\u9ed8\u8ba4\u52a0const\u7684, \u56e0\u6b64\u5bf9\u4e8e\u9700\u8981\u4fee\u6539\u53d8\u91cf\u503c\u7684\u60c5\u51b5\u6709\u4e24\u79cd\u5199\u6cd5\\n```cpp\\n// 1. \u5f15\u7528\u6355\u83b7\\nint a = 1;\\nauto f = [&a](){\\n    a = 2;\\n}\\n\\n// 2. mutable \uff0c mutable\u4f1a\u628a\u9ed8\u8ba4\u52a0\u7684const\u7ed9\u53bb\u6389\\nint a = 1;\\nauto f [a]() mutable {\\n    a = 2;\\n}\\n```\\n\\n## std::function\\n\u4eff\u51fd\u6570\u548c\u6a21\u677f\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u5f97\u7528\u6a21\u677f\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0strategy\u8fd9\u79cd\u9759\u6001\u591a\u6001\u3002\u800c\u6a21\u677f\u7684\u7f3a\u70b9\uff1a\\n1. \u4e0d\u80fd\u505a\u5230\u5934\u6587\u4ef6\u5206\u79bb\uff08\u5373\u4f7f\u5206\u79bb\u4e5f\u5f97\u663e\u793a\u5b9e\u4f8b\u5316\uff0c\u975e\u5e38\u6ef4\u9ebb\u70e6\uff09\\n2. \u6211\u6709n\u4e2a\u5177\u4f53\u7684AttackFunctor\u5c31\u9700\u8981\u7f16\u8bd1\u540e\u5b9e\u4f8b\u5316n\u6b21\uff0c\u5bfc\u81f4\u5185\u5b58\u5360\u7528\u589e\u52a0\\n\\n\u56e0\u6b64std::function\u6a2a\u7a7a\u51fa\u4e16\\n```cpp\\nvoid Tick(Hero& hero, const std::function<void(Hero&)>& func){\\n    func(hero);\\n}\\nint main(){\\n    Hero hero;\\n    int BaseDamage = 1;\\n\\n    std::function<void(Hero&)> GunFunc = [BaseDamage](Hero& h){\\n        h.hp -= BaseDamage * 2;\\n    };\\n    std::function<void(Hero&)> SwordFunc = [BaseDamage](Hero& h){\\n        h.hp -= BaseDamage;\\n    };\\n    Tick(hero, GunFunc);\\n    Tick(hero, SwordFunc);\\n}\\n```\\n\\n\u90a3\u4e48std::function\u662f\u600e\u4e48\u5b9e\u73b0\u53ef\u4ee5\u540c\u65f6warp functor\u3001lambda\u548c\u51fd\u6570\u6307\u9488\u7684\u5462 ==> \u7c7b\u578b\u64e6\u9664\\n\\n\u9996\u5148\u660e\u786e\u4e00\u4e0b\u9700\u8981\u652f\u6301\u7684\u529f\u80fd\\n```cpp\\nFunction<int(int)> function_1([](int x){ return x + 1;});\\nFunction<int(int)> function_2 = &FuncPtr;\\nint a = 1;\\nstd::cout << function(a) << function_2(a);\\n```\\n\\n\u5b9e\u73b0\u4e00\u4e2a\u521d\u7248\\n```cpp\\ntemplate<typename Ret, typename ... Args>\\nstruct Function<Ret(Args...)>{\\n\\n};\\n```\\n\u6a21\u677f\u53c2\u6570\u6709\u4e86\uff0c\u4f46\u662f\u600e\u4e48\u5b9e\u73b0\u4f20\u5165\u7684\u51fd\u6570\u53c2\u6570\u5462\uff0c\u8fd9\u4e2a\u51fd\u6570\u53c2\u6570\u9700\u8981\u540c\u65f6\u652f\u6301\u51fd\u6570\u6307\u9488\u548c\u5e26\u6709operator()\u7684\u7ed3\u6784\u4f53/lambda\u3002\u65e2\u7136\u8981\u628a\u8fd9\u4e09\u79cd\u4f20\u5165\u7c7b\u578bwarp\u8d77\u6765\uff0c\u81ea\u7136\u5c31\u8981\u6709\u4e2awarp\u7c7b, \u4e0b\u9762\u7684\u8fd9\u4e2aFuncBase\u5c31\u662fwarp\u7c7b\uff0c\u56e0\u4e3aWarp\u7c7b\u9700\u8981\u652f\u6301\u8c03\u7528\u4efb\u610f\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684operator(), \u6240\u4ee5\u5199\u5728Function\u5185\u90e8\uff0c\u53ef\u4ee5\u4f7f\u7528Function\u7684\u6a21\u677f\u53c2\u6570\\n```cpp\\ntemplate<typename Ret, typename ... Args>\\nstruct Function<Ret(Args...)>{\\n    template<typename F>\\n    struct FunctionBase{\\n        Ret Call(Args... args){\\n            return std::invoke(m_f, std::forward<Args>(args)...);\\n        }\\n        F m_f;\\n    };\\n\\n    std::shared_ptr<FunctionBase> m_f;\\n};\\n```\\n\u8fd9\u6837\u663e\u7136\u8fc7\u4e0d\u4e86\u7f16\u8bd1\uff0c\u56e0\u4e3aFunctionBase\u4f9d\u8d56\u4e8e\u6a21\u677f\u53c2\u6570F\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u53c2\u6570F\u64e6\u9664\u6389\\n```cpp\\ntemplate<typename Ret, typename ... Args>\\nstruct Function<Ret(Args...)>{\\n\\n    struct FunctionBase{\\n        virtual Ret Call(Args... args) = 0;\\n        virtual ~FunctionBase() = default;\\n    };\\n\\n    template<typename F>\\n    struct FunctionImpl : public FunctionBase {\\n        Ret Call(Args... args) override {\\n            return std::invoke(m_f, std::forward<Args>(args)...);\\n        }\\n        F m_f;\\n    };\\n\\n\\n    std::shared_ptr<FunctionBase> m_f;\\n};\\n```\\n\u901a\u8fc7\u4e00\u4e2a\u4e0d\u5e26\u6a21\u677f\u53c2\u6570\u7684\u57fa\u7c7b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u7684\u64e6\u9664\uff0c\u5b9a\u4e49\u51fa\u8fd9\u6837\u7684\u6210\u5458\u53d8\u91cf`std::shared_ptr<FunctionBase> m_f;`\\n\u6700\u540e\u8865\u5168\u62f7\u8d1d\u6784\u9020\\n```cpp\\ntemplate<typename Ret, typename ... Args>\\nstruct Function<Ret(Args...)>{\\n    struct FunctionBase{\\n        virtual Ret Call(Args... args) = 0;\\n        virtual ~FunctionBase() = default;\\n    };\\n\\n    template<typename F>\\n    struct FunctionImpl : public FunctionBase {\\n        FunctionImpl(F f)\\n            :m_f(std::move(f)){}\\n\\n        Ret Call(Args... args) override {\\n            return std::invoke(m_f, std::forward<Args>(args)...);\\n        }\\n        F m_f;\\n    };\\n\\n    Function() = default;\\n\\n    template<typename F>\\n    Function(F f)\\n        : m_base(std::make_shared<FunctionImpl<F>>(std::move(f)))\\n    {}\\n\\n    // Function operator= (const Function&) = delete;\\n    Ret operator()(Args... args) const {\\n        return m_base->Call(std::forward<Args>(args)...);\\n    }\\n    std::shared_ptr<FunctionBase> m_base;\\n};\\n```\\n## \u5728std::for_each\u4e2d\u770blambda\u548cstd::bind\\n### std::for_each\\n```cpp\\nstd::vector<int> vec= {1, 2, 3};\\nstd::for_each(vec.begin(), vec.end(), [](int& item) {\\n    item += 1;\\n});\\nstd::for_each(vec.begin(), vec.end(), [](int item) {\\n    std::cout << item;\\n});\\n```\\n\u6211\u4eec\u53d1\u73b0\u8fd9\u91cc\u7684lambda\u4e2d\u7684\u53c2\u6570\u65e2\u53ef\u4ee5int\u4e5f\u53ef\u4ee5int&\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462,\u70b9\u8fdb\u53bb\u770b\u5b9e\u73b0\\n![alt text](images/image.png)\\n\u53ef\u4ee5\u770b\u5230\u5c31\u662f\u666e\u901a\u7684\u6a21\u677f\u7c7b\uff0c\u91cc\u9762\u8c03\u7528`_Func(*_UFirst)`, _UFirst\u662f\u8fed\u4ee3\u5668\u7c7b\u578b\uff0c\u76f8\u5f53\u4e8e\u6307\u9488\uff0c\u90a3\u4e48`*_UFirst`\u5728\u8fd9\u91cc\u5c31\u662fint\uff0c\u76f8\u5f53\u4e8e\u7ed9_func(int)\u548c_func(int&)\u4f20\u53c2,\u524d\u8005\u4e0d\u4f1a\u4fee\u6539\u4f20\u5165\u7684\u53c2\u6570\uff0c\u540e\u8005\u4f1a\u4fee\u6539\u4f20\u5165\u7684\u53c2\u6570\uff0c\u81ea\u7136\u4e24\u79cd\u90fd\u53ef\u4ee5\u3002\\n\\n\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u770b\u51falambda\u7684\u4e00\u4e2a\u4f18\u52bf\uff0c\u4e0b\u9762\u4e24\u79cd\u7b2c\u4e00\u4e2a\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0c\u7b2c\u4e8c\u4e2a\u501f\u52a9\u6355\u83b7\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\\n```cpp\\nstd::for_each(vec.begin(), vec.end(), [](int& item, int inc) {\\n        item += inc;\\n});\\n\\nint inc;\\nstd::for_each(vec.begin(), vec.end(), [inc](int& item) {\\n        item += inc;\\n});\\n```\\n\\n### lambda\u548cstd::bind\\n\u5f53\u6211\u73b0\u5728\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u4ed6\u4eec\u90fd\u662f\u522b\u4eba\u5199\u7684\u4e0d\u80fd\u4fee\u6539\u5b9a\u4e49\uff0c\u6bd4\u5982\\n```cpp\\n// \u51fd\u65701\\nvoid Increment(int &val, int inc) {\\n    val += inc;\\n}\\n\\n// \u51fd\u65702\\nstd::for_each(_, _, OP);\\n```\\nOp\u7684\u53c2\u6570\u4e2a\u6570\u5c0f\u4e8eIncrement\u4e2a\u6570\u65f6\uff0c\u53ef\u4ee5\u7528lambda\u6216bind\u6765\u5b9e\u73b0\uff0clambda\u7684\u5b58\u5728\u8ba9bind\u6709\u70b9\u610f\u4e49\u4e0d\u5927\u4e86\\n```cpp\\nstd::vector<int> data = {1, 2, 3};\\nint inc = 5;\\n\\n    // std::bind\\n    auto my_inc = std::bind(Increment, inc, std::placeholders::_1);\\n    std::for_each(data.begin(), data.end(), my_inc);\\n\\n    // lambda\\n    std::for_each(data.begin(), data.end(), [inc](int& item) {\\n        Increment(item, inc);\\n    });\\n\\n// Op\u53c2\u6570\u5927\u4e8eIncrement\\n```"},{"id":"/Unreal/RewindDebugger/1","metadata":{"permalink":"/blog/Unreal/RewindDebugger/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/RewindDebugger/1.md","source":"@site/blog/Unreal/RewindDebugger/1.md","title":"Rewind Debugger","description":"Introduction","date":"2024-07-16T10:02:24.000Z","formattedDate":"July 16, 2024","tags":[{"label":"UE","permalink":"/blog/tags/ue"}],"readingTime":1.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Rewind Debugger","tags":["UE"]},"prevItem":{"title":"\u4eff\u51fd\u6570\u548cstd::function","permalink":"/blog/C++/\u4eff\u51fd\u6570/1"},"nextItem":{"title":"C++ \u89c4\u8303\uff08\u81ea\u7528\uff09","permalink":"/blog/C++/cpp\u89c4\u8303"}},"content":"\x3c!--truncate--\x3e\\n## Introduction\\nUE4\u91cc\u9762\u5b98\u65b9\u63d0\u4f9b\u7684animation debug\u7684\u5de5\u5177\\n* [\u547d\u4ee4\u884c\u5de5\u5177](https://docs.unrealengine.com/4.27/en-US/AnimatingObjects/SkeletalMeshAnimation/AnimationProductivityTipsAndTricks/)`ShowDebug ANIMATION`.\u5f00\u542f\u540e\uff0c\u4f1a\u5728PIE\u65f6\u5c4f\u5e55\u4e0a\u663e\u793a\u6587\u5b57\u6570\u636e\uff0c\u4e3b\u8981\u662f\u6bcf\u4e2aAnimNode\u7684\u6743\u91cd\\n\\n* [Animation Insights](https://docs.unrealengine.com/4.27/en-US/TestingAndOptimization/PerformanceAndProfiling/UnrealInsights/AnimationInsights/), \u53ef\u4ee5\u989d\u5916trace\u52a8\u753b\u76f8\u5173\u7684\u6570\u636e\u96c6\u6210\u5728Unreal Insight\u4e2d\\n\\n![alt text](images/image-6.png)\\nAnimation Insights\u9700\u8981\u5f00\u542f\u8fd9\u4e09\u4e2a\u63d2\u4ef6\uff0c\u4ed6\u8bb0\u5f55\u7684\u6570\u636e\u5305\u62ec\\n1. Notifies\\n![alt text](images/image.png)\\n\\n2. Curves\\n![alt text](images/image-1.png)\\n\\n3. Pose\\n![alt text](images/image-2.png)\\n\\n4. Graph\\n![alt text](images/image-3.png)\\n\\n5. Montage\\n![alt text](images/image-4.png)\\n\\n6. Blend Weights\\n![alt text](images/image-5.png)\\n\\n[UE5 Rewind Debugger](https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-rewind-debugger-in-unreal-engine)\u57fa\u4e8eAnimation Insight\u63d0\u4f9b\u4e86\u4e00\u5957\u65b0\u7684\u64cd\u4f5c\u754c\u9762\\n![alt text](images/debugdemo.gif)\\n\\n## Rewind Debugger\u754c\u9762\\n\\n![alt text](images/image-7.png)\\n1. \u63a7\u5236simulation\u7684\u5f00\u59cb\u3001\u6682\u505c\u4e0e\u7ed3\u675f\\n2. \u8bbe\u7f6erewind\u4f7f\u7528\u7684\u76f8\u673a\uff08\u9759\u7f6e\u3001\u8ddf\u968f\u67d0\u4e2aactor\u3001\u4f7f\u7528simulation\u7684camera\uff09\\n3. Object Outline\\n4. Playback Controls\\n5. Timeline\\n6. Rewind Debugger Details Pannel\\n\\n## UE Rewind Debugger\u6e90\u7801\u5206\u6790\\n\u4ee3\u7801\u4f4d\u7f6e\\n> /Engine/Plugins/Animation/GameplayInsights/Source/RewindDebugger\\n> \\n> /Engine/Source/Editor/RewindDebuggerInterface\\n\\n```cpp\\n// RewindDebuggerModule.h\\n// \u5165\u53e3\\nclass FRewindDebuggerModule : public IModuleInterface{\\n    TSharedPtr<SRewindDebugger> RewindDebuggerWidget;\\n    TSharedPtr<SRewindDebuggerDetails> RewindDebuggerDetailsWidget;\\n}\\n\\n// SRewindDebugger.h\\n// \u603b\u7684\u754c\u9762UI\\n\\n// SRewindDebuggerComponentTree.h\\n// \u5de6\u4fa7Object Outline\u7684UI\\n\\n// SRewindDebuggerTimelines.h\\n// Timelines\u7684UI\\n\\n// IRewindDebuggerTrackCreator.h\\nclass IRewindDebuggerTrackCreator : public IModularFeature{\\n    TShared<FRewindDebuggerTrack> CreateTrack(uint64 ObjectId) const {\\n        return CreateTrackInternal(ObjectId);\\n    }\\n\\n    // \u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab/Plugins/Animation/GameplayInsights/source/GameplayInsights\u4e2d\u7684\u4e00\u7cfb\u5217\u51fd\u6570\u91cd\u5199\\n    virtual TShared<FRewindDebuggerTrack> CreateTrackInternal(uint64 ObjectId) const;\\n}\\n\\n// RewindDebugger.h\\n// \u5904\u7406handles\uff0c\u6bd4\u5982\u62d6\u52a8timeline\u3001\u5f00\u59cb/\u7ed3\u675frecording\u3001\u83b7\u53d6\u8981\u8bb0\u5f55\u7684Actor\u7684components\\nclass FRewindDebugger : public IRewindDebugger{\\n\\n}\\n\\n\\n\\n```"},{"id":"/C++/cpp\u89c4\u8303","metadata":{"permalink":"/blog/C++/cpp\u89c4\u8303","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/cpp\u89c4\u8303.md","source":"@site/blog/C++/cpp\u89c4\u8303.md","title":"C++ \u89c4\u8303\uff08\u81ea\u7528\uff09","description":"\u547d\u540d","date":"2024-07-16T06:52:39.000Z","formattedDate":"July 16, 2024","tags":[{"label":"c++","permalink":"/blog/tags/c"}],"readingTime":11.09,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"C++ \u89c4\u8303\uff08\u81ea\u7528\uff09","tags":["c++"]},"prevItem":{"title":"Rewind Debugger","permalink":"/blog/Unreal/RewindDebugger/1"},"nextItem":{"title":"\u89e3\u6790UE\u7528\u4e8e\u521b\u5efa\u8d44\u6e90\u7684\u7c7b -- Factory","permalink":"/blog/Unreal/Factory"}},"content":"\x3c!--truncate--\x3e\\n## \u547d\u540d\\n\\n\u53c2\u8003nv physx \u6709\u90e8\u5206\u81ea\u5df1\u7684\u4fee\u6539\\n\\n* \u6587\u4ef6\u5939\u540d\u5168\u5c0f\u5199\uff08\u5c3d\u91cf\u5355\u4e2a\u8bcd\uff09\uff0c\u6587\u4ef6\u540d\u9996\u5b57\u6bcd\u5168\u5927\u5199\\n* \u7c7b\u540d\u3001\u7ed3\u6784\u4f53\u540d\u9996\u5b57\u6bcd\u5168\u5927\u5199\uff0c\u9047\u5230FEM\u3001MPM\u4e00\u7c7b\u7f29\u5199\u5168\u90e8\u5927\u5199\\n* \u51fd\u6570\u540d\u9996\u5b57\u6bcd\u5168\u5927\u5199\\n* \u5c40\u90e8\u53d8\u91cf\u9a7c\u5cf0\\n* \u7ed3\u6784\u4f53\u7684\u6210\u5458\u53d8\u91cf\u9a7c\u5cf0\\n* \u666e\u901a\u7c7b\u6210\u5458mShape\u3001mCudaContextManager\uff0c Static\u7c7b\u6210\u5458sShape\u3001sCudaContextManager\\n* \u8fc7\u4e8e\u7b80\u5355\u57fa\u7840\u7684\u7c7b\u6210\u5458\u53ef\u7528\u5355\u4e2a\u5b57\u6bcd\uff0c\u4f8b\u5982vec\u4e2d\u7684x,y,z\\n* namespace\u7eaf\u5927\u5199\\n\\n```cpp\\n// NvVec3.h\\nclass NvVec3{\\npublic:\\n  float x,y,z;\\n}\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n## .Clangformat\\n\\n\u6709\u90e8\u5206\u81ea\u5df1\u7684\u4fee\u6539\\n\\n```c++\\n# https://clang.llvm.org/docs/ClangFormatStyleOptions.html\\n# https://www.bbsmax.com/A/VGzlMjexJb/\\n\\n# \u8bed\u8a00: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto\\nLanguage: Cpp\\n\\nBasedOnStyle: LLVM\\n\\n# \u8bbf\u95ee\u8bf4\u660e\u7b26(public\u3001private\u7b49)\u7684\u504f\u79fb\\nAccessModifierOffset: -4\\n\\n# \u5de6\u62ec\u53f7(\u5de6\u5706\u62ec\u53f7\u3001\u5de6\u5c16\u62ec\u53f7\u3001\u5de6\u65b9\u62ec\u53f7)\u540e\u7684\u5bf9\u9f50: Align, DontAlign, AlwaysBreak(\u603b\u662f\u5728\u5de6\u62ec\u53f7\u540e\u6362\u884c)\\nAlignAfterOpenBracket: Align\\n\\n# \u8fde\u7eed\u8d4b\u503c\u65f6\uff0c\u5bf9\u9f50\u6240\u6709\u7b49\u53f7\\nAlignConsecutiveAssignments: true\\n\\n# \u8fde\u7eed\u58f0\u660e\u65f6\uff0c\u5bf9\u9f50\u6240\u6709\u58f0\u660e\u7684\u53d8\u91cf\u540d\\nAlignConsecutiveDeclarations: true\\n\\n# \u5bf9\u9f50\u8fde\u7eed\u4f4d\u57df\u5b57\u6bb5\u7684\u98ce\u683c\\n# AlignConsecutiveBitFields: AcrossEmptyLinesAndComments\\n\\n# \u5bf9\u9f50\u8fde\u7eed\u5b8f\u5b9a\u4e49\u7684\u98ce\u683c\\n# AlignConsecutiveMacros: Consecutive #clang-format 12\\n\\n# \u7528\u4e8e\u5728\u4f7f\u7528\u53cd\u659c\u6760\u6362\u884c\u4e2d\u5bf9\u9f50\u53cd\u659c\u6760\u7684\u9009\u9879\\nAlignEscapedNewlines: Left\\n\\n# \u6c34\u5e73\u5bf9\u9f50\u4e8c\u5143\u548c\u4e09\u5143\u8868\u8fbe\u5f0f\u7684\u64cd\u4f5c\u6570\\nAlignOperands: Align\\n\\n# \u5bf9\u9f50\u8fde\u7eed\u7684\u5c3e\u968f\u7684\u6ce8\u91ca\\nAlignTrailingComments: true\\n\\n# \u5982\u679c\u51fd\u6570\u8c03\u7528\u6216\u5e26\u62ec\u53f7\u7684\u521d\u59cb\u5316\u5217\u8868\u4e0d\u9002\u5408\u5168\u90e8\u5728\u4e00\u884c\u65f6\\n# \u5141\u8bb8\u5c06\u6240\u6709\u53c2\u6570\u653e\u5230\u4e0b\u4e00\u884c\uff0c\u5373\u4f7fBinPackArguments\u4e3afalse\\nAllowAllArgumentsOnNextLine: true\\n\\n# \u5141\u8bb8\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u53c2\u6570\u653e\u5728\u4e0b\u4e00\u884c\\nAllowAllConstructorInitializersOnNextLine: true\\n\\n# \u5141\u8bb8\u51fd\u6570\u58f0\u660e\u7684\u6240\u6709\u53c2\u6570\u5728\u653e\u5728\u4e0b\u4e00\u884c\\nAllowAllParametersOfDeclarationOnNextLine: true\\n\\n\\n# \u5141\u8bb8\u77ed\u7684\u5757\u653e\u5728\u540c\u4e00\u884c(Always \u603b\u662f\u5c06\u77ed\u5757\u5408\u5e76\u6210\u4e00\u884c\uff0cEmpty \u53ea\u5408\u5e76\u7a7a\u5757)\\nAllowShortBlocksOnASingleLine: Empty\\n\\n# \u5141\u8bb8\u77ed\u7684case\u6807\u7b7e\u653e\u5728\u540c\u4e00\u884c\\nAllowShortCaseLabelsOnASingleLine: true\\n\\n# \u5141\u8bb8\u77ed\u7684\u51fd\u6570\u653e\u5728\u540c\u4e00\u884c: None, InlineOnly(\u5b9a\u4e49\u5728\u7c7b\u4e2d), Empty(\u7a7a\u51fd\u6570), Inline(\u5b9a\u4e49\u5728\u7c7b\u4e2d\uff0c\u7a7a\u51fd\u6570), All\\nAllowShortFunctionsOnASingleLine: Inline\\n\\n# \u5141\u8bb8\u77ed\u7684if\u8bed\u53e5\u4fdd\u6301\u5728\u540c\u4e00\u884c\\nAllowShortIfStatementsOnASingleLine: false\\n\\n# \u5141\u8bb8\u77ed\u7684\u5faa\u73af\u4fdd\u6301\u5728\u540c\u4e00\u884c\\nAllowShortLoopsOnASingleLine: false\\n\\n# \u603b\u662f\u5728\u5b9a\u4e49\u8fd4\u56de\u7c7b\u578b\u540e\u6362\u884c(deprecated)\\nAlwaysBreakAfterDefinitionReturnType: None\\n\\n# \u603b\u662f\u5728\u8fd4\u56de\u7c7b\u578b\u540e\u6362\u884c: None, All, TopLevel(\u9876\u7ea7\u51fd\u6570\uff0c\u4e0d\u5305\u62ec\u5728\u7c7b\u4e2d\u7684\u51fd\u6570),\\n#   AllDefinitions(\u6240\u6709\u7684\u5b9a\u4e49\uff0c\u4e0d\u5305\u62ec\u58f0\u660e), TopLevelDefinitions(\u6240\u6709\u7684\u9876\u7ea7\u51fd\u6570\u7684\u5b9a\u4e49)\\n\\n# \u51fd\u6570\u58f0\u660e\u8fd4\u56de\u7c7b\u578b\u540e\u662f\u5426\u6362\u884c(None \u81ea\u52a8\uff0cAll\u5168\u90e8\uff0cTopLevel...)\\nAlwaysBreakAfterReturnType: None\\n\\n# \u603b\u662f\u5728\u591a\u884cstring\u5b57\u9762\u91cf\u524d\u6362\u884c\\nAlwaysBreakBeforeMultilineStrings: false\\n\\n# \u603b\u662f\u5728template\u58f0\u660e\u540e\u6362\u884c\\nAlwaysBreakTemplateDeclarations: false\\n\\n# false\u8868\u793a\u51fd\u6570\u5b9e\u53c2\u8981\u4e48\u90fd\u5728\u540c\u4e00\u884c\uff0c\u8981\u4e48\u90fd\u5404\u81ea\u4e00\u884c\\nBinPackArguments: false\\n\\n# false\u8868\u793a\u6240\u6709\u5f62\u53c2\u8981\u4e48\u90fd\u5728\u540c\u4e00\u884c\uff0c\u8981\u4e48\u90fd\u5404\u81ea\u4e00\u884c\\nBinPackParameters: true\\n\\n# \u5927\u62ec\u53f7\u6362\u884c\uff0c\u53ea\u6709\u5f53 BreakBeforeBraces \u8bbe\u7f6e\u4e3aCustom\u65f6\u624d\u6709\u6548\\nBraceWrapping:\\n  # case \u8bed\u53e5\u540e\u9762\\n  AfterCaseLabel: false\\n  # class\u5b9a\u4e49\u540e\u9762\\n  AfterClass: false\\n  # \u63a7\u5236\u8bed\u53e5\u540e\u9762\\n  AfterControlStatement: Never\\n  # enum\u5b9a\u4e49\u540e\u9762\\n  AfterEnum: false\\n  # \u51fd\u6570\u5b9a\u4e49\u540e\u9762\\n  AfterFunction: false\\n  # \u547d\u540d\u7a7a\u95f4\u5b9a\u4e49\u540e\u9762\\n  AfterNamespace: false\\n  # ObjC\u5b9a\u4e49\u540e\u9762\\n  AfterObjCDeclaration: false\\n  # struct\u5b9a\u4e49\u540e\u9762\\n  AfterStruct: false\\n  # union\u5b9a\u4e49\u540e\u9762\\n  AfterUnion: false\\n  # extern \u5bfc\u51fa\u5757\u540e\u9762\\n  AfterExternBlock: false\\n  # catch\u4e4b\u524d\\n  BeforeCatch: false\\n  # else\u4e4b\u524d\\n  BeforeElse: false\\n  # \u7f29\u8fdb\u5927\u62ec\u53f7(\u6574\u4e2a\u5927\u62ec\u53f7\u6846\u8d77\u6765\u7684\u90e8\u5206\u90fd\u7f29\u8fdb)\\n  IndentBraces: false\\n  # \u7a7a\u51fd\u6570\u7684\u5927\u62ec\u53f7\u662f\u5426\u53ef\u4ee5\u5728\u4e00\u884c\\n  SplitEmptyFunction: true\\n  # \u7a7a\u8bb0\u5f55\u4f53(struct/class/union)\u7684\u5927\u62ec\u53f7\u662f\u5426\u53ef\u4ee5\u5728\u4e00\u884c\\n  SplitEmptyRecord: true\\n  # \u7a7a\u540d\u5b57\u7a7a\u95f4\u7684\u5927\u62ec\u53f7\u662f\u5426\u53ef\u4ee5\u5728\u4e00\u884c\\n  SplitEmptyNamespace: true\\n\\n# \u5728\u4e8c\u5143\u8fd0\u7b97\u7b26\u524d\u6362\u884c: None(\u5728\u64cd\u4f5c\u7b26\u540e\u6362\u884c), NonAssignment(\u5728\u975e\u8d4b\u503c\u7684\u64cd\u4f5c\u7b26\u524d\u6362\u884c), All(\u5728\u64cd\u4f5c\u7b26\u524d\u6362\u884c)\\nBreakBeforeBinaryOperators: None\\n\\n# \u5728\u5927\u62ec\u53f7\u524d\u6362\u884c: Attach(\u59cb\u7ec8\u5c06\u5927\u62ec\u53f7\u9644\u52a0\u5230\u5468\u56f4\u7684\u4e0a\u4e0b\u6587), Linux(\u9664\u51fd\u6570\u3001\u547d\u540d\u7a7a\u95f4\u548c\u7c7b\u5b9a\u4e49\uff0c\u4e0eAttach\u7c7b\u4f3c),\\n#   Mozilla(\u9664\u679a\u4e3e\u3001\u51fd\u6570\u3001\u8bb0\u5f55\u5b9a\u4e49\uff0c\u4e0eAttach\u7c7b\u4f3c), Stroustrup(\u9664\u51fd\u6570\u5b9a\u4e49\u3001catch\u3001else\uff0c\u4e0eAttach\u7c7b\u4f3c),\\n#   Allman(\u603b\u662f\u5728\u5927\u62ec\u53f7\u524d\u6362\u884c), GNU(\u603b\u662f\u5728\u5927\u62ec\u53f7\u524d\u6362\u884c\uff0c\u5e76\u5bf9\u4e8e\u63a7\u5236\u8bed\u53e5\u7684\u5927\u62ec\u53f7\u589e\u52a0\u989d\u5916\u7684\u7f29\u8fdb), WebKit(\u5728\u51fd\u6570\u524d\u6362\u884c), Custom\\n#   \u6ce8\uff1a\u8fd9\u91cc\u8ba4\u4e3a\u8bed\u53e5\u5757\u4e5f\u5c5e\u4e8e\u51fd\u6570\\n\\n# \u5927\u62ec\u53f7\u7684\u6362\u884c\u89c4\u5219\\nBreakBeforeBraces: Custom\\n\\n# \u4e09\u5143\u8fd0\u7b97\u64cd\u4f5c\u7b26\u6362\u884c\u4f4d\u7f6e\uff08?\u548c: \u5728\u65b0\u884c\u8fd8\u662f\u5c3e\u90e8\uff09\\nBreakBeforeTernaryOperators: true\\n\\n# \u5728\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u7684\u9017\u53f7\u524d\u6362\u884c\\nBreakConstructorInitializersBeforeComma: false\\n\\n# \u8981\u4f7f\u7528\u7684\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5f0f\u6837\u5f0f\\nBreakConstructorInitializers: BeforeComma\\n\\n# \u6bcf\u884c\u5b57\u7b26\u7684\u9650\u5236\uff0c0\u8868\u793a\u6ca1\u6709\u9650\u5236\\nColumnLimit: 100\\n\\n# \u63cf\u8ff0\u5177\u6709\u7279\u6b8a\u610f\u4e49\u7684\u6ce8\u91ca\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5b83\u4e0d\u5e94\u8be5\u88ab\u5206\u5272\u4e3a\u591a\u884c\u6216\u4ee5\u5176\u5b83\u65b9\u5f0f\u6539\u53d8\\n# CommentPragmas: \'\'\\n\\n# \u5982\u679c\u4e3atrue\uff0c\u5219\u8fde\u7eed\u7684\u540d\u79f0\u7a7a\u95f4\u58f0\u660e\u5c06\u5728\u540c\u4e00\u884c\u4e0a\u3002\u5982\u679c\u4e3afalse\uff0c\u5219\u5728\u65b0\u884c\u4e0a\u58f0\u660e\u6bcf\u4e2a\u540d\u79f0\u7a7a\u95f4\u3002\\nCompactNamespaces: false\\n\\n# \u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u8981\u4e48\u90fd\u5728\u540c\u4e00\u884c\uff0c\u8981\u4e48\u90fd\u5404\u81ea\u4e00\u884c\\nConstructorInitializerAllOnOneLineOrOnePerLine: false\\n\\n# \u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u7684\u7f29\u8fdb\u5bbd\u5ea6\\nConstructorInitializerIndentWidth:  4\\n\\n# \u5ef6\u7eed\u7684\u884c\u7684\u7f29\u8fdb\u5bbd\u5ea6\\nContinuationIndentWidth: 4\\n\\n# \u53bb\u9664C++11\u7684\u5217\u8868\u521d\u59cb\u5316\u7684\u5927\u62ec\u53f7{\u540e\u548c}\u524d\u7684\u7a7a\u683c\\nCpp11BracedListStyle: true\\n\\n# \u7ee7\u627f\u6700\u5e38\u7528\u7684\u6307\u9488\u548c\u5f15\u7528\u7684\u5bf9\u9f50\u65b9\u5f0f\\nDerivePointerAlignment: false\\n\\n# \u5173\u95ed\u683c\u5f0f\u5316\\nDisableFormat: false\\n\\n# \u81ea\u52a8\u68c0\u6d4b\u51fd\u6570\u7684\u8c03\u7528\u548c\u5b9a\u4e49\u662f\u5426\u88ab\u683c\u5f0f\u4e3a\u6bcf\u884c\u4e00\u4e2a\u53c2\u6570(Experimental)\\nExperimentalAutoDetectBinPacking: false\\n\\n# \u5982\u679c\u4e3atrue\uff0c\u5219clang\u683c\u5f0f\u4f1a\u4e3a\u77ed\u540d\u79f0\u7a7a\u95f4\u6dfb\u52a0\u7f3a\u5c11\u7684\u540d\u79f0\u7a7a\u95f4\u7ed3\u5c3e\u6ce8\u91ca\uff0c\u5e76\u4fee\u590d\u65e0\u6548\u7684\u73b0\u6709\u540d\u79f0\u7ed3\u675f\u6ce8\u91ca\\nFixNamespaceComments: true\\n\\n# \u9700\u8981\u88ab\u89e3\u8bfb\u4e3aforeach\u5faa\u73af\u800c\u4e0d\u662f\u51fd\u6570\u8c03\u7528\u7684\u5b8f\\nForEachMacros:  [ foreach, Q_FOREACH, BOOST_FOREACH ]\\n\\n# \u5bf9#include\u8fdb\u884c\u6392\u5e8f\uff0c\u5339\u914d\u4e86\u67d0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684#include\u62e5\u6709\u5bf9\u5e94\u7684\u4f18\u5148\u7ea7\uff0c\u5339\u914d\u4e0d\u5230\u7684\u5219\u9ed8\u8ba4\u4f18\u5148\u7ea7\u4e3aINT_MAX(\u4f18\u5148\u7ea7\u8d8a\u5c0f\u6392\u5e8f\u8d8a\u9760\u524d)\uff0c\\n#   \u53ef\u4ee5\u5b9a\u4e49\u8d1f\u6570\u4f18\u5148\u7ea7\u4ece\u800c\u4fdd\u8bc1\u67d0\u4e9b#include\u6c38\u8fdc\u5728\u6700\u524d\u9762\\nIncludeCategories:\\n  - Regex:  \'^\\"(llvm|llvm-c|clang|clang-c)/\'\\n    Priority:   2\\n  - Regex:  \'^(<|\\"(gtest|isl|json)/)\'\\n    Priority:   3\\n  - Regex:  \'.*\'\\n    Priority:   1\\n\\n# \u7f29\u8fdbcase\u6807\u7b7e\\nIndentCaseLabels: false\\n\\n# \u8981\u4f7f\u7528\u7684\u9884\u5904\u7406\u5668\u6307\u4ee4\u7f29\u8fdb\u6837\u5f0f\\nIndentPPDirectives: AfterHash\\n\\n# \u7f29\u8fdb\u5bbd\u5ea6\\nIndentWidth: 4\\n\\n# \u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6362\u884c\u65f6\uff0c\u7f29\u8fdb\u51fd\u6570\u58f0\u660e\u6216\u51fd\u6570\u5b9a\u4e49\u7684\u51fd\u6570\u540d\\nIndentWrappedFunctionNames: false\\n\\n# \u4fdd\u7559\u5728\u5757\u5f00\u59cb\u5904\u7684\u7a7a\u884c\\nKeepEmptyLinesAtTheStartOfBlocks: true\\n\\n# \u5f00\u59cb\u4e00\u4e2a\u5757\u7684\u5b8f\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\\nMacroBlockBegin: \'\'\\n\\n# \u7ed3\u675f\u4e00\u4e2a\u5757\u7684\u5b8f\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\\nMacroBlockEnd: \'\'\\n\\n# \u8fde\u7eed\u7a7a\u884c\u7684\u6700\u5927\u6570\u91cf\\nMaxEmptyLinesToKeep: 10\\n\\n# \u547d\u540d\u7a7a\u95f4\u7684\u7f29\u8fdb: None, Inner(\u7f29\u8fdb\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u5185\u5bb9), All\\n# NamespaceIndentation: Inner\\n\\n# \u4f7f\u7528ObjC\u5757\u65f6\u7f29\u8fdb\u5bbd\u5ea6\\nObjCBlockIndentWidth: 4\\n\\n# \u5728ObjC\u7684@property\u540e\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c\\nObjCSpaceAfterProperty: false\\n\\n# \u5728ObjC\u7684protocol\u5217\u8868\u524d\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c\\nObjCSpaceBeforeProtocolList: true\\n\\n# \u5728call(\u540e\u5bf9\u51fd\u6570\u8c03\u7528\u6362\u884c\u7684penalty\\nPenaltyBreakBeforeFirstCallParameter: 2\\n\\n# \u5728\u4e00\u4e2a\u6ce8\u91ca\u4e2d\u5f15\u5165\u6362\u884c\u7684penalty\\nPenaltyBreakComment: 300\\n\\n# \u7b2c\u4e00\u6b21\u5728<<\u524d\u6362\u884c\u7684penalty\\nPenaltyBreakFirstLessLess:  120\\n\\n# \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4e2d\u5f15\u5165\u6362\u884c\u7684penalty\\nPenaltyBreakString: 1000\\n\\n# \u5bf9\u4e8e\u6bcf\u4e2a\u5728\u884c\u5b57\u7b26\u6570\u9650\u5236\u4e4b\u5916\u7684\u5b57\u7b26\u7684penalty\\nPenaltyExcessCharacter: 1000000\\n\\n# \u5bf9\u6bcf\u4e00\u4e2a\u7a7a\u683c\u7f29\u8fdb\u5b57\u7b26\u7684penalty(\u76f8\u5bf9\u4e8e\u524d\u5bfc\u7684\u975e\u7a7a\u683c\u5217\u8ba1\u7b97)\\n# PenaltyIndentedWhitespace: 0\\n\\n# \u5c06\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u653e\u5230\u5b83\u81ea\u5df1\u7684\u884c\u7684penalty\\nPenaltyReturnTypeOnItsOwnLine: 120\\n\\n# \u6307\u9488\u548c\u5f15\u7528\u7684\u5bf9\u9f50: Left, Right, Middle\\nPointerAlignment: Left\\n\\n# \u5141\u8bb8\u91cd\u65b0\u6392\u7248\u6ce8\u91ca\\nReflowComments: true\\n\\n# \u5141\u8bb8\u6392\u5e8f#include\\nSortIncludes: false\\n\\n# \u5141\u8bb8\u6392\u5e8f using \u58f0\u660e\u987a\u5e8f\\nSortUsingDeclarations: false\\n\\n# \u5728C\u98ce\u683c\u7c7b\u578b\u8f6c\u6362\u540e\u6dfb\u52a0\u7a7a\u683c\\nSpaceAfterCStyleCast: false\\n\\n# \u5728\u903b\u8f91\u975e\u64cd\u4f5c\u7b26(!)\u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\\nSpaceAfterLogicalNot: false\\n\\n# \u5728 template \u5173\u952e\u5b57\u540e\u63d2\u5165\u4e00\u4e2a\u7a7a\u683c\\nSpaceAfterTemplateKeyword: false\\n\\n# \u5b9a\u4e49\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5728\u6307\u9488\u9650\u5b9a\u7b26\u4e4b\u524d\u6216\u4e4b\u540e\u653e\u7f6e\u7a7a\u683c\\n# SpaceAroundPointerQualifiers: Before\\n\\n# \u5728\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e4b\u524d\u6dfb\u52a0\u7a7a\u683c\\nSpaceBeforeAssignmentOperators: true\\n\\n# \u5de6\u5706\u62ec\u53f7\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u683c: Never, ControlStatements, Always\\nSpaceBeforeParens: ControlStatements\\n\\n# \u7a7a\u683c\u5c06\u5728\u57fa\u4e8e\u8303\u56f4\u7684for\u5faa\u73af\u5192\u53f7\u4e4b\u524d\u88ab\u5220\u9664\\nSpaceBeforeRangeBasedForLoopColon: true\\n\\n# [ \u524d\u662f\u5426\u6dfb\u52a0\u7a7a\u683c\uff08\u6570\u7ec4\u540d\u548c[\u4e4b\u95f4\uff0cLambdas\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff09\\n# \u8fde\u7eed\u591a\u4e2a [ \u53ea\u8003\u8651\u7b2c\u4e00\u4e2a\uff08\u5d4c\u5957\u6570\u7ec4\uff0c\u591a\u7ef4\u6570\u7ec4\uff09\\nSpaceBeforeSquareBrackets: false\\n\\n# \u5728\u7a7a\u7684\u5706\u62ec\u53f7\u4e2d\u6dfb\u52a0\u7a7a\u683c\\nSpaceInEmptyParentheses: false\\n\\n# \u5728\u5c3e\u968f\u7684\u8bc4\u8bba\u524d\u6dfb\u52a0\u7684\u7a7a\u683c\u6570(\u53ea\u9002\u7528\u4e8e//)\\nSpacesBeforeTrailingComments: 3\\n\\n# \u5728\u5c16\u62ec\u53f7\u7684<\u540e\u548c>\u524d\u6dfb\u52a0\u7a7a\u683c\\nSpacesInAngles: false\\n\\n# \u5728\u5bb9\u5668(ObjC\u548cJavaScript\u7684\u6570\u7ec4\u548c\u5b57\u5178\u7b49)\u5b57\u9762\u91cf\u4e2d\u6dfb\u52a0\u7a7a\u683c\\nSpacesInContainerLiterals:  false\\n\\n# \u5728C\u98ce\u683c\u7c7b\u578b\u8f6c\u6362\u7684\u62ec\u53f7\u4e2d\u6dfb\u52a0\u7a7a\u683c\\nSpacesInCStyleCastParentheses: false\\n\\n# \u5982\u679c\u4e3atrue\uff0c\u5c06\u5728If/for/switch/while\u6761\u4ef6\u62ec\u53f7\u524d\u540e\u63d2\u5165\u7a7a\u683c\u3002\\nSpacesInConditionalStatement: false\\n\\n# \u5728\u5706\u62ec\u53f7\u7684(\u540e\u548c)\u524d\u6dfb\u52a0\u7a7a\u683c\\nSpacesInParentheses: false\\n\\n# \u5728\u65b9\u62ec\u53f7\u7684[\u540e\u548c]\u524d\u6dfb\u52a0\u7a7a\u683c\uff0clamda\u8868\u8fbe\u5f0f\u548c\u672a\u6307\u660e\u5927\u5c0f\u7684\u6570\u7ec4\u7684\u58f0\u660e\u4e0d\u53d7\u5f71\u54cd\\nSpacesInSquareBrackets: false\\n\\n# \u6807\u51c6: Cpp03, Cpp11, Auto\\nStandard: Cpp11\\n\\n# tab\u5bbd\u5ea6\\nTabWidth: 4\\n\\n# \u4f7f\u7528tab\u5b57\u7b26: Never, ForIndentation, ForContinuationAndIndentation, Always\\nUseTab: Never\\n```"},{"id":"/Unreal/Factory","metadata":{"permalink":"/blog/Unreal/Factory","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/Factory.md","source":"@site/blog/Unreal/Factory.md","title":"\u89e3\u6790UE\u7528\u4e8e\u521b\u5efa\u8d44\u6e90\u7684\u7c7b -- Factory","description":"https://easycomplex-tech.com/cnblog/Unreal/AssetEditor/UEAssetEditorDev-AssetTypeActions/","date":"2024-07-16T06:52:39.000Z","formattedDate":"July 16, 2024","tags":[{"label":"utils","permalink":"/blog/tags/utils"}],"readingTime":0.66,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u89e3\u6790UE\u7528\u4e8e\u521b\u5efa\u8d44\u6e90\u7684\u7c7b -- Factory","tags":["utils"]},"prevItem":{"title":"C++ \u89c4\u8303\uff08\u81ea\u7528\uff09","permalink":"/blog/C++/cpp\u89c4\u8303"},"nextItem":{"title":"Code Graph","permalink":"/blog/\u9879\u76ee/Code-Graph/CodeGraph"}},"content":"\x3c!--truncate--\x3e\\n\\nhttps://easycomplex-tech.com/cnblog/Unreal/AssetEditor/UEAssetEditorDev-AssetTypeActions/\\n\\nhttps://docs.unrealengine.com/4.27/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/Modules/\\n\\nhttps://forums.unrealengine.com/t/generated-body-vs-generated-uclass-body/322489\\n\\n\\n\\nhttps://www.youtube.com/watch?v=IaU2Hue-ApI\\n\\n## \u8def\u5f84\\n\\n` Source/Editor/UnrealEd/Classes/Factories`\u4e0b\u6709\u591a\u4e2aFactory\u7c7b\u7528\u4e8e\u521b\u5efa\u4e0d\u540c\u7684\u8d44\u6e90\uff0c\u6bd4\u5982BluePrintFactory\u3001CurveFactory\u3001FbxFactory\\n\\n\u57fa\u7c7bFactory\u8def\u5f84\u4e3a`Source/Editor/UnrealEd/Classes/Factories/Factory.h`\\n\\n\\n\\n## FbxFactory\\n\\n\u65ad\u70b9\u6253\u5728UFbxFactory::FactoryCreateFile\u5904\u8fdb\u884cdebug\uff0c\u8c03\u7528\u6808\u5982\u4e0b\\n\\n```c++\\nFImportFilesByPath::Run()\\n    ...\\n    // Files is location in Disk\uff0cDestinationPath is ue filesystem, here is /Game/MyContent\\n    UAssetToolsImpl::ImportAssets(Files, DestinationPath)\\n        FAssetImportParams Params\\n        ImportAssetsInternal(Files, DestinationPath, FilesAndDestinations, Params)\\n            TMap< FString, TArray<UFactory*> > ExtensionToFactoriesMap\\n            UFactory* Factory = Cast<UFactory>(getCurrentFactory)\\n            TArray<FString> FactoryExtensions\\n            // Important : GetSupportedFileExtensions ==> actually use Formats\\n            Factory->GetSupportedFileExtensions(FactoryExtensions);\\n            for(File : Files)  ExtensionToFactoriesMap.FindOrAdd(GetExtension(FileExtension))\\n            ...\\n            for(File : Files)\\n                // Important : FactoryCanImport\\n                if(!Factory->FactoryCanImport(File)) continue;\\n                // Important : SupportedClass\\n                UClass* ImportAssetType = Factory->SupportedClass;\\n                // Important : ResolveSupportedClass\\n                ImportAssetType = Factory->ResolveSupportedClass();\\n                Factory->ImportObject(ImportAssetType, Filename, ...);\\n                    UFactory::ImportObject();\\n                    // Important: FactoryCreateFile\\n                    UFbxFactory::FactoryCreateFile()\\n```\\n\\n![image-20240210143326729](Factory.assets/image-20240210143326729.png)"},{"id":"/\u9879\u76ee/Code-Graph/CodeGraph","metadata":{"permalink":"/blog/\u9879\u76ee/Code-Graph/CodeGraph","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u9879\u76ee/Code-Graph/CodeGraph.md","source":"@site/blog/\u9879\u76ee/Code-Graph/CodeGraph.md","title":"Code Graph","description":"Idea","date":"2024-07-16T06:52:39.000Z","formattedDate":"July 16, 2024","tags":[{"label":"utils","permalink":"/blog/tags/utils"}],"readingTime":0.795,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Code Graph","tags":["utils"]},"prevItem":{"title":"\u89e3\u6790UE\u7528\u4e8e\u521b\u5efa\u8d44\u6e90\u7684\u7c7b -- Factory","permalink":"/blog/Unreal/Factory"},"nextItem":{"title":"\u4f2a\u7269\u7406\u5b9e\u65f6\u5f39\u6027\u9aa8\u9abc","permalink":"/blog/\u9879\u76ee/Maya-Physion-Bone/PhysionBone"}},"content":"\x3c!--truncate--\x3e\\n## Idea\\n\\n\u5728\u5199\u7b14\u8bb0\u7684\u65f6\u5019\u5e38\u5e38\u9700\u8981\u7528ipad\u624b\u7ed8\u6216\u7ed8\u56fe\u8f6f\u4ef6\uff08drawio\uff09\u7ed8\u5236\u7b80\u5355\u7684\u56fe\u8868\uff0c\u4f8b\u5982\u7c7b\u56fe\u3002\\n\\n\u60f3\u6446\u8131ui\u64cd\u4f5c\uff0c\u901a\u8fc7\u4ee3\u7801\u76f4\u63a5\u751f\u6210\u8fd9\u4e9b\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u3002\\n\\n* \u65e0\u53cd\u5c04\u7248\u672c\uff0c\u91cd\u65b0\u7f16\u8bd1\u751f\u6210\\n\\n```cpp\\n// Call Stack Graph\\nvoid f1(){}\\n\\nvoid f2(){\\n  f1();\\n}\\nvoid f3(){\\n  f2();\\n}\\nvoid f4(){\\n  f3();\\n}\\nint main(){\\n  f4();\\n}\\n\\n// v0\\nHierarchyCallStack cs;\\ncs.Add(\\"main\\");\\ncs.In();\\ncs.Add(\\"f4()\\")\\ncs.In();\\ncs.Add(\\"f3()\\")\\ncs.In();\\ncs.Add(\\"f2()\\")\\ncs.In();\\ncs.Add(\\"f1()\\")\\ncs.Out();\\ncs.Out();\\ncs.Out();\\ncs.Out();\\n\\n// v1\\n// txt\\n// main in f4 in f3 in f2 in out out out out\\n\\n```\\n\\n* \u53cd\u5c04\u7248\u672c\uff08TODO\uff09\\n\\n\u9884\u671f\u6700\u7ec8\u8981\u80fd\u7ed8\u5236\u51fa\u8fd9\u6837\u7684\u56fe\\n\\n![image-20240209133255617](CodeGraph.assets/image-20240209133255617.png)\\n\\nMac Only is enough.\\n\\n## Reference\\n\\nbox2d\\n\\nECS-Template\\n\\n\\n\\n## Demo\\n\\n\u200b\\t![image-20240209133611469](CodeGraph.assets/image-20240209133611469.png)"},{"id":"/\u9879\u76ee/Maya-Physion-Bone/PhysionBone","metadata":{"permalink":"/blog/\u9879\u76ee/Maya-Physion-Bone/PhysionBone","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u9879\u76ee/Maya-Physion-Bone/PhysionBone.md","source":"@site/blog/\u9879\u76ee/Maya-Physion-Bone/PhysionBone.md","title":"\u4f2a\u7269\u7406\u5b9e\u65f6\u5f39\u6027\u9aa8\u9abc","description":"\u6982\u8981","date":"2024-07-16T06:52:39.000Z","formattedDate":"July 16, 2024","tags":[{"label":"graphics","permalink":"/blog/tags/graphics"}],"readingTime":1.37,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4f2a\u7269\u7406\u5b9e\u65f6\u5f39\u6027\u9aa8\u9abc","tags":["graphics"]},"prevItem":{"title":"Code Graph","permalink":"/blog/\u9879\u76ee/Code-Graph/CodeGraph"},"nextItem":{"title":"\u5168\u6d41\u7a0bPose Driver Deformer","permalink":"/blog/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer"}},"content":"\x3c!--truncate--\x3e\\n## \u6982\u8981\\n\\n\\n\\n## \u7b97\u6cd5\\n\\n**\u57fa\u672c\u90e8\u5206**\\n\\n\u4e00\u6839\u9aa8\u9abc\u94fe\uff0c\u5728\u6bcf\u4e00\u5e27\u90fd\u4f1a\u6709\u4e00\u4e2apose\uff0c\u5982\u679c\u6ca1\u6709key\u8fc7\u4e2d\u95f4pose\uff0c\u5e94\u5f53\u59cb\u7ec8\u4fdd\u6301\u521d\u59cbpose\u3002root joint\u5728\u79fb\u52a8\u65f6\uff08\u88ab\u7236\u9aa8\u9abc\u5e26\u52a8\uff09\u4f1a\u9a71\u52a8\u5176\u4ed6\u5b50\u9aa8\u9abc\u7684\u8fd0\u52a8\u3002\u9664\u4e86root joint\u5b8c\u5168\u7ef4\u6301\u81ea\u8eab\u7684pose\u5916\uff0c\u5176\u4ed6\u5b50joint\u8ba1\u7b97\u5f97\u5230\u7684position\u4e3a **\u4f2a\u7269\u7406\u8ba1\u7b97 \u548c \u539f\u672cPose\u7684\u63d2\u503c**,\u8ba1\u7b97\u5b8cposition\u540e\u518d\u8fdb\u884c**\u957f\u5ea6\u590d\u539f**\\n\\n\u4f2a\u7269\u7406\u8ba1\u7b97\u4f1a\u4f9d\u6b21\u8003\u8651\uff1a**\u60ef\u6027\u3001\u89d2\u8272root\u5728\u4e16\u754c\u4e2d\u7684\u79fb\u52a8\u548c\u65cb\u8f6c\u3001\u91cd\u529b**\u3002\u67d0joint\u7b2c$t+1$\u65f6\u523b\u7684position $x^{t+1}$\\n\\n1. \u60ef\u6027\u5f71\u54cd\uff1a\\n\\n    $v^t = \\\\frac{x^t - x^{t-1}}{dt}\\\\cdot(1-damping) \\\\\\\\ x^{t+1}=x^t + dt\\\\cdot v^t$\u200b\\n\\n2. \u89d2\u8272root\u5728\u4e16\u754c\u4e2d\u7684\u79fb\u52a8\u548c\u65cb\u8f6c\\n\\n   $x^{t+1} = x^t + moveVector \\\\cdot (1 - moveDamping) \\\\\\\\ x^{t+1} = x^t + (moveRotation \\\\cdot x^t - x^t) * rotateDamping $\\n\\n3. \u91cd\u529b\uff08\u5916\u529b\uff09\\n\\n\u200b\\t$x^{t+1} = x^{t} + force * dt$\\n\\n\u548cPose\u63d2\u503c \u4ee5\u53ca\u957f\u5ea6\u590d\u539f\\n\\n```cpp\\n// interpolate with pose\\nVec3 baseLocation =\\n      mLocations[parent_joint] + (mPoseLocations[i] - mPoseLocations[parent_joint]);\\nmLocations[i] +=\\n  (baseLocation - mLocations[i]) * (1.0 - pow(1.0 - CONFIG::stiffness, 1));\\n\\n// restore length\\ndouble length = (mPoseLocations[i] - mPoseLocations[parent_joint]).norm();\\n mLocations[i] =\\n      (mLocations[i] - mLocations[parent_joint]).normalized() * length + mLocations[parent_joint];\\n```\\n\\n\\n\\n## Maya\u5b9e\u73b0\\n\\n\\n\\n\\n\\n## UE\u5b9e\u73b0"},{"id":"/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer","metadata":{"permalink":"/blog/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer.md","source":"@site/blog/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer.md","title":"\u5168\u6d41\u7a0bPose Driver Deformer","description":"\u6982\u8981","date":"2024-07-16T06:52:39.000Z","formattedDate":"July 16, 2024","tags":[{"label":"graphics","permalink":"/blog/tags/graphics"}],"readingTime":15.415,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u5168\u6d41\u7a0bPose Driver Deformer","tags":["graphics"]},"prevItem":{"title":"\u4f2a\u7269\u7406\u5b9e\u65f6\u5f39\u6027\u9aa8\u9abc","permalink":"/blog/\u9879\u76ee/Maya-Physion-Bone/PhysionBone"},"nextItem":{"title":"Lyra\u6d45\u6790","permalink":"/blog/Unreal/Lyra\u6d45\u6790/1"}},"content":"\x3c!--truncate--\x3e\\r\\n## \u6982\u8981\\r\\n\\r\\n**\u6839\u636e\u4e3b\u9aa8\u9abc\u5f53\u524d\u65cb\u8f6c\u89d2\u548cTargets\u65cb\u8f6c\u89d2\uff0c\u63d2\u503c\u51faBlendshape\u6743\u91cd\u6216\u6b21\u7ea7\u9aa8\u9abcTransform**\\r\\n\\r\\n\\r\\n\\r\\n**\u4f7f\u7528RBF\u63d2\u503c\uff0c\u628aRm\uff08\u65cb\u8f6c\u7ef4\u5ea6\uff09 ==> Rn\uff08Target\u6570\u91cf\uff09, \u4f18\u70b9\uff1a\u5e73\u6ed1\u66f2\u7ebf\u3001\u53ef\u4ee5\u63a7\u5236\u6bcf\u4e2a\u63d2\u503c\u70b9\u7684\u5f71\u54cd\u8303\u56f4\uff0c\u65e2\u80fd\u505a\u5230\u5c40\u90e8\u5f71\u54cd\u4e5f\u80fd\u505a\u5230\u5168\u5c40\u5f71\u54cd**\\r\\n\\r\\n\\r\\n\\r\\n**\u5206\u89e3\u65cb\u8f6c\u4e3a\u8f74\u5411\uff08Twist\uff09\u548c\u975e\u8f74\u5411\uff08Orientation\uff09**\\r\\n\\r\\n\\r\\n\\r\\n## \u8c03\u7814\u6280\u672f\u65b9\u6848\\r\\n\\r\\n\u9488\u5bf9\u4e00\u4e2arig\uff0c\u5728\u65cb\u8f6c\u67d0\u4e9b\u9aa8\u9abc\u65f6\u4f1a\u5bfc\u81f4\u8499\u76aemesh\u51fa\u73b0\u4e0d\u81ea\u7136\u7684\u72b6\u51b5\uff08\u6bd4\u5982\u624b\u8098\u8f6c\u52a8\u5e26\u52a8\u808c\u8089\u3001\u5f2f\u8170\u5e26\u52a8\u8863\u670d\uff09\u3002\u6b64\u65f6\u5bf9mesh\u7684\u4fee\u6b63\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def\uff1a\\r\\n\\r\\n1. blendshape\uff1a\u521b\u5efa\u591a\u4e2atarget\uff0c\u6bcf\u4e2atarget\u6709\u4e00\u4e2a\u6743\u91cd\uff0c\u52a8\u753b\u5e08\u8c03\u6574\u8fd9\u4e9btarget\u7684\u6743\u91cd\u66f2\u7ebf\uff08key\u5e27 \u5e27\u95f4B-Spline\u63d2\u503c\uff09\u3002**\u7f3a\u70b9**\uff1a\u9700\u8981\u5b58\u50a8\u5f88\u591aMesh\u9876\u70b9\u4fe1\u606f\uff0c\u65e0\u8bba\u662f\u5185\u5b58\u8fd8\u662f\u8ba1\u7b97\u65f6\u95f4\u5f00\u9500\u90fd\u66f4\u5927\\r\\n2. \u6b21\u7ea7\u9aa8\u9abc\uff1a\u4e3a\u9700\u8981\u7684\u4e3b\u9aa8\u9abc\u6dfb\u52a0\u591a\u4e2a\u6b21\u7ea7\u9aa8\u9abc\uff0c\u5236\u4f5c\u52a8\u753b\u65f6\uff0ckey\u597d\u4e3b\u9aa8\u9abc\u4e4b\u540e\uff0c\u518dkey\u6b21\u7ea7\u9aa8\u9abc\u7684Transform\u3002\\r\\n\\r\\n\u8fd9\u4e24\u79cd\u7684\u5171\u540c\u70b9\u662f\uff1a\\r\\n\\r\\n1. \u4e3b\u9aa8\u9abc\u65cb\u8f6c\u9700\u8981\u8c03\u6574Mesh\uff0c\u9700\u8981\u52a8\u753b\u5e08\u53bb\u7f16\u8f91Mesh\u6216\u7f16\u8f91\u6b21\u7ea7\u9aa8\u9abc\u95f4\u63a5\u7f16\u8f91Mesh\u3002\\r\\n2. \u5728key\u7684\u52a8\u753b\u7684\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u7f16\u8f91Mesh\uff0c\u5bf9\u4e8e\u65b0\u7684\u52a8\u753b\u65e0\u6cd5\u590d\u7528\u3002\\r\\n\\r\\n\u5f15\u5165PSD\uff0c\u6839\u636e\u4e3b\u9aa8\u9abc\u65cb\u8f6c\u4f4d\u7f6e\uff0c\u63d2\u503c\u51fablendshape\u6743\u91cd\u6216\u6b21\u7ea7\u9aa8\u9abcTransform\u3002\u5728maya\u4e2d\u4f7f\u7528\u624b\u67c4\u62d6\u52a8\u65f6\u4e5f\u80fd\u770b\u5230\u8c03\u6574Mesh\u7684\u751f\u6548\uff0c\u5236\u4f5c\u52a8\u753b\u65f6\u53ea\u9700\u8981key\u4e3b\u9aa8\u9abc\u5173\u952e\u5e27\u5373\u53ef\u3002\\r\\n\\r\\n\\r\\n\\r\\n**\u65b9\u6848**\uff1a \u5728\u6e38\u620f\u6d41\u6c34\u7ebf\u4e2d\u5f15\u5165\u57fa\u4e8e\u9aa8\u9abc\u7684PSD\u6d41\u7a0b\uff0c\u6253\u901a Maya/MotionBuilder/Unreal/Max\\r\\n\\r\\n**Reference**:\\r\\n1.  J.P.Lewis.  Pose Space Deformation: A Unified Approach to Shape Interpolation and Skeleton-Driven Deformation, http://scribblethink.org/Work/PSD/PSD.pdf\\r\\n2.   EigenSkin: Real Time Large Deformation Character Skinning in Hardware(https://zhuanlan.zhihu.com/p/205192636)\\r\\n3.   Fast and Deep Facial Deformations: \\r\\n4.    Skin Deformation Methods for Interactive  Character Animation. 2017 \\r\\n Survey  for skinning deformation methods: \\r\\n\\r\\nChad. https://www.chadvernon.com/tags/maya/\\r\\n### UE PoseWrangle \\r\\nhttps://dev.epicgames.com/community/learning/tutorials/r04p/unreal-engine-authoring-secondary-animation-in-maya-and-unreal-with-pose-driver-connect\\r\\n\\r\\nhttps://www.unrealengine.com/marketplace/en-US/product/pose-driver-connect?sessionInvalidated=true\\r\\n\\r\\n\\r\\n\\r\\n* \u5982\u679c\u5f53\u524d\u662fpsd\u8bbe\u7f6e\u4e3atwist\uff0c\u4f46\u662f\u6709pose\u662fswing\u5f97\u5230\u7684\uff0c\u4f1a\u76f4\u63a5\u62a5\u9519\\r\\n* \u5982\u679c\u6743\u91cd\u90fd\u4e3a0\uff0c \u5c31\u7528natrual pose\\r\\n## RBF Solver\\r\\n\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u63d2\u503c\uff0c\u6837\u672c\uff08\u4ee5\u4e0b\u79f0Samples\uff09\u4e3a$\\\\{X, Y = f(x)\\\\}$\\r\\n\\r\\n\u5176\u4e2d$X = ( x_1,...,x_n), x_i \\\\isin R^{d_1}, Y = (y1, ..., y_n), y_i \\\\isin R^{d_2}$, n\u4e3a\u6837\u672c\u4e2a\u6570\\r\\n\\r\\n* \u89e3\u7b97\u51fa$f(.)$\\r\\n\\r\\n* \u5bf9\u4e8e\u65b0\u8f93\u5165\u7684\u4e00\u4e2aQuery $q \\\\isin R^{d_1}$, \u8ba1\u7b97\u51fa  $f(q) \\\\isin R^{d_2}$\\r\\n\\r\\n\u5217\u4e3e\u51fa\u51e0\u79cd\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u53d6\u503c\\r\\n1. \u624b\u67c4\u62d6\u52a8\u4e2d\u95f4\u7684cube\u79fb\u52a8\uff0c\u79fb\u52a8\u5230\u56db\u5468\u7684\u6bcf\u4e2acube\u4e0a\u65f6\uff0c\u65cb\u8f6c\u89d2\u5e94\u5f53\u548c\u8be5\u5904cube\u76f8\u540c\uff0c$x_i$\u662f\u4e00\u4e2aposition(d1 = 3), $y_i$\u662f\u5bf9\u5e94\u4e8eSamples\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u6743\u91cd\uff08d2=n\uff09\\r\\n2. \u89d2\u8272\u52a8\u753b\u4e2d\uff0c\u62d6\u52a8\u4e00\u4e2a\u624b\u8098\u5173\u8282\u65cb\u8f6c\uff0c\u6b21\u7ea7\u9aa8\u9abc\u968f\u4e4b\u8fdb\u884c\u5e73\u79fb/\u65cb\u8f6c/\u7f29\u653e\uff0c$x_i$\u662f\u4e00\u4e2a\u624b\u8098\u5173\u8282\u7684\u6b27\u62c9\u89d2(d1 = 3), $y_i$\u662f\u5bf9\u5e94\u4e8eSamples\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\uff08\u79f0\u4e3apose\uff09\u7684\u6743\u91cd\uff08d2=n\uff09\\r\\n\\r\\n![Alt text](images/image-8.png)\\r\\n![Alt text](images/image-9.png)\\r\\n\\r\\n\u53ef\u4ee5\u770b\u51fa \\r\\n1. **\u5728\u5e94\u7528\u4e2d\u4e00\u822c d2 == n**, \u5373\u6700\u7ec8\u6c42\u5230\u7684\u51fd\u6570\u503c\u4e3a\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u6743\u91cd\uff0c \u6bd4\u5982$x = x_i\u65f6\uff0c f(x_i) = [0, 0, ..., 1, 0, ..., 0]$\uff0c\u7b2ci\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4e3a0\\r\\n2. $f$ \u662f\u4e00\u4e2a\u628a $R^{d_1}$ \u6620\u5c04\u4e3a $R^{d_2}$\u7684\u51fd\u6570\uff0c \u56e0\u6b64\u53ef\u4ee5\u628a$f$\u770b\u6210\u4e00\u4e2a\u77e9\u9635\\r\\n\\r\\n$$\\r\\nA_{d2\\\\times d1} x_{d1 \\\\times 1} = y_{d2 \\\\times 1}\\r\\n\\\\\\\\\\r\\n\\\\begin{bmatrix}\\r\\nw11 & w12 & ... & w1d_1 \\\\\\\\\\r\\nw21 & w22 & ... & w2d_1 \\\\\\\\\\r\\n... & ... & ... & ... \\\\\\\\\\r\\nwd_{2}1 & wd_{2}22 & ... & wd_{2}d_1 \\\\\\\\\\r\\n\\\\end{bmatrix}\\r\\n\\\\cdot\\r\\n\\\\begin{bmatrix}\\r\\n x^1\\\\\\\\\\r\\n x^2\\\\\\\\\\r\\n ...\\\\\\\\\\r\\n x^{d1}   \\r\\n\\\\end{bmatrix}\\r\\n=\\r\\n\\\\begin{bmatrix}\\r\\n y^1\\\\\\\\\\r\\n y^2\\\\\\\\\\r\\n ...\\\\\\\\\\r\\n y^{d2}   \\r\\n\\\\end{bmatrix}\\r\\n$$\\r\\n\\r\\n**\u6c42\u89e3\u77e9\u9635A\u7684\u65b9\u6cd5\uff1a**\\r\\n\u6784\u5efa\u51fa\u5f85\u6c42\u89e3\u65b9\u7a0b\\r\\n\\r\\n$\\r\\nD{ij}=Distance(i, j) = ||x_i - x_j||$  (\u6216\u5176\u4ed6\u5ea6\u91cf\u8ddd\u79bb\u65b9\u5f0f)\\r\\n\\r\\n$$\\r\\n\\\\phi_{n\\\\times n} A_{n \\\\times d1} = Y_{n \\\\times d1}\\r\\n\\r\\n\\\\\\\\\\r\\n\\\\begin{bmatrix}\\r\\n\\\\phi(D_{11}) & \\\\phi(D_{12}) & ... & \\\\phi(D_{1n}) \\\\\\\\\\r\\n\\\\phi(D_{21}) & \\\\phi(D_{22}) & ... & \\\\phi(D_{2n}) \\\\\\\\\\r\\n... & ... & ... & ... \\\\\\\\\\r\\n\\\\phi(D_{n1}) & \\\\phi(D_{n2}) & ... & \\\\phi(D_{nn})\\\\\\\\\\r\\n\\\\end{bmatrix}\\r\\n\\\\cdot\\r\\n\\\\begin{bmatrix}\\r\\nw11 & w12 & ... & w1d_1 \\\\\\\\\\r\\nw21 & w22 & ... & w2d_1 \\\\\\\\\\r\\n... & ... & ... & ... \\\\\\\\\\r\\nwd_{2}1 & wd_{2}22 & ... & wd_{2}d_1 \\\\\\\\\\r\\n\\\\end{bmatrix}\\r\\n=\\r\\n\\\\begin{bmatrix}\\r\\n y^1_1 & y^1_2 &...  & y^1_{d1}\\\\\\\\\\r\\n y^2_1  & y^2_2 &...  & y^2_{d1}\\\\\\\\\\r\\n ... & ... &... &...\\\\\\\\\\r\\n y^{d2}_1   & y^{d2}_2 &...  & y^{d2}_{d1}\\r\\n\\\\end{bmatrix}\\r\\n$$\\r\\n\u6700\u540e\u7684\u4e00\u4e2a\u77e9\u9635\u4e2d\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\u70b9\uff08pose\uff09\u7684y\uff0c \u5f62\u5982[0, 0, ..., 1, 0, ..., 0], \u89e3\u8fd9\u4e2a\u65b9\u7a0b\u53ef\u4ee5\u5bf9A\u548cY\u77e9\u9635\u62c6\u5206\u6210\u5217\u5206\u522b\u6765\u6c42\\r\\n$$\\r\\n\\\\phi_{n\\\\times n} A1_{n \\\\times 1} = Y1_{n \\\\times 1} \\\\\\\\\\r\\n\\\\phi_{n\\\\times n} A2_{n \\\\times 1} = Y2_{n \\\\times 1} \\\\\\\\\\r\\n...\\\\\\\\\\r\\n\\\\phi_{n\\\\times n} An_{n \\\\times 1} = Yn_{n \\\\times 1} \\\\\\\\\\r\\n$$\\r\\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5f62\u5982Ax=b\uff0c A\u4e3anxn, x\u4e3anx1, b\u4e3anx1\u7684\u7ebf\u6027\u65b9\u7a0b\u7ec4, det(A)!=0\u65f6\u6709\u552f\u4e00\u89e3\uff0cMicchelli\u5b9a\u7406\u4fdd\u8bc1\u4e86\u9ad8\u65af\u6838\u65f6\uff0cdet(A)!=0\uff0c\u5176\u4ed6\u60c5\u51b5\u672a\u4fdd\u8bc1\u3010\u8fd9\u91cc\u4e0d\u786e\u5b9a\uff0c\u6ca1\u6709\u770b\u8fc7\u8bc1\u660e\u3011\uff0c\u56e0\u6b64\u518d\u89e3\u7b97\u7684\u65f6\u5019\u901a\u8fc7\\r\\n$$\\r\\nA^TAx=A^Tb\\r\\n$$\\r\\n\u8fd9\u91cc$A^TA$\u4e00\u5b9a\u662f\u5bf9\u79f0\u4e14\u6b63\u5b9a\u7684\uff0c\u518d\u4f7f\u7528Cholesky\u5206\u89e3\u8fdb\u884c\u89e3\u7b97\u3002\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## RBF SDK\u5b9e\u73b0\\r\\n1. \u4f20\u5165\u7684x(\u6837\u672c) \u548c KernalWidth\uff08Sigma\uff09\u662fradiance\u6b27\u62c9\u89d2,\\r\\n2. \u8ba1\u7b97\u8ddd\u79bb\u7684\u7ed3\u679c\u662fradiance\uff0c\u8ba1\u7b97\u8ddd\u79bb\u6709\u4e24\u79cd\\r\\n   1. \u6b27\u62c9\u89d2\u7684\u6b27\u6c0f\u8ddd\u79bb\\r\\n   2. \u56db\u5143\u6570\u7684\u7403\u9762\u89d2\\r\\n3. \u8ba1\u7b97phi(Distance(x)\uff0ckernalWidth), \u4f20\u5165\u7684kernalWidth\u548cdistance\u90fd\u662fradiance\u7684\\r\\n4. \u89e3\u7b97\\r\\n5. \u67e5\u8be2Query \u4f20\u5165radiance\u6b27\u62c9\u89d2\\r\\n\\r\\n\u603b\u7684\u6765\u8bf4\uff0c\u628aRBF SDK\u4f5c\u4e3a\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u8f93\u5165\u7684\u90fd\u662fRadiance\uff0c\u8f93\u51fa\u7684\u662f 0 ~ 1\u7684\u6743\u91cd\u5e8f\u5217\\r\\n\\r\\n### \u8ba1\u7b97\u8ddd\u79bb\\r\\n```cpp\\r\\ntemplate <typename value_t>\\r\\nstruct EuclideanDistMetric : public DistMetricBase<value_t>{\\r\\n    using vector_t = typename DistMetricBase<value_t>::vector_t;\\r\\n    value_t eval(const vector_t& A, const vector_t& B) override{\\r\\n        return (A - B).norm();\\r\\n    }\\r\\n};\\r\\n\\r\\n/// return arc distance in radiance\\r\\ntemplate <typename value_t>\\r\\nstruct ArcLengthMetric : public DistMetricBase<value_t>{\\r\\n    using vector_t = typename DistMetricBase<value_t>::vector_t;\\r\\n\\r\\n    vector_t Euler2Quaternion(value_t roll, value_t pitch, value_t yaw){\\r\\n        vector_t q(4);\\r\\n        value_t cy = cos(yaw * 0.5);\\r\\n        value_t sy = sin(yaw * 0.5);\\r\\n        value_t cp = cos(pitch * 0.5);\\r\\n        value_t sp = sin(pitch * 0.5);\\r\\n        value_t cr = cos(roll * 0.5);\\r\\n        value_t sr = sin(roll * 0.5);\\r\\n\\r\\n        value_t w = cr * cp * cy + sr * sp * sy;\\r\\n        value_t x = sr * cp * cy - cr * sp * sy;\\r\\n        value_t y = cr * sp * cy + sr * cp * sy;\\r\\n        value_t z = cr * cp * sy - sr * sp * cy;\\r\\n        q << x, y, z, w;\\r\\n        return q;\\r\\n    }\\r\\n\\r\\n    value_t eval(const vector_t& A, const vector_t& B) override{\\r\\n        // Euler to Quaternion\\r\\n        vector_t A_quat = Euler2Quaternion(A[0],\\r\\n                                  A[1] ,\\r\\n                                  A[2] );\\r\\n        vector_t B_quat = Euler2Quaternion(B[0] ,\\r\\n                                           B[1] ,\\r\\n                                           B[2] );\\r\\n        value_t dotValue = A_quat.dot(B_quat);\\r\\n        auto ret = acos(2.0 * dotValue * dotValue - 1.0) ;\\r\\n        return ret;\\r\\n    }\\r\\n};\\r\\n```\\r\\n### \u8ba1\u7b97phi\\r\\n```cpp\\r\\n/// Linear kernel: (sigma - d) / sigma  if 0 < d < sigma , equal 0 otherwise\\r\\ntemplate <typename value_t>\\r\\nstruct RBFLinear : public RBFKernelBase<value_t> {\\r\\n    explicit RBFLinear( value_t sigma) : mSigma(sigma){}\\r\\n\\r\\n\\r\\n    value_t eval(const value_t &dist) const override {\\r\\n        auto clamp = [](value_t left, value_t right, value_t x){\\r\\n            if(x < left) return left;\\r\\n            else if(x > right) return right;\\r\\n            else return x;\\r\\n        };\\r\\n        return (mSigma - clamp(0, mSigma, dist)) / mSigma;\\r\\n    }\\r\\n\\r\\nprotected:\\r\\n    value_t mSigma;\\r\\n};\\r\\n\\r\\n/// Exponential kernel: e^(-2 * d / sigma)\\r\\ntemplate <typename value_t>\\r\\nstruct RBFExponential : public RBFKernelBase<value_t> {\\r\\n    explicit RBFExponential(value_t sigma) : mSigma(sigma){}\\r\\n\\r\\n\\r\\n    value_t eval(const value_t &dist) const override {\\r\\n        return std::exp( -2  * dist / mSigma);\\r\\n    }\\r\\n\\r\\nprotected:\\r\\n    value_t mSigma;\\r\\n};\\r\\n\\r\\n/// Cubic:  max(1 - d^3 / (sigma^3), 0)\\r\\ntemplate <typename value_t>\\r\\nstruct RBFCubic : public RBFKernelBase<value_t>{\\r\\n    explicit RBFCubic(value_t sigma) : mSigma(sigma){}\\r\\n\\r\\n\\r\\n    value_t eval(const value_t &dist) const override {\\r\\n        auto value = dist / mSigma;\\r\\n        return std::max(1 - value * value * value, 0.0);\\r\\n    }\\r\\n\\r\\nprotected:\\r\\n    value_t mSigma;\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\n/// Gaussian kernel: e^(-d/(sigma*sigma))\\r\\ntemplate <typename value_t>\\r\\nstruct RBFGaussian : public RBFKernelBase<value_t>\\r\\n{\\r\\n    RBFGaussian( const value_t& sigma)\\r\\n        : mSigma( sigma )\\r\\n    {}\\r\\n\\r\\n\\r\\n    value_t\\r\\n    eval( const value_t& dist ) const\\r\\n    {\\r\\n        return std::exp( -dist / (mSigma * mSigma) );\\r\\n    }\\r\\n    \\r\\nprotected:\\r\\n    value_t mSigma;\\r\\n};\\r\\n```\\r\\n\u5927\u6982\u662f\u8fd9\u51e0\u4e2a\u51fd\u6570\\r\\n\\r\\n### AutoWidth\\r\\n\u6240\u6709\u7684pose\u8ba1\u7b97\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5728\u6c42\u5e73\u5747\u503c\u3002\\r\\n\\r\\n### \u8ba1\u7b97Phi\u77e9\u9635\\r\\n```cpp\\r\\ntemplate <typename value_t>\\r\\nvoid\\r\\nRBFSolverBase<value_t>::computeBasisMatrix( matrix_t& basisA ) const\\r\\n{\\r\\n    // A matrix of kernel weights\\r\\n    basisA.conservativeResize(mSamplesAdded, mSamplesAdded);\\r\\n    for (int col=0;col<mSamplesAdded;++col)\\r\\n        for (int row=0;row<mSamplesAdded;++row) {\\r\\n            value_t dist = mDistMetric->eval(mDataCoords[col], mDataCoords[row]);\\r\\n            basisA(row,col) = mKernels[col]->eval( dist );\\r\\n        }\\r\\n}\\r\\n```\\r\\n\\r\\n### \u89e3\u7ebf\u6027\u7cfb\u7edf\\r\\n```cpp\\r\\nmatrix_t basisA(mSamplesAdded, mSamplesAdded);\\r\\nthis->computeBasisMatrix( basisA );\\r\\n// Use Cholesky factorization\\r\\nmWeights.conservativeResize(mValueDim, mSamplesAdded);\\r\\n// Ax=b ==> A^T A x = A^T b\\r\\nEigen::LLT<matrix_t> solver( basisA.transpose() * basisA );\\r\\nfor (int row=0; row<mValueDim ; ++row) {\\r\\n    // for each row, b is basisA * [0, 0, .1, 0.., 0]^T = basisA.row(row)\\r\\n    mWeights.row(row) = solver.solve(basisA.row(row).transpose());\\r\\n}\\r\\n```\\r\\n\\r\\n## Maya Node \uff08\u9aa8\u9abc\u7248\uff09\\r\\n![Alt text](images/image-12.png)\\r\\n> \u6280\u672f\u7f8e\u672f\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u65e2\u9700\u8981swing\u4e5f\u9700\u8981twist\u7684\u9aa8\u9abc\uff0c\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u8fd9\u6837\u7684\u9aa8\u9abc\u7cfb\u7edf\uff0c\u5c31\u53ef\u4ee5\u5bf9\u4e24\u6839\u4e0d\u540c\u7684\u9aa8\u9abc\u7ed1\u5b9a\u4e24\u4e2apsd\u4e86\\r\\n```cpp\\r\\n- Swing Joint\\r\\n  - Twist\\r\\n    - {Twist Driven Joints}\\r\\n  - {Swing Driven Joints}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**\u4e4b\u524d\u7684\u65b9\u5f0f\uff1a\\r\\n\u901a\u8fc7xDecomposer\u6765\u6307\u5b9aOrient/Twist\uff0c \u5982\u679c\u662fTwist\u5c31\u628ajoint\u7684rotation\u5173\u4e8etwist axis\u7684\u65cb\u8f6c\u53bb\u6389\uff0c\u8f93\u51fa\u5230xSolver;\\r\\n\u6539\u4e3a\uff1a\\r\\n\u76f4\u63a5\u5728xSolver\u4e2d\u901a\u8fc7\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\u6765\u5b9e\u73b0\u3010\u662f\u5426\u8003\u8651twist\u3011**\\r\\n\\r\\n\u8865\u5145\u4e0a\u6587\u5173\u4e8e\u8ddd\u79bb\u8ba1\u7b97\u7684\u65b9\u6cd5\uff0c\u989d\u5916\u589e\u52a0\u4e24\u4e2a\uff1a\\r\\n1. TwistAngle: \u53ea\u8003\u8651Twist\\r\\n2. SwingAngle\uff1a\u53ea\u8003\u8651Swing\\r\\n\\r\\n\u8ba1\u7b97\u65b9\u6cd5\u4e2d\u6700\u6838\u5fc3\u7684\u90e8\u5206\u5728\u4e8e\uff0c\u8f93\u5165\u4e00\u4e2a\u56db\u5143\u6570q\u548c\u4e00\u4e2atwist axis\uff0c\u5c06\u8fd9\u4e2aq\u5206\u89e3\u4e3aswing\u548ctwist\u4e24\u4e2a\u65cb\u8f6c\uff08keyword: **Swing-Twist decomposition for quaternion rotations**\uff09\\r\\n\u53c2\u8003\u535a\u5ba2\uff1a\\r\\n\\r\\n* https://allenchou.net/2018/05/game-math-swing-twist-interpolation-sterp/\\r\\n* https://www.chadvernon.com/blog/swing-twist/ \\r\\n![Alt text](images/image-15.png)\\r\\n![Alt text](images/image-16.png)\\r\\n```cpp\\r\\n// UE\u4e2d\u7684\u5b9e\u73b0\\r\\ntemplate<typename T>\\r\\nT TQuat<T>::GetTwistAngle(const TVector<T>& TwistAxis) const\\r\\n{\\r\\n    T XYZ = (T)TVector<T>::DotProduct(TwistAxis, TVector<T>(X, Y, Z));\\r\\n    return FMath::UnwindRadians((T)2.0f * FMath::Atan2(XYZ, W));\\r\\n}\\r\\n\\r\\n\\r\\nvector_t getSwingAngle(const vector_t& q, const vector_t& axis) const {\\r\\n        vector_t XYZ(3);\\r\\n        XYZ << q.x(), q.y(), q.z();\\r\\n        value_t w = q[3];\\r\\n        vector_t projection = XYZ.dot(axis) * axis;\\r\\n        vector_t twistQuat(4);\\r\\n        twistQuat << projection.x(), projection.y(), projection.z(), w;\\r\\n        if(twistQuat.norm() == 0.f){\\r\\n            for(int i = 0; i < 3; i++){\\r\\n                twistQuat[i] = 0;\\r\\n            }\\r\\n            twistQuat[3] = 1;\\r\\n        }else {\\r\\n            twistQuat.normalized();\\r\\n        }\\r\\n\\r\\n        return QuatMultiplyQuat(q, InverseQuat(twistQuat));\\r\\n}\\r\\n```\\r\\n\\r\\n### xDecomposer Node \uff08\u4e0d\u65b9\u4fbf \u4e0d\u597d\u505a\u540e\u7eed\u4fee\u6539\uff09\\r\\n\u5bf9\u4e8eOrient psd\u76f4\u63a5\u8f93\u51fajoint\u7684\u6b27\u62c9\u89d2\uff0c\u5bf9\u4e8etwist psd\u6839\u636e\u8f74\u5411\u8fdb\u884c\u5206\u89e3\\r\\n![Alt text](images/image-14.png)\\r\\n#### \u8f93\u5165\u8f93\u51fa\\r\\n1. Input Rotate: Driver joint\u5f53\u524d\u7684\u6b27\u62c9\u89d2\\r\\n2. Output JointOrient: \\r\\n\\r\\n#### \u53c2\u6570\\r\\n\\r\\n\\r\\n### xSolver Node\\r\\n\u5c01\u88c5\u4e86RBF SDK\\r\\n\u66b4\u9732\u4e00\u4e9b\u7528\u6237\u81ea\u5b9a\u4e49\u53c2\u6570\\r\\n![Alt text](images/image-11.png)\\r\\n\\r\\n#### \u8f93\u5165\u8f93\u51fa\\r\\n![Alt text](images/image-13.png)\\r\\n1. InputCoord\uff1a \u5f53\u524d\u7684Driver\u7684\u6b27\u62c9\u89d2 **in Degree**\\r\\n2. InputPoseList\uff1a \u4e00\u7ec4\u3010xPoser Node\u3011\u7684\u8f93\u51fa\uff0c\u6bcf\u4e2axPoser\u8868\u793a\u4e00\u4e2aPose\u7684Driver\u7684Transform\u77e9\u9635\\r\\n\\r\\n### export psd\\r\\n\\r\\n\\r\\n## UE\u7aef\u63d2\u4ef6\\r\\n### json\u683c\u5f0f\\r\\n```json\\r\\n// PSD json\u683c\u5f0f\\r\\n{\\r\\n    \\"xxx_Solver\\":{\\r\\n        \\"DriverObject\\" : \\"arm_l\\",\\r\\n        \\"DrivenObjects\\" : [\\"\\", \\"\\", \\"\\"],\\r\\n        \\"DrivenJointOrientList\\" : [\\r\\n            [0, 0, 0],\\r\\n            [0, 0, 0],\\r\\n            [-80, 2, 3]\\r\\n        ],\\r\\n        \\"PSDType\\": 1,\\r\\n        \\"BasisFunction\\": 1,\\r\\n        \\"GlobalWidth\\": 90.0,\\r\\n        \\"ClampNegativeWeight\\": true,\\r\\n        \\"NormalizeMethod\\": 1,\\r\\n        \\"TwistAxis\\": 0,\\r\\n        \\"IsAutomaticRadius\\": true,\\r\\n        \\"DistanceMethod\\": 0,\\r\\n\\r\\n        \\"Poses\\" : {\\r\\n            \\"pose_1\\" : {\\r\\n                \\"outDriverLocalMatrix\\" : [\\r\\n                    (Mat4x4)\\r\\n                ],\\r\\n                \\"outDrivenLocalMatrixList\\" : [\\r\\n                    (Mat4x4),\\r\\n                    (Mat4x4),\\r\\n                    (Mat4x4)\\r\\n                ],\\r\\n                \\"RawPoseRotation\\": [\\r\\n                    -9.774415372647063e-06,\\r\\n                    0.00020008505692559357,\\r\\n                    -119.99999999999999\\r\\n                ],\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Max\u7aef\u63d2\u4ef6\\r\\n### Max\u63d2\u4ef6\\r\\n\u63d0\u4f9b\u56db\u79cd\u53ef\u9009\u8bed\u8a00\uff1aC++,C#, python\uff0cmaxscript\\r\\n> https://github.com/sideeffects/HoudiniEngineFor3dsMax\\r\\n\\r\\n\u5b98\u65b9\u624b\u518c\uff1ahttps://help.autodesk.com/view/MAXDEV/2022/ENU/?guid=Max_Developer_Help_3ds_max_sdk_the_learning_path_getting_started_writing_plug_ins_html\\r\\n\\r\\nwiki \u6574\u7406\uff1ahttps://iwiki.woa.com/p/1356062572\\r\\n\\r\\n\u53c2\u8003\u4ed3\u5e93\uff1ahttps://git.woa.com/DCC_Client/Products/GoSkinning/3dsMax_go_skinning_cplusplus\\r\\n\\r\\n### \u5f00\u53d1\u914d\u7f6e\\r\\n![Alt text](images/image-18.png)\\r\\n\u4f7f\u7528Release\u6a21\u5f0f \u5176\u4ed6\u6a21\u5f0f\u53ef\u80fd\u7f16\u4e0d\u8fc7\\r\\n![Alt text](images/image-19.png)\\r\\ninclude\u76ee\u5f55\\r\\n![Alt text](images/image-20.png)\\r\\nmoc\u751f\u6210\u4e0d\u4e86\u8981\u53bbgeneratedfiles\u4e0b\u9762\u6dfb\u52a0\u4e00\u4e2arelease/hybrid\u76ee\u5f55\\r\\n\\r\\n### \u4f7f\u7528\u8bf4\u660e\\r\\n\\r\\n\\r\\n#### Matrix Decompose to TRS\\r\\n\u5728maya\u4e2d\uff08\u5e94\u8be5\u6240\u6709\u7684\u90fd\u662f\u8fd9\u6837\uff09\uff0c\u4e00\u4e2aaffine\u53d8\u5316\u5bf9\u5e94\u7684TRS\u987a\u5e8f\u5e94\u8be5\u4e3a\uff0c\u5148Scale, \u518dRotation\uff0c\u6700\u540eTranslate\u3002\u56e0\u4e3aTranslate\u5bf9S\u548cR\u6709\u5f71\u54cd\uff0c\u6211\u4eec\u5e0c\u671bS\u548cR\u7684pivot\u662f\u539f\u70b9/\u8fc7\u539f\u70b9\u7684\u8f74\uff0c\u6240\u4ee5\u6700\u540eTranslate\uff1bScale\u6cbf\u7740xyz\u8f74\u7f29\u653e\uff08\u521d\u59cb\u7684\u65f6\u5019\u7269\u4f53\u7684xyz\u548c\u4e16\u754c\u5750\u6807\u5bf9\u9f50\uff09\uff0c\u6240\u4ee5\u5148Scale\u3002\\r\\n\\r\\n\u5982\u4f55\u5206\u89e3\uff1f\\r\\n> https://math.stackexchange.com/questions/237369/given-this-transformation-matrix-how-do-i-decompose-it-into-translation-rotati\\r\\n```cpp\\r\\n// Decompose a matrix into TRS\\r\\n// \u5982\u679c\u5b58\u5728shear \u5c31\u9700\u8981polar decompose\\r\\n// \u5b58\u5728shear  == \u7f29\u653e\u7684\u8f74\u548c\u7269\u4f53\u5c40\u90e8\u5750\u6807\u7cfb\u7684\u8f74\u6ca1\u6709\u5bf9\u9f50 == \u5148\u8fdb\u884c\u4e86\u65cb\u8f6c\u518d\u8fdb\u884c\u4e86\u7f29\u653e\uff08\u4e16\u754c\u5750\u6807\u7cfb\u7684\u7f29\u653e\uff09\\r\\n// \u4f46\u662f\u5728maya\u4e2d\u62d6\u52a8\u624b\u67c4\u8fdb\u884c\u7684\u7f29\u653e\u64cd\u4f5c\u90fd\u662f\u6309\u7167\u5c40\u90e8\u5750\u6807\u7cfb\u64cd\u4f5c\u7684\uff08\u7b49\u4ef7\u4e8e\u5148\u7f29\u653e\u518d\u65cb\u8f6c\uff09 ==> \u4e0d\u4f1a\u6709shear\\r\\n\\r\\n// \u53c2\u8003UE\u4e2d\u7684FTransform(TMatix) \u4e2d\u4f1a\u5bf9TMatrix\u8fdb\u884cExtractScaling (\u4f2a\u4ee3\u7801)\\r\\ntrans = mat.GetTrans();\\r\\nscale = vec3{mat[0][0:3].norm(), mat[1][0:3].norm(), mat[2][0:3].norm()};\\r\\nrot = mat[0 : 3][0 : 3] / scale;\\r\\n\\r\\n// \u57283ds Max API\u4e2d\u6709DecomposeMatrix\uff08\uff09\u51fd\u6570\u5bf9TRS\u987a\u5e8f\u7684Matrix\u8fdb\u884c\u5206\u89e3\\r\\n\\r\\n```\\r\\n\\r\\n### ue\u63d2\u4ef6\u6587\u4ef6\u7ed3\u6784\\r\\n```cpp\\r\\n// \u505a\u4e00\u4e9b\u7701\u7565\uff0c\u4e0d\u533a\u5206Private\u548cPublic\uff0c\u7701\u7565\u6587\u4ef6\u540d\u5b57\u7684XPoseDriver\u524d\u7f00\\r\\n\\r\\n- XPoseDriverEditor\\r\\n    // \u84dd\u56fe\u76f8\u5173\\r\\n    - BPLibrary.h\\r\\n    - BPLibrary.cpp \\r\\n\\r\\n    // \u81ea\u52a8\u751f\u6210\u7684\uff1f\\r\\n    EditorModule.h\\r\\n    EditorModule.cpp\\r\\n\\r\\n    // \u7ee7\u627fUAnimGraphNode_Base\\r\\n    UAnimGraphNode_XPoseDriver.h\\r\\n    UAnimGraphNode_XPoseDriver.cpp\\r\\n\\r\\n- XPoseDriverRuntime\\r\\n- ThirdParty\\r\\n    - include / xPsd.h\\r\\n    - lib / XPsdLib.lib\\r\\n```\\r\\n\\r\\n\\r\\n## \u4f7f\u7528\u8bf4\u660e\\r\\n### \u901a\u8fc7distance method\u6765\u5236\u4f5cswing\u548ctwist psd\\r\\ndistance method\u662f\u4e00\u4e2apsd\u7684\u5c5e\u6027\uff0c\u4e00\u4e2apsd\u8981\u4e48\u662fswing\u8981\u4e48\u662ftwist\uff0c\u5bf9\u6bd4\u4e09\u79cddistance method\u65b9\u6cd5\u3002\u53ef\u4ee5\u5bf9\u540c\u4e00\u4e2ajoint\u5206\u522b\u5efaswing\u548ctwist\u4e24\u4e2apsd\u3002\\r\\n* Euclidean\uff1a \u4e24\u4e2apose\u7684\u6b27\u62c9\u89d2\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0c\u4f1a\u6df7\u5408swing\u8f74\u5411\u548ctwist\u8f74\u5411\u7684\u5f71\u54cd\\r\\n* Quaternion\uff1a \u56db\u5143\u6570\u5728\u7403\u9762\u4e0a\u7684\u5939\u89d2\uff0c\u4f1a\u6df7\u5408swing\u8f74\u5411\u548ctwist\u8f74\u5411\u7684\u5f71\u54cd\\r\\n* Swing\uff1a      \u56db\u5143\u6570\u5728\u7403\u9762\u4e0a\u7684\u5939\u89d2\u5728\u975etwist\u8f74\u5411\u7684\u5206\u91cf\uff0c\u4e0d\u4f1a\u5305\u542btwist\\r\\n* Twist\uff1a     \u56db\u5143\u6570\u5728\u7403\u9762\u4e0a\u7684\u5939\u89d2\u5728twist\u8f74\u5411\u7684\u5206\u91cf\uff0c\u53ea\u4f1a\u5305\u542btwist\\r\\n\\r\\nEuclidean\\r\\n![Alt text](images/euclidean-guassian.gif)\\r\\n\\r\\nSwing\\r\\n![Alt text](images/swing-guassian.gif)\\r\\n\\r\\nTwist\\r\\n![Alt text](images/twist-guassian.gif)\\r\\n\\r\\n### width\u548cnormalize method\\r\\n- width: \u7528\u6765\u63a7\u5236\u6bcf\u4e2apose\u7684\u5f71\u54cd\u8303\u56f4\uff0c\u5982\u679c\u6838\u51fd\u6570\u662fLinear\uff0c\u79bb\u67d0\u4e2apose\u8d85\u8fc7width\u8303\u56f4\u65f6\uff0c\u8be5pose\u5f71\u54cd\u7acb\u523b\u53d8\u4e3a0\uff1b\u800c\u82e5\u91c7\u7528Guassian\u6838\u5219\u4f1a\u5728\u8d85\u8fc7pose\u540e\u5e73\u6ed1\u9012\u51cf\u76f4\u81f30\\r\\n- normalize methd\\r\\n  - OnlyNormalizeAboveOne: \u5bf9\u6700\u5916\u4fa7pose\u7ee7\u7eed\u5411\u5916\u65cb\u8f6c\u4f1a\u8ba9\u6743\u91cd\u9010\u6e10\u4e0b\u964d(\u6b64\u65f6\u6743\u91cd\u548c\u4f1a\u5c0f\u4e8e0\uff0c\u6bd4\u5982\u6743\u91cd\u5217\u8868\u4e3a[0, 0, ...,0, 0.7])\\r\\n  - AlwaysNormalize\uff1a \u5bf9\u6700\u5916\u4fa7pose\u7ee7\u7eed\u5411\u5916\u65cb\u8f6c\u4f1a\u8ba9\u6743\u91cd\u4fdd\u6301\uff08\u6743\u91cd\u4f1a\u4e00\u76f4\u4e3a[0, 0, ..., 1]\uff09\\r\\n- \u989d\u5916\u540e\u5904\u7406\uff1a\u82e5\u6240\u6709pose\u7684\u5f71\u54cd\u90fd\u4e3a0\uff0c\u81ea\u52a8\u8df3\u8f6c\u5230natural pose\\r\\n![Alt text](images/be3b33ebd35875b51ce3901d8375d12a.png)\\r\\n\\r\\n![Alt text](images/image-17.png)"},{"id":"/Unreal/Lyra\u6d45\u6790/1","metadata":{"permalink":"/blog/Unreal/Lyra\u6d45\u6790/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/Lyra\u6d45\u6790/1.md","source":"@site/blog/Unreal/Lyra\u6d45\u6790/1.md","title":"Lyra\u6d45\u6790","description":"\u89d2\u8272\u52a8\u753b","date":"2024-07-07T18:07:01.000Z","formattedDate":"July 7, 2024","tags":[{"label":"UE","permalink":"/blog/tags/ue"}],"readingTime":1.645,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Lyra\u6d45\u6790","tags":["UE"]},"prevItem":{"title":"\u5168\u6d41\u7a0bPose Driver Deformer","permalink":"/blog/\u9879\u76ee/Pose-Space-Deformer/PoseDriverDeformer"},"nextItem":{"title":"UE\u52a8\u753b\u6a21\u5757\u6d45\u6790","permalink":"/blog/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1"}},"content":"\x3c!--truncate--\x3e\\n## \u89d2\u8272\u52a8\u753b\\n### \u84dd\u56fe\u7ed3\u6784\\nTODO: lyra\u5176\u5b9e\u628aWeapon\u7ed9\u5355\u72ec\u62ff\u51fa\u6765\u4e86\uff0cWeaponInstance\u4e2d\u6709\u4e2aPickBestAnimLayer\u51fd\u6570\uff0c\u6765\u8fdb\u884cAnimLayer\u7684\u7ed1\u5b9a\uff0c\u8fd9\u91cc\u662f\u7b80\u5316\u7684\u63cf\u8ff0\\n![alt text](images/image-10.png)\\n\\n\u9996\u5148\uff0cALI_ItemAnimLayers\u662f\u4e00\u4e2a\u62bd\u8c61\u63a5\u53e3\uff0c\u5728\u8fd9\u91cc\u5b9a\u4e49\u4e00\u4e9b\u5b50AnimGraph\\n![alt text](images/image-12.png)\\n\u8fd9\u4e9bAnimGraph\u7531ABP_ItemAnimLayersBase\u6765\u5b9e\u73b0\uff0c\u6bd4\u5982FullBodyIdleState\u7684\u5b9e\u73b0\\n![alt text](images/image-13.png)\\n\\nABP_Mannequin_Base\u662f\u4e3b\u84dd\u56fe\uff0c\u4f1a\u5305\u542bALI_ItemAnimLayers\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u5b50AnimGraph, \u9700\u8981\u901a\u8fc7\u8fd9\u91cc\u6765\u8bbe\u7f6e\\n![alt text](images/image-9.png)\\n\u5e76\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e9bAnimGraph\u7684output pose\uff0c\u4f46\u53ea\u4f1a\u4f5c\u4e3a\u63d2\u69fd\u4e00\u6837\u7684\u5b58\u5728\uff0c\u6bd4\u5982\\n![alt text](images/image-14.png)\\n\u800c\u5b50\u84dd\u56fe\u5177\u4f53\u5b9e\u73b0\u5728ABP_ItemAnimLayersBase\uff0c\u66b4\u9732\u4e86\u4e00\u4e9b\u53ef\u914d\u7f6e\u7684\u53c2\u6570\uff0c\u6bd4\u5982Idle\u91c7\u7528\u7684\u5177\u4f53\u52a8\u753b\u5e8f\u5217\uff0c\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u662f\u4e0d\u540c\u7684\uff08\u624b\u67aa/\u6b65\u67aa/unarmed\uff09\uff0c\u8fd9\u4e2a\u4f1a\u5728\u8fd0\u884c\u65f6\u6839\u636e\u903b\u8f91\u53bb\u9009\u62e9\uff08\u88c5\u914d\uff09\\n\\n\u731c\u6d4b\u4e00\u4e2a\u5927\u6982\u7684cpp\u5b9e\u73b0\u662f\u8fd9\u6837\\n```cpp\\nstruct ALI_ItemAnimLayers{\\n    std::function<Pose()>  FullBodyIdleState;\\n    std::function<Pose()>  FullBodyCycleState;\\n    ...\\n}\\n\\nstruct ABP_ItemAnimLayersBase : public ALI_ItemAnimLayers{\\n\\n    ABP_ItemAnimLayersBase(Config config){\\n        FullBodyIdleState = [](){\\n            ...\\n            Sequence seq = Load(config.sequencePath)\\n            return Pose(seq);\\n        }\\n\\n        FullBodyCycleState = [](){\\n            ...\\n            Sequence seq = Load(config.sequencePath)\\n            return Pose(seq);\\n        }\\n    }\\n    \\n}\\n\\nstruct ABP_Mannequin_Base{\\n    ALI_ItemAnimLayers AnimLayers;\\n\\n    void SelectAnimLayer(Context context){\\n        if(contex.use_pitsol){\\n            Config config(\\"Path/to/pitsol_config\\");\\n            AnimLayers = ALI_ItemAnimLayers(config);\\n        }else if(contex.use_rifle){\\n            Config config(\\"Path/to/rifle_config\\");\\n            AnimLayers = ALI_ItemAnimLayers(config);\\n        }\\n    }\\n\\n    Pose AnimGraph(){\\n        SelectAnimLayer(GetOwner.context);\\n        auto Pose1 = ...;\\n        auto Pose2 = ALI_ItemAnimLayers[FullBodyIdleState]();\\n        return Blend(Pose1, Pose2, 0.5);\\n    }\\n}\\n```\\n\\n\\n### \u52a8\u753b\u84dd\u56fe\u591a\u7ebf\u7a0b\u66f4\u65b0\\nBlueprintThreadSafeUpdateAnimation\\n\u6b66\u5668\u6302\u8f7d\\n![alt text](images/image.png)\\n![alt text](images/image-1.png)\\n![alt text](images/image-2.png)\\n![alt text](images/image-3.png)\\n\\n![alt text](images/image-5.png)\\n![alt text](images/image-4.png)\\n\\n![alt text](images/image-6.png)\\n![alt text](images/image-8.png)\\n![alt text](images/image-7.png)"},{"id":"/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1","metadata":{"permalink":"/blog/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1.md","source":"@site/blog/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1.md","title":"UE\u52a8\u753b\u6a21\u5757\u6d45\u6790","description":"\u52a8\u753b\u878d\u5408\u65b9\u5f0f","date":"2024-07-07T18:07:01.000Z","formattedDate":"July 7, 2024","tags":[{"label":"UE","permalink":"/blog/tags/ue"}],"readingTime":18.95,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"UE\u52a8\u753b\u6a21\u5757\u6d45\u6790","tags":["UE"]},"prevItem":{"title":"Lyra\u6d45\u6790","permalink":"/blog/Unreal/Lyra\u6d45\u6790/1"},"nextItem":{"title":"UE\u7c7b\u578b\u7cfb\u7edf","permalink":"/blog/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1"}},"content":"\x3c!--truncate--\x3e\\n# UE\u52a8\u753b\u5e38\u7528\u64cd\u4f5c\\n\\n## \u52a8\u753b\u878d\u5408\u65b9\u5f0f\\n### \u4f20\u7edf\u52a8\u753b\u878d\u5408\\n\\n![alt text](images/image-25.png)\\n\\nBlend\u90a3\u4e00\u6bb5\u9700\u8981\u8ba1\u7b97\u4e24\u7aef\u52a8\u753b\u4ee5\u53ca\u4ed6\u4eec\u7684\u6df7\u5408\uff0c\u76f8\u5f53\u4e8e\u53cc\u500d\u7684\u52a8\u753b\u5f00\u9500\\n\\n### \u60ef\u6027\u878d\u5408Inertialization\\n\\n*   \u73b0\u5b9e\u91cc\u4e0d\u4f1a\u6df7\u5408\uff08\u6325\u624b\u540e\u653e\u4e0b\uff0c\u800c\u4e0d\u4f1a\u8fb9\u6325\u624b\u8fb9\u653e\u4e0b\uff09\\n*   \u4e0d\u8fdb\u884cblend\uff0c\u800c\u662f\u540e\u5904\u7406\u89e3\u51b3\u4e0d\u8fde\u7eed\u6027\\n\\n![alt text](images/image-24.png)\\n\\n\u4e0b\u9762\u7684\u66f2\u7ebf\uff0c\u662fsequence1 - sequence2\uff0c \u8981\u505a\u7684\u5de5\u4f5c\u662f\u628a\u4ed6\u4eec\u7684\u5dee\u503c\u7f13\u6162\u6d88\u9664\\n\\n\u63d2\u503c\u6210\u5173\u4e8et\u7684\u4e94\u6b21\u51fd\u6570\uff0c\u53c2\u6570\u7531fade-off\u65f6\u95f4\u3001\u4e24\u7aef\u5e8f\u5217\u9996\u4f4d\u7684\u4f4d\u7f6e\u5dee\u548c\u901f\u5ea6\u5dee \u63a7\u5236\\n\\n![alt text](images/image-26.png)\\n\\n\\n## Additive\u52a8\u753b\\n\u7528\u6765\u5bf9Base Pose\u53e0\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u6548\u679c\uff0c\u6bd4\u5982\u8fd0\u52a8\u72b6\u6001\u53d7\u51fb\u7684\u8f7b\u5fae\u53cd\u9988\u3001\u7784\u51c6\u72b6\u6001\u5f00\u67aa\u540e\u7684\u540e\u5750\u529b\u6548\u679c\u3002\\n![alt text](images/image.png)\\n\u8bbeBase Pose\u7684Transform\u77e9\u9635\u4e3aB\uff08\u6240\u6709joint\uff09\uff0cReference Pose\u4e3aR\uff0cAdditive Pose\uff08\u8fd9\u91cc\u6307\u88ab\u51cf\u6570\u90a3\u4e2aPose\uff09\u4e3aA\uff0c\u90a3\u4e48Final Pose $F = (R^{-1}A)B$\\n\\n\u4e0b\u56fe1\u4e3aBasePose\uff0cAddtive Pose\u4e3a\u5411\u4e0a\u7784\u51c6\uff0c\u56fe2\u91c7\u7528Local Space Additive\uff0c\u628aAddtive Pose\u57fa\u4e8e\u7236\u9aa8\u9abc\u7684Transform\u53e0\u52a0\u5230Base Pose\u7684\u7236\u9aa8\u9abc\u4e0a\uff0c\u4f1a\u5bfc\u81f4\u7784\u51c6\u6b6a\u6389\uff0c\u4e0d\u518d\u662f\u9884\u671f\u7684\u6b63\u4e0a\u65b9\u3002\u800c\u56fe3\u91c7\u7528Mesh Space Additive\uff0c\u628aAddtive Pose\u57fa\u4e8eroot\u7684Transform\u53e0\u52a0\u5230\u7236\u9aa8\u9abc\u4e0a,\u8fd9\u91cc\u4f1a\u8fdb\u884c\u4e00\u6b21\u5750\u6807\u7cfb\u8f6c\u6362\uff1aTransform\u77e9\u9635\u4eceMesh Space => Local Space,\u56e0\u6b64\u5f00\u9500\u6bd4\u8f83\u5927\u3002\\n![alt text](images/image-1.png)\\n\\n $F = (R^{-1}A)B$\u5728UE\u4e2d\u7684\u5b9e\u73b0\u5982\u4e0b\\n```cpp\\n// FAnimationRuntime::AccumulateLocalSpaceAdditivePoseInternal\\n// \u8fd9\u91cc\u7684RTS\u90fd\u662fBasePose\u7684\u6210\u5458\u53d8\u91cf\\nRotation = VectorQuaternionMultiply2(BlendedRotation, Rotation);\\nTranslation = VectorMultiplyAdd(Atom.Translation, BlendWeight, Translation);\\nScale3D = VectorMultiply(Scale3D, VectorMultiplyAdd(Atom.Scale3D, BlendWeight, DefaultScale));\\n```\\nMesh Space\u7684\u8bdd\u4f1a\u6709\u989d\u5916\u4e24\u6b65\\n![alt text](images/image-2.png)\\n\u8fd9\u91cc\u53ef\u4ee5\u770b\u51faMesh Space\u5c31\u662fRoot\u7684Space,\u5bf9\u4e8e\u4e00\u6761\u9aa8\u9abc\u94fe\uff0clocal space\u7684rotation\u5206\u522b\u4e3aR0,R1,R2, \u90a3\u4e48Orientation2 = R0 * R1 * R2(\u60f3\u8c61\u673a\u68b0\u81c2\u4ece\u672b\u7aef\u5411root\u4f9d\u6b21\u65cb\u8f6c)\\n```cpp\\nfor (FCompactPoseBoneIndex BoneIndex(1); BoneIndex < LocalPose.GetNumBones(); ++BoneIndex)\\n{\\n    const FCompactPoseBoneIndex ParentIndex = LocalPose.GetParentBoneIndex(BoneIndex);\\n\\n    const FQuat MeshSpaceRotation = LocalPose[ParentIndex].GetRotation() * LocalPose[BoneIndex].GetRotation();\\n    LocalPose[BoneIndex].SetRotation(MeshSpaceRotation);\\n}\\n```\\n\u8fd9\u91cc\u6ce8\u610f,ue\u7684FMatrix\u662f[row-matrix\u9700\u8981\u53f3\u4e58](https://mobile.rodolphe-vaillant.fr/entry/145/unreal-engine-c-tmap-doc-sheet-1)\uff0c\u4f46TQuat\u662f\u5de6\u4e58\u3002\\n\\n## Animation Montage\\n\u7528\u6765\u628a\u591a\u4e2aAnimSequence\u5408\u5728\u4e00\u8d77\u6839\u636egame\u903b\u8f91\u6309\u4efb\u610f\u987a\u5e8f\u8fdb\u884c\u64ad\u653e\uff0c\u4e00\u4e9b\u57fa\u672c\u7684\u6982\u5ff5\uff1a\\n* Section: \u628a\u65f6\u95f4\u8f74\u5206\u4e3a\u591a\u4e2asection\uff0c\u6bcf\u4e2asection\u53ef\u4ee5\u653e\u4e00\u6bb5Sequence\uff0c\u53ef\u4ee5\u6839\u636e\u903b\u8f91\u5207\u6362\u64ad\u653e\u6bcf\u4e00\u6bb5section\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u7f6esection\u4e4b\u95f4\u7684\u6df7\u5165\\n* Slot/Slot Group: Slot\u53ef\u4ee5\u8986\u76d6\u4e00\u4e2amesh\u6216\u4e00\u4e2a\u5b50mesh\uff08\u6bd4\u5982FullBody/UpperBody\uff09\uff0cSlot\u5728\u8499\u592a\u5947\u5185\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u5305\u542b\u4e00\u4e9bAnimSequence\uff0c\u8bbe\u7f6e\u597dslot\u540e\u5c31\u53ef\u4ee5\u5728ABP\u4e2d\u4f7f\u7528\uff0c\u5982\u4e0b\u56fe\uff0cSlot\u8282\u70b9\u5728\u89e6\u53d1\u64ad\u653e\u524d\u4f1a\u4f7f\u7528Source\uff0c\u6bd4\u5982Locomotion\uff0c\u800c\u5728\u89e6\u53d1\u540e\uff08\u6bd4\u5982\u89d2\u8272\u6309\u7279\u5b9a\u952e\uff09\u4f1aoverride source\u52a8\u753b\u3002\\n![alt text](images/image-17.png)\\n\u4e0a\u56fe\u4e2d\uff0cFullBody slot\u53ef\u4ee5\u8fdb\u884c\u8868\u60c5\uff0c\u800cUpperBody\u53ef\u4ee5\u653e\u624b\u90e8\u52a8\u753b\u6bd4\u5982\u6362\u5f39\u3002\\n\\n\\n## \u91cd\u5b9a\u5411\\nSequence A\u7684Skeleton\u662fS1\uff0c \u628aSequence A\u5e94\u7528\u5230Skeleton S2\u4e0a\uff0c\u8981\u89e3\u51b3\u4e24\u70b9\uff1a\\n\\n1.  \u5efa\u7acb\u9aa8\u9abc\u5bf9\u5e94\u5173\u7cfb\uff1a\u9aa8\u9abc\u540d\u79f0\u4e0d\u540c / \u9aa8\u9abc\u6570\u91cf\u4e0d\u540c / \u9aa8\u9abc\u957f\u5ea6\u4e0d\u540c\\n2.  S1\u7684\u521d\u59cbPose\u548cS2\u7684\u521d\u59cbPose\u53ef\u80fd\u4e0d\u540c\uff08\u6bd4\u5982\u4e00\u4e2aA-Pose \u53e6\u4e00\u4e2aT-Pose\uff09\uff0c\u56e0\u6b64\u67d0\u4e00\u5e27\u52a8\u753b\uff0c\u8c03\u6574\u5230\u540c\u4e00Pose\u6240\u9700\u8981\u7684transform\u662f\u4e0d\u540c\u7684\u3002\\n\\n\\n# \u6e90\u7801\u5256\u6790\\n## \u8d44\u4ea7\u7c7b\\n```mermaid\\nclassDiagram\\n UObject o-- UAnimationAsset\\n\\nUAnimationAsset o--  UAnimationSequeceBase \\n\\nUAnimationAsset   o-- UBlendSpaceBase\\nUAnimationAsset : USkeleton *\\n\\n UAnimationSequeceBase o--  UAnimCompositeBase \\nUAnimationSequeceBase  o-- UAnimSequence\\n\\nUAnimCompositeBase  o-- UAnimComposite\\nUAnimCompositeBase  o-- UAnimMontage\\n```\\n\\n### \u5bfc\u5165\u8fc7\u7a0b\\nFBX\u5bfc\u5165\u540e\u4e00\u822c\u4f1a\u51fa\u73b0\u8fd9\u51e0\u4e2a\u8d44\u4ea7\\n\\n![alt text](images/image-18.png)\\n\\n\u63a5\u4e0b\u6765\u7684\u89e3\u6790\u901a\u8fc7UFbxFactory::FactoryCreateFile\u6765\u65ad\u70b9\u8c03\u8bd5\\n```cpp\\nUSkeletalMesh* BaseSkeletalMesh = nullptr;\\nBaseSkeletalMesh = FbxImporter->ImportSkeletalMesh( ImportSkeletalMeshArgs );\\n```\\n\\n```cpp\\nUSkeletalMesh* UnFbx::FFbxImporter::ImportSkeletalMesh(FImportSkeletalMeshArgs &ImportSkeletalMeshArgs)\\n{\\n    // \u5bfc\u5165\u7684fbx\u4e2d\u7684\u6240\u6709\u6570\u636e\\n    FSkeletalMeshImportData* SkelMeshImportDataPtr = nullptr;\\n    FillSkeletalMeshImportData(SkelMeshImportDataPtr, ...);\\n\\n    // \u6700\u7ec8\u8981\u8f93\u51fa\u7684skeletalmesh\\n    USkeletalMesh* SkeletalMesh = nullptr;\\n\\n    \\n    // \u5199\u5165USkeletalMesh\u7684RefSkeleton\u6210\u5458\\n\\tSkeletalMeshImportUtils::ProcessImportMeshSkeleton( SkeletalMesh->GetRefSkeleton(),*SkelMeshImportDataPtr, ...);\\n\\n    // \u5199\u5165LOD\u8499\u76ae\u6570\u636e\\n    FSkeletalMeshBuildParameters SkeletalMeshBuildParameters(SkeletalMesh, GetTargetPlatformManagerRef().GetRunningTargetPlatform(), ImportLODModelIndex, bRegenDepLODs);\\n    bBuildSuccess = MeshBuilderModule.BuildSkeletalMesh(SkeletalMeshBuildParameters);\\n    \\n}\\n```\\n\\n\u5199\u5165USkeletalMesh\u7684RefSkeleton\\n```cpp\\nTArray <SkeletalMeshImportData::FBone>&\\tRefBonesBinary = ImportData.RefBonesBinary;\\nRefSkeleton.Empty();\\n\\n// \u7528FReferenceSkeletonModifier\u5bf9RefSkeleton\u4f5c\u51fa\u4fee\u6539\\nFReferenceSkeletonModifier RefSkelModifier(RefSkeleton, SkeletonAsset);\\nfor (int32 b = 0; b < RefBonesBinary.Num(); b++){\\n    const SkeletalMeshImportData::FBone & BinaryBone = RefBonesBinary[b];\\n    const FString BoneName = FSkeletalMeshImportData::FixupBoneName(BinaryBone.Name);\\n    // \u9aa8\u9abc\u7ed3\u6784\uff0c\u9759\u6001\u5b58\u50a8\u7684\u6811\u4ee5\u53ca\u5bf9\u5e94\u7684transform\\n    const FMeshBoneInfo BoneInfo(FName(*BoneName, FNAME_Add), BinaryBone.Name, BinaryBone.ParentIndex);\\n    const FTransform BoneTransform(BinaryBone.BonePos.Transform);\\n\\n    RefSkelModifier.Add(BoneInfo, BoneTransform);\\n}\\n\\n\\n```\\n\\n\\n\u5199\u5165LOD\u8499\u76ae\u6570\u636e\\n```cpp\\n// Engine/Source/Developer/MeshBuilder/Private/SkeletalMeshBuilder.cpp\\n\\n// \u628aLOD Mesh\u6570\u636e\u5b58\u5165 USkeletalMesh.ImportedModel;\\nFSkeletalMeshLODModel& BuildLODModel = SkeletalMesh->GetImportedModel()->LODModels[LODIndex];\\nMeshUtilities.BuildSkeletalMesh(\\n\\t\\t\\tBuildLODModel, \\n\\t\\t\\tSkeletalMesh->GetPathName(),\\n\\t\\t\\tRefSkeleton,\\n\\t\\t\\tLODInfluences,\\n\\t\\t\\tLODWedges,\\n\\t\\t\\tLODFaces,\\n\\t\\t\\tLODPoints,\\n\\t\\t\\tLODPointToRawMap,\\n\\t\\t\\tOptions\\n\\t\\t);\\n```\\n\\n\\n### USkeleton\\n\\nUSkeleton\u662fUAnimationAsset\u7684\u6210\u5458\\n\\n```cpp\\nclass USkeleton{\\nprivate:\\n\\nUPROPERTY(VisibleAnywhere, Category=Skeleton)\\nTArray<struct FBoneNode> BoneTree;\\n\\nFReferenceSkeleton ReferenceSkeleton;\\n\\npublic:\\nTArray<USkeletalMeshSocket*> Sockets;\\nTMap< FName, FReferencePose > AnimRetargetSources;\\n\\n// FSmartNameContainer\u7531\u4e24\u4e2amap\u7ec4\u6210\\n// NameMapings: {FName : {[{CurveFName0, MetaData0}, {CurveFName1, MetaData1}, ... , {CurveFNameN, MetaDataN}]}}\\n// LoadedMappings\uff1a{FName : {[{CurveFName0, MetaData0}, {CurveFName1, MetaData1}, ... , {CurveFNameN, MetaDataN}]}}\\nFSmartNameContainer SmartNames;\\n}\\n\\n\\n// \u7528\u6765\u5728SkeletalMesh\u4e2d\u6302\u8f7d\u5176\u4ed6mesh\uff0c\u6bd4\u5982\u6b66\u5668\u3002\\n// \u6ca1\u6709\u8fd9\u4e2a\u7684\u8bdd\u5c31\u53ea\u80fd\u5728Actor\u7684SkeletalMeshComponent\u4e0battach\u6b66\u5668\\nclass USkeletalMeshSocket{\\n    FName SocketName;\\n    FName BoneName;\\n    FVector RelativeLocation;\\n    FRotator RelativeRotation;\\n    FVector RelativeScale;\\n}\\n\\n```\\n\\n#### BoneTree\\n\\n![alt text](images/image-19.png)\\n\\n\u4f3c\u4e4e\u4e0d\u4f1a\u4f7f\u7528\uff0c\u90fd\u662f\u7a7a\u7684\uff0c\u5177\u4f53\u5f97\u770b\u4e00\u4e0b\u5bfc\u5165fbx\u7684\u6d41\u7a0b\u6709\u6ca1\u6709\u4f7f\u7528\u5230\u8fd9\u4e2a\\n\\n#### FReferenceSkeleton\\n\\n![alt text](images/image-20.png)\\n\\n\u5b58\u50a8\\n* \u539f\u59cb\u7684\u9aa8\u9abc\u6570\u636e\\n* \u52a0\u5165\u4e86\u7528\u6237\u81ea\u5b9a\u4e49virtual bone\u7684\u5168\u90e8\u9aa8\u9abc\u6570\u636e\\n\\n\u6240\u6709\u7684\u9aa8\u9abc\u7528TArray\u9759\u6001\u5b58\u50a8\u6811\u7684\u7ed3\u6784\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2aName\u5230Index\u7684Map\\n```cpp\\nstruct FMeshBoneInfo{\\n    FName Name;\\n    int32 ParentIndex; // root\u7684parentindex\u662fNoneIndex(-1)\\n}\\nstruct FReferenceSkeleton{\\n// raw data\\nTArray<FMeshBoneInfo>\\tRawRefBoneInfo;\\nTArray<FTransform>\\t\\tRawRefBonePose;\\n\\n// raw data + virtual bone data\\nTArray<FMeshBoneInfo>\\tFinalRefBoneInfo;\\nTArray<FTransform>\\t\\tFinalRefBonePose;\\n\\n/** TMap to look up bone index from bone name. */\\nTMap<FName, int32>\\t\\tRawNameToIndexMap;\\nTMap<FName, int32>\\t\\tFinalNameToIndexMap;\\n}\\n```\\n\\n#### FSmartNameCnntainer\\n\\n\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u672c\u8eab\u542b\u6709\u66f2\u7ebf\u5c5e\u6027\\n\\n![alt text](images/image-21.png)\\n\\n### SkeletalMesh\\n\\n```cpp\\nclass SkeletalMesh {\\n// editor-only\\nTSharedPtr<FSkeletalMeshModel> ImportedModel;\\n\\n// runtime\\n// \u4e0b\u9762\u5206\u6790\u4e86FSkeletalMeshModel\uff0c TODO \u5206\u6790SkeletalMeshRenderData\\nTUniquePtr<FSkeletalMeshRenderData> SkeletalMeshRenderData;\\n\\nUSkeleton* Skeleton;\\nFBoxSphereBounds ImportedBounds;\\nTArray<FSkeletalMaterial> Materials;\\nUPhysicsAsset* PhysicsAsset;\\n}\\n```\\n\\n```mermaid\\nclassDiagram\\nFSkeletalMesh  *--   FSkeletalMeshModel\\nFSkeletalMeshModel *-- FSkeletalMeshLODModel\\nFSkeletalMeshLODModel *-- FSkelMeshSection\\nFSkelMeshSection *-- FSoftSkinVertex\\n\\nFSkeletalMesh : TSharedPtr< FSkeletalMeshModel > ImportedModel\\nFSkeletalMesh : USkeleton *\\n\\nFSkeletalMeshModel : TArray < FSkeletalMeshLODModel> Sections\\nFSkeletalMeshLODModel: TArray < FSkelMeshSection > Sections\\nFSkelMeshSection : TArray< FSoftSkinVertex > SoftVertices\\n\\nFSoftSkinVertex : FVector Position\\nFSoftSkinVertex : FVector TangentX\\nFSoftSkinVertex : FVector TangentY\\nFSoftSkinVertex : FVector TangentZ\\nFSoftSkinVertex : FVector2D UVs\\nFSoftSkinVertex : FColor Color\\n```\\n\\nSkeletal Mesh\u6e32\u67d3\u7684\u6a21\u5f0f<https://dev.epicgames.com/documentation/en-us/unreal-engine/skeletal-mesh-rendering-paths-in-unreal-engine>\\n\\n\u5728\u67d0\u4e00\u4e2aLOD\u5c42\uff0c\u540c\u4e00Material\u7684Mesh\u79f0\u4e3a\u4e00\u4e2aSection\uff0c\u5982\u679c\u4e00\u4e2aSection\u4f9d\u8d56\u592a\u591a\u9aa8\u9abc\uff0c\u4f1a\u901a\u8fc7\u4e00\u4e9b\u51e0\u4f55\u7b97\u6cd5\u8fdb\u4e00\u6b65\u62c6\u5206\u6210\u591a\u4e2aChunk\u3002\\n\\nChunk\u53ea\u4f1a\u5728\u8fd0\u884c\u65f6\u751f\u6210\uff0c\u548cSection\u5171\u7528\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\\n\\n![alt text](images/image-22.png)\\n\\n```cpp\\nclass FSkeletalMeshModel{\\n// TIndirectArray \u548cTArray\u5dee\u4e0d\u591a\uff0c\u4f46\u5806\u91cc\u9762\u5b58\u50a8\u7684\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u907f\u514dresize\u7684\u65f6\u5019memcopy\\nTIndirectArray<FSkeletalMeshLODModel> LODModels;\\n}\\n\\n\\n\\n// FSkeletamMeshLODModel \u5bf9\u5e94\u67d0\u5c42LOD\u7684skeletal mesh\u6570\u636e\\nclass FSkeletalMeshLODModel{\\n\\tTArray<FSkelMeshSection> Sections;\\n}\\n\\n// SkelMeshSection\\n// \u8fd9\u662f\u4f7f\u7528\u540c\u4e00material\u7684\u5b50mesh\\n// \u4e5f\u53ef\u80fd\u662fBone Chunking\u6280\u672f\u6784\u9020\u7684\u5b50mesh\uff0c\u7528\u4e8e\u5e76\u884c\u52a0\u901f\\nstruct FSkelMeshSection{\\n\\tint MaterialIndex;\\n\\tint BaseIndex; // \u76f8\u5bf9\u4e8eSections\u9996\u5730\u5740\u7684\u504f\u79fb\u503c\\n\\tint BaseVertexIndex; // \u9876\u70b9\u7684offset\\n\\tint NumTriangles;\\n\\t\\n\\t// \u6240\u6709\u9876\u70b9\u7684\u5177\u4f53\u4fe1\u606f\uff0c\u5305\u62ecPosition\uff0cTBN\u5411\u91cf\uff0c UV\u5750\u6807\uff0c FColor\\n\\tTArray<FSoftSkinVertex> SoftVertices;\\n\\n\\t// \u8fd9\u4e00section\u7528\u5230\u7684\u6240\u6709\u9aa8\u9abc\\n\\tTArray<FBoneIndexType> BoneMap;\\n\\n\\t/*\\n\\t * If this section was produce because of BONE chunking, the parent section index will be valid.\\n\\t * If the section is not the result of skin vertex chunking, this value will be INDEX_NONE.\\n\\t * Use this value to know if the section was BONE chunked:\\n\\t * if(ChunkedParentSectionIndex != INDEX_NONE) will be true if the section is BONE chunked\\n\\t */\\n\\tint32 ChunkedParentSectionIndex;\\n}\\n```\\n\\n### UAnimationSequence\\nUAnimSequenceBase\u4e2d\u5df2\u7ecf\u6709\u4e86sequence\u6240\u9700\u8981\u7684\u6838\u5fc3\u6570\u636e\u548c\u5c5e\u6027\\n```cpp\\nclass UAnimSequenceBase : public UAnimationAsset {\\n    // \u6309\u65f6\u95f4\u5148\u540e\u6392\u5e8f\\n    TArray<struct FAnimNotifyEvent> Notifies;\\n\\n    float SequenceLength;\\n    float RateScale;\\n    bool bLoop;\\n\\n    // sequecen\u6570\u636e\uff0c\u5305\u62ec\u9aa8\u9abc\u52a8\u753b\u6570\u636e\u548ccurve\uff0c\\n    // AnimSequence\u7684instance\u4f1a\u5728\u8fd0\u884c\u65f6\u4eceDataModel\u4e2d\u62ff\u6570\u636e\\n    TObjectPtr<UAnimDataModel> DataModel;\\n}\\n\\nclass UAnimDataModel : public UObject, public IAnimationDataModel{\\n    TArray<FBoneAnimationTrack> BoneAnimationTracks;\\n    FFrameRate FrameRate; // \u52a8\u753b\u91c7\u6837\u7684\u5e27\u7387\\n    int32 NumberOfFrames; // \u91c7\u6837\u603b\u5e27\u6570\\n    int32 NumberOfKeys; // \u5173\u952e\u5e27\u603b\u6570\\n    FAnimationCurveData CurveData;//\u66f2\u7ebf\u6570\u636e\\n}\\n\\n// \u4e00\u4e2atrack\u5c31\u5bf9\u5e94\u4e00\u4e2abone\u7684transform\u66f2\u7ebf\\nstruct FBoneAnimationTrack{\\n    int32 BoneTreeIndex;\\n    FName Name;\\n    \\n    /*\\n    FRawAnimSequenceTrack\uff1a\\n    TArray<FVector3f> PosKeys;\\n    TArray<FQuat4f> RotKeys;\\n    TArray<FVector3f> ScaleKeys;\\n    */\\n    FRawAnimSequenceTrack InternalTrackData;\\n}\\n\\nstruct FAnimationCurveData{\\n    TArray<FFloatCurve>\\tFloatCurves; // FFloatCurve \u5c31\u662fTArray\u4fdd\u5b58\u7684time/value\uff08float\uff09\\n    TArray<FTransformCurve>\\tTransformCurves; // FTransformCurve \u5c31\u662fTArray\u4fdd\u5b58\u7684time/transform value\uff08float3\uff09\\n}\\n```\\n\\nUAnimSequence\u5b9a\u4e49\u4e86\u4e9b\u989d\u5916\u7684\u7684\u5c5e\u6027\uff0c\u5982\u52a8\u753b\u538b\u7f29\u3001\u63d2\u503c\u65b9\u5f0f\u7b49\\n```cpp\\nclass UAnimSequence : public UAnimSequenceBase{\\n// \u52a8\u753b\u538b\u7f29\u914d\u7f6e\u6587\u4ef6\\nTObjectPtr<class UAnimBoneCompressionSettings> BoneCompressionSettings\uff1b\\nTObjectPtr<class UAnimCurveCompressionSettings> CurveCompressionSettings;\\n\\n// \u88ab\u538b\u7f29\u540e\u7684\u6570\u636e\uff0c\u538b\u7f29\u7684\u65b9\u6cd5\u65e0\u975e\u5c31\u662f\\n// 1. \u7ebf\u6027\u63d2\u503c\u9020\u6210\u7684\u8bef\u5dee\uff08\u8fd9\u4e2a\u8bef\u5dee\u4e00\u822c\u662f\u4f53\u73b0\u5728mesh\u4e0a\u7684\uff0c\u6bd4\u5982\u7ed1\u4e24\u4e2a\u70b9\uff0c\u8ba1\u7b97\u66ff\u6362\u524d\u540e\u8fd9\u4e24\u4e2a\u70b9\u7684compnent space location\uff09\u5728\u4e00\u5b9athreshold\u5185\u7684\uff0c\u53ea\u4fdd\u7559\u9996\u4f4d\u5e27\\n// 2. \u5bf9\u6570\u636e\u8fdb\u884c\u538b\u7f29\uff0c\u6bd4\u5982float\u6269\u5927\u591a\u5c11\u500d\u540e\u538b\u7f29\u6210int8/int16\\nFCompressedAnimSequence CompressedData;\\n\\n// Additive\u52a8\u753b\\nTEnumAsByte<enum EAdditiveAnimationType> AdditiveAnimType; // local space / mesh space\\n\\n// Retargeting\\nFName RetargetSource; //\u91cd\u5b9a\u5411\u7684Base Pose\\n\\n// \u63d2\u503c\u65b9\u5f0f\\nEAnimInterpolationType Interpolation; // linear / step\uff08\u7528\u66f4\u8fd1\u7684\u90a3\u4e2akey\u7684\u503c\uff09\\n\\n// RootMotion\\nbool bEnableRootMotion;\\n}\\n```\\n## UAnimInstance\u548cFAnimInstanceProxy\\nUAnimInstance\u662f\u52a8\u753b\u84dd\u56fe\u7684\u7236\u7c7b\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5316\u7684character\u62e5\u6709\u4e00\u4e2aAnimInstance\u5b9e\u4f8b\u3002\u901a\u8fc7AnimGraph\u5c01\u88c5\u52a8\u753b\u6d41\u7a0b\uff0c\u901a\u8fc7EventGraph\u6216\u5176\u4ed6\u624b\u6bb5\uff08\u6bd4\u5982BlueprintThreadsafeUpdate Function\uff0c \u91cd\u5199NativeThreadSafeUpdateAnimation\u7b49\uff09\u548cActor\u7684\u5176\u4ed6\u7ec4\u4ef6\u4ea4\u4e92\uff08\u6bd4\u5982\u79fb\u52a8\u7ec4\u4ef6\uff09\u3002\\n\\n\u5f3a\u4f9d\u8d56\u4e8eFAnimInstanceProxy\uff0cFAnimInstanceProxy\u4e00\u822c\u4e0d\u6b62\u8fd0\u884c\u5728\u5de5\u4f5c\u7ebf\u7a0b\u3002\\n```cpp\\nstruct UAnimInstance{\\n    TObjectPtr<USkeleton> CurrentSkeleton;\\n\\n    // \u5141\u8bb8AnimInstance\u5c06native update, blend tree, montages \u548c asset players \u653e\u5230\u5de5\u4f5c\u7ebf\u7a0b\u8fdb\u884c\\n    // \u9700\u8981\u540c\u65f6\u8bbe\u7f6eProject Setting\u4e2d\u7684Allow Multi Threaded Animation Update\\"\\n    uint8 bUseMultiThreadedAnimationUpdate : 1; \\n\\n    FAnimInstanceProxy* AnimInstanceProxy\\n}\\n```\\n\\n\u5e2e\u52a9UAnimInstance\u5b9e\u73b0\u52a8\u753b\u7cfb\u7edf\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u662f\u64cd\u4f5c\uff0c\u7ba1\u7406\u52a8\u753b\u8282\u70b9\uff0c\u7ba1\u7406\u52a8\u753b\u8282\u70b9\u7684\u5404\u4e2a\u865a\u51fd\u6570\u8c03\u7528\uff0c\u4ee5\u53ca\u52a8\u753b\u901a\u77e5\u7684\u5904\u7406\uff0c\u6e05\u7406\u6536\u96c6\u52a8\u753b\u901a\u77e5\uff0c\u7136\u540e\u628a\u6536\u96c6\u5230\u7684\u52a8\u753b\u901a\u77e5\u4ea4\u7ed9UAnimInstance\u53bb\u5904\u7406\\nFAnimInstanceProxy\\n```cpp\\n// output pose node\\nFAnimNode_Base* RootNode;\\n\\n// linked instance\\nFAnimNode_LinkedInputPose* DefaultLinkedInstanceInputNode;\\n\\n// \u5f53\u524d\u5e27\u88ab\u89e6\u53d1\u7684Anim Notify\\nTArray<FAnimNotifyEventReference> ActiveAnimNotifiesSinceLastTick;\\n\\n// \u5728gamethread\u4e0a\u6267\u884c\u7684UAnimInstance::PreUpdateAnimation\u8282\u70b9\\nTArray<FAnimNode_Base*> GameThreadPreUpdateNodes;\\n```\\n\\nFAnimNode_Base\u662f\u52a8\u753b\u8282\u70b9\u7684\u57fa\u7c7b\uff0c\u5728\u81ea\u5b9a\u4e49\u8282\u70b9\u7684\u65f6\u5019\u5e38\u5e38\u9700\u8981\u91cd\u5199\u4e00\u4e9b\u865a\u51fd\u6570\\n```cpp\\nclass FAnimNode_Base{\\n\\tENGINE_API virtual void Initialize_AnyThread(const FAnimationInitializeContext& Context);\\n\\tENGINE_API virtual void CacheBones_AnyThread(const FAnimationCacheBonesContext& Context);\\n\\tENGINE_API virtual void Update_AnyThread(const FAnimationUpdateContext& Context);\\n\\tENGINE_API virtual void Evaluate_AnyThread(FPoseContext& Output);\\n\\tENGINE_API virtual void EvaluateComponentSpace_AnyThread(FComponentSpacePoseContext& Output);\\n}\\n```\\n\\n## \u52a8\u753b\u84dd\u56fe\\n\u52a8\u753b\u84dd\u56fe\u7684C++\u7236\u7c7b\u662fAnimInstance\uff0c\u6bcf\u4e00\u4e2aCharacter\u5c06\u4f1a\u62e5\u6709\u4e00\u4e2aAnimInstance\u5b9e\u4f8b\uff0c\u4eceAnimInstance\u5b9e\u4f8b\u4e2d\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u4f7f\u7528\u81ea\u5df1\u7684Character\uff0c\u8fd9\u6837\u597d\u5904\u5c31\u662f\u628a\u52a8\u753b\u76f8\u5173\u7684\u903b\u8f91\uff0c\u62c6\u5206\u5230AnimInstance\u53bb\u505a\u4e86\uff0c\u4f7fCharacter\u4e0d\u4f1a\u8fc7\u4e8e\u590d\u6742\u5e9e\u5927\\n\\n\u52a8\u753b\u84dd\u56fe\uff08AnimInstanceProxy\uff09\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4ee5\u6811\u72b6\u7ed3\u6784\u7ec4\u7ec7\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u662fFAnimNode_Root\uff0c\u521d\u59cb\u5316\u65f6\u5c06\u5b83\u8d4b\u503c\u7ed9RootNode\u3002 RootNode\u867d\u7136\u5b58\u653e\u5728\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\uff0c\u4f46\u5374\u662f\u52a8\u753b\u84dd\u56fe\u7684\u8f93\u51fa\u8282\u70b9(Output Pose)\uff0c\u5176\u4ed6\u8282\u70b9\u90fd\u4ee5\u8f93\u51fa\u9006\u5e8f\u7684\u65b9\u5f0f\u901a\u8fc7FPoseLink(\u5728\u84dd\u56fe\u7f16\u8f91\u5668\u4e2d\u8868\u73b0\u4e3a\u6709Pose\u8fde\u7ebf)\u94fe\u63a5\u6210\u4e00\u9897\u6811\uff0c\u6267\u884c\u65f6\u91c7\u7528\u524d\u5e8f\u9012\u5f52\u904d\u5386\u3002 \u6240\u6709\u8282\u70b9\u5927\u81f4\u5206\u4e3a\uff1a\\n\\n1. \u8d44\u6e90\u64ad\u653e\u5668(\u7ee7\u627f\u81eaFAnimNode_AssetPlayerBase)\uff0c\u76f4\u63a5\u8f93\u51fa\u52a8\u753b\u8d44\u6e90\u3002\\n2. \u6df7\u5408\u7c7b\u8282\u70b9(FAnimNode_.*Blend.*)\u8d1f\u8d23\u786e\u8ba4\u5177\u4f53\u7684\u6df7\u5408\u65b9\u5f0f\u4e0e\u52a8\u753b\u7ed3\u679c\u3002\\n3. \u52a8\u753b\u72b6\u6001\u548c\u72b6\u6001\u673a\u3002\\n4. \u5176\u4ed6\u529f\u80fd\u8282\u70b9\u3002\\n\u5bf9\u4e8e\u6240\u6709\u8282\u70b9\u6765\u8bf4\uff0c\u5177\u4f53\u4f9d\u8d56\u7684\u53c2\u6570\u7684\u8ba1\u7b97\u5728\u51fd\u6570Update_AnyThread\u4e2d\u786e\u5b9a(Time, Weight)\uff0c\u4f9d\u8d56\u7684DeltaTime\u548c\u52a8\u753b\u5b9e\u4f8b\u7b49\u53c2\u6570\u5728FAnimationUpdateContext\u4e2d\u4f20\u9012\u3002\u7136\u540e\u5728\u51fd\u6570Evaluate_AnyThread\u4e2d\u6c42\u89e3\uff0c\u7ed3\u679c\u4fdd\u5b58\u5728FPoseContext\u4e2d\uff0c\u8bed\u4e49\u662f\u5230\u5f53\u524d\u8fd9\u4e2a\u8282\u70b9\u65f6\uff0c\u5e94\u8be5\u8f93\u51fa\u600e\u6837\u7684\u52a8\u753b\u59ff\u52bf\u3001\u66f2\u7ebf\u3001\u5c5e\u6027\u7b49\u3002\\n\\n\u603b\u7684\u6765\u8bf4\uff0cUE\u7684\u52a8\u753b\u7cfb\u7edf\u662f\u628a\u6240\u6709\u64cd\u4f5c\u90fd\u62bd\u8c61\u6210\u5bf9Pose\u7684\u5904\u7406\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u786e\u5b9a\u5982\u4f55\u8f93\u51fa\u5f53\u524d\u89d2\u8272\u7684Pose\u3002\\n\\n### \u52a8\u753b\u84dd\u56fe\u6267\u884c\u6d41\u7a0b\\n*\u603b\u7ed3*\\n\u52a8\u753b\u84dd\u56fe\u5c31\u662f\u4e3a\u4e86\u6df7\u5408\u5404\u4e2aPose\uff0c\u8f93\u51fa\u6700\u7ec8\u7684Pose\uff0c\u6700\u7ec8\u7684OutputPose\u662fAnimGraph\u7684Root\uff0c\u6bcf\u6b21Tick\uff0c\u4f1a\u5148\u5bf9EventGraph\u8fdb\u884cTick\uff0c\u7136\u540e\u4eceRoot\u5f00\u59cbDFS\u904d\u5386\u4e24\u6b21AnimGraph Tree\\n1. \u6267\u884c\u6bcf\u4e2aNode\u7684Update_AnyThread,\u901a\u8fc7\u4f20\u5165\u7236\u8282\u70b9\u7684FAnimUpdateContext\uff0c\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u7684weight\u3010\u7528\u4e8eAnimationInsight\u3001PoseWatch\u7b49\u3011\\n2. \u6267\u884c\u6bcf\u4e2aNode\u7684Evaluate_AnyThread, \u7236\u8282\u70b9\u7528\u5b50\u8282\u70b9Pose\u66f4\u65b0\u81ea\u5df1\u7684Pose\uff0c\u4f20\u9012\u901a\u8fc7FPoseContext\\n\\n\u4ee5PSD\u4e3a\u4f8b\uff0c\u8be5Node\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165Pose\uff0c\u5bf9\u9aa8\u9abcTransform\u8fdb\u884c\u540e\u5904\u7406\u3002\u6839\u636e\u8bfb\u53d6\u7684Config\uff0c\u627e\u5230Skeleton\u91cc\u7684\u6240\u6709Driver Bone\uff0c\u6bcf\u4e2aDriver Bone\u5bf9\u5e94\u4e00\u4e2aPSD\uff0c\u6bcf\u4e2aPSD\u53ef\u4ee5\u6709\u591a\u4e2aDrivenBone\uff0c\u8bb0\u5f55k\u4e2asample\uff0c\u6bcf\u4e2asample\u5305\u62ecDriverBone\u7684Rot\u548cDrivenBone\u7684Transform\u3002\u9996\u5148\u9700\u8981\u8c03\u7528Solver\u8ba1\u7b97\u51fa\uff0c\u5f53\u524dPose\u4e0b\uff08\u8f93\u5165\u7684Pose\uff09\u6bcf\u4e2aSample\u7684\u6743\u91cd\uff0c\u7136\u540e\u628a\u6bcf\u4e2aDrivenBone\u7684Transform\u66f4\u65b0\u4e3aSample\u7684\u6df7\u5408\\n```cpp\\nvoid FAnimNode_XPoseDriver::Update_AnyThread(const FAnimationUpdateContext& Context)\\n{\\n\\tSuper::Update_AnyThread(Context);\\n\\n\\t//EvaluateGraphExposedInputs.Execute(Context);\\n\\n\\tInputPose.Update(Context);\\n}\\n\\nvoid FAnimNode_XPoseDriver::Evaluate_AnyThread(FPoseContext& Output)\\n{\\n\\tFPoseContext dupContext(Output);\\n\\tInputPose.Evaluate(dupContext);\\n\\n\\t// Get the index of the source bone\\n\\tconst FBoneContainer& BoneContainer = dupContext.Pose.GetBoneContainer();\\n\\n\\tDriverBoneTMs.Reset();\\n\\tfor (const FBoneReference& driverBone : DriverBones)\\n\\t{\\n\\t\\tFTransform DriverBoneTM = FTransform::Identity;\\n\\n\\t\\tconst FCompactPoseBoneIndex SourceCompactIndex = driverBone.GetCompactPoseIndex(BoneContainer);\\n\\t\\tif (SourceCompactIndex.GetInt() != INDEX_NONE)\\n\\t\\t{\\n\\t\\t\\tDriverBoneTM = dupContext.Pose[SourceCompactIndex];\\n\\t\\t\\tDriverBoneTMs.Add(driverBone.BoneName.ToString(), DriverBoneTM);\\n\\t\\t}\\n\\t}\\n\\n\\t//blend process\\n\\tfor (auto& elem : BoneToPSDTable)\\n\\t{\\n\\t\\tauto boneName = elem.Key;\\n\\t\\tauto psdNames = elem.Value;\\n\\n\\t\\tauto& tm = DriverBoneTMs[boneName];\\n\\n\\t\\tfor (auto& psdName : psdNames)\\n\\t\\t{\\n\\t\\t\\tauto psd = PSDWorkers[psdName];\\n\\t\\t\\tpsd->Resolve(tm); // solver \u89e3\u7b97\\n\\n\\t\\t\\tauto currentPsdDescription = psd->_desc;\\n\\t\\t\\t//blend driven joints TRS for skeleton psd.\\n\\t\\t\\tif (currentPsdDescription.PsdSolverNodeType == \\"xSolver\\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tfor (auto drivenBoneName : currentPsdDescription.DrivenObjects)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tauto drivenBone = DrivenBones[drivenBoneName];\\n\\n\\t\\t\\t\\t\\tFTransform DrivenBoneTM = FTransform::Identity;\\n\\t\\t\\t\\t\\tconst FCompactPoseBoneIndex SourceCompactIndex = drivenBone.GetCompactPoseIndex(BoneContainer);\\n\\t\\t\\t\\t\\tif (SourceCompactIndex.GetInt() != INDEX_NONE)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tDrivenBoneTM = dupContext.Pose[SourceCompactIndex];\\n\\t\\t\\t\\t\\t\\tFTransform& TargetTransform = Output.Pose[SourceCompactIndex];\\n\\n\\t\\t\\t\\t\\t\\tFVector lOriginalTranslate = DrivenBoneTM.GetTranslation();\\n\\t\\t\\t\\t\\t\\tFVector lOriginalAngle = DrivenBoneTM.GetRotation().Euler();\\n\\t\\t\\t\\t\\t\\tFQuat lOriginalQ = DrivenBoneTM.GetRotation();\\n\\t\\t\\t\\t\\t\\tFVector lOriginalScale = DrivenBoneTM.GetScale3D();\\n\\n\\t\\t\\t\\t\\t\\t//the number of weights must be same as the number of poses.\\n\\t\\t\\t\\t\\t\\tint weightsNum = psd->Weights.Num();\\n\\t\\t\\t\\t\\t\\tint posesNum = currentPsdDescription.Poses.Num();\\n\\n\\t\\t\\t\\t\\t\\tdouble lAllWeights = 0.0;\\n\\n\\t\\t\\t\\t\\t\\tFVector lT(0.0, 0.0, 0.0);\\n\\t\\t\\t\\t\\t\\tFVector lR(0.0, 0.0, 0.0);\\n\\t\\t\\t\\t\\t\\tFVector lS(1.0, 1.0, 1.0);\\n\\n\\t\\t\\t\\t\\t\\tstd::string DebugWeights;\\n\\t\\t\\t\\t\\t\\tfor (auto& elem2 : psd->Weights)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tFString lPoseName = elem2.Key;\\n\\t\\t\\t\\t\\t\\t\\tdouble lWeight = elem2.Value;\\n\\n\\t\\t\\t\\t\\t\\t\\tauto lPose = currentPsdDescription.Poses.Find(lPoseName);\\n\\n\\n\\t\\t\\t\\t\\t\\t\\tauto lDrivenMatrix = lPose->outDrivenLocalMatrixList[drivenBoneName];\\n\\t\\t\\t\\t\\t\\t\\tFMatrix& lMatrix = lDrivenMatrix;\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tFTransform lDrivenTransform(lMatrix);\\n\\t\\t\\t\\t\\t\\t\\tFVector translation = lDrivenTransform.GetTranslation();\\n\\t\\t\\t\\t\\t\\t\\tFVector angles = lDrivenTransform.GetRotation().Euler();\\n\\t\\t\\t\\t\\t\\t\\tFVector scale = lDrivenTransform.GetScale3D();\\n\\n\\t\\t\\t\\t\\t\\t\\tlT.X += (translation.X * lWeight);\\n\\t\\t\\t\\t\\t\\t\\tlT.Y += (translation.Y * lWeight);\\n\\t\\t\\t\\t\\t\\t\\tlT.Z += (translation.Z * lWeight);\\n\\n\\t\\t\\t\\t\\t\\t\\tlR.X += (angles.X * lWeight);\\n\\t\\t\\t\\t\\t\\t\\tlR.Y += (angles.Y * lWeight);\\n\\t\\t\\t\\t\\t\\t\\tlR.Z += (angles.Z * lWeight);\\n\\t\\t\\t\\t\\t\\t\\t\\n\\n\\t\\t\\t\\t\\t\\t\\tlS.X *= ((scale.X - 1) * lWeight + 1);\\n\\t\\t\\t\\t\\t\\t\\tlS.Y *= ((scale.Y - 1) * lWeight + 1);\\n\\t\\t\\t\\t\\t\\t\\tlS.Z *= ((scale.Z - 1) * lWeight + 1);\\n\\n\\t\\t\\t\\t\\t\\t\\tlAllWeights += lWeight;\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t//convert Maya translate to UE translate\\n\\t\\t\\t\\t\\t\\tTargetTransform.SetTranslation(FVector(lT.X, -lT.Y, lT.Z));\\n\\n\\n\\t\\t\\t\\t\\t\\tdouble lRx = lR.X;\\n\\t\\t\\t\\t\\t\\tdouble lRy = lR.Y;\\n\\t\\t\\t\\t\\t\\tdouble lRz = lR.Z;\\n\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tauto lJointOrient = currentPsdDescription.DrivenJointOrientList[drivenBoneName];\\n\\t\\t\\t\\t\\t\\tdouble lOx = lJointOrient.X;\\n\\t\\t\\t\\t\\t\\tdouble lOy = lJointOrient.Y;\\n\\t\\t\\t\\t\\t\\tdouble lOz = lJointOrient.Z;\\n\\n\\t\\t\\t\\t\\t\\tauto A = FRotator(-lOy, -lOz, lOx);\\n\\t\\t\\t\\t\\t\\tauto B = FRotator(lR.Y, -lR.Z, lR.X);\\n\\t\\t\\t\\t\\t\\tFQuat jointOrientQ = FQuat(A);\\n\\t\\t\\t\\t\\t\\tFQuat jointRotateQ = FQuat(B);\\n\\t\\t\\t\\t\\t\\tFQuat lRotateQ =  jointOrientQ * jointRotateQ;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif (!lRotateQ.IsNormalized())\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tlRotateQ.Normalize();\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tTargetTransform.SetRotation(lRotateQ);\\n\\t\\t\\t\\t\\t\\tTargetTransform.SetScale3D(lS);\\n\\t\\t\\t\\t\\t} // if SourceCompactIndex\\n\\t\\t\\t\\t} //for drivenBoneName\\n\\t\\t\\t} // if xSolver\\n\\t\\t} // for psdName\\n\\t} // for elem\\n}\\n\\n```\\n\\n\\n\u6d4b\u8bd5\u7528\u4f8b\\n![alt text](images/image-7.png)\\nrewind\u4e2d\u53ef\u4ee5\u67e5\u770b\u5230\u4e09\u6bb5sequence\u7684blend\u6bd4\u4f8b\u5206\u522b\u4e3awalk_fwd = 0.5\uff0cjump = 0.5\uff0cequip = 0.25\\n![alt text](images/image-8.png)\\n![alt text](images/image-9.png)\\n\\n\\n[\u6d41\u7a0b\u56fe](https://app.diagrams.net/#G1EZSfyheX2nfUPK2aAwKCHdAC8rQk3T74#%7B%22pageId%22%3A%22IAjTh5yaLsgbAQ9wG9K3%22%7D)\\n![alt text](images/rewind.jpg)\\nUAnimInstance::PreUpdateAnimation\u4f1a\u8c03\u7528FAnimInstanceProxy\u7684\u51fd\u6570`GetProxyOnGameThread<FAnimInstanceProxy>().PreUpdate(this, DeltaSeconds);`,\u5176\u4e2d\u4f1a\u6267\u884c\\n```cpp\\nfor (FAnimNode_Base* Node : GameThreadPreUpdateNodes)\\n{\\n    Node->PreUpdate(InAnimInstance);\\n}\\n```\\n\\nUAnimInstance::ParallelUpdateAnimation\u4f1a\u8c03\u7528`GetProxyOnAnyThread<FAnimInstanceProxy>().UpdateAnimation();`\\n\u6ce8\u610f\u7eff\u6846\u4e2d\u7684\u90e8\u5206\uff0c\u5728ABP\u9884\u89c8\u72b6\u6001\u65f6\u4f1a\u6267\u884c\uff0c\u4f46\u5728runtime\u4e00\u822c\u4e0d\u4f1a\u6267\u884c\uff0c\u800c\u662f\u7559\u5230`USkeletalMeshComponent::RefreshBoneTransform`\u4e2d,\u5206\u53d1\u5230\u5de5\u4f5c\u7ebf\u7a0b\u6267\u884c\u3002\\n\\nFAnimInstanceProxy::ParallelUpdate\u662f\u52a8\u753bAnimGraph\u6267\u884c\u7684\u6838\u5fc3\u90e8\u5206\\n```cpp\\nvoid FAnimInstanceProxy::UpdateAnimation(){\\n    // \u9996\u5148\u5bf9root\uff08outputpose\uff09\u6267\u884c\\n    UpdateAnimation_WithRoot(Context, RootNode, NAME_AnimGraph);\\n\\n    // \u7ebf\u7a0b\u5b89\u5168\u66f4\u65b0\u51fd\u6570\uff08native\u548c\u84dd\u56fe\u4e2d\u5b9a\u4e49\u7684\uff09\\n    // UAnimInstance::NativeThreadSafeUpdateAnimation\u4e00\u822c\u4f1a\u5728\u81ea\u5df1\u7ee7\u627fAnimInstance\u7684cpp\u7c7b\u4e2doverwrite\\n    NativeThreadSafeUpdateAnimation();\\n    BlueprintThreadSafeUpdateAnimation();\\n}\\n```\\n`FAnimNode_Base::Update_AnyThread`\u4f1a\u4eceroot\u8fdb\u53bb\u904d\u5386\u6bcf\u4e2anode\u6267\u884c\uff0c\u901a\u8fc7FPoseLinkBase\u627e\u5230\u94fe\u63a5\u5230\u5f53\u524dnode\u7684\u5b50\u8282\u70b9\uff08\u6811\u7684\u5b50\u8282\u70b9\uff0c\u5176\u5b9e\u662fanimgraph\u7684\u4e0a\u6e38\u8282\u70b9\uff09\u3002\u5177\u4f53\u5b9e\u73b0\u5728`FPoseLinkBase::Update`\u4e2d\\n![alt text](images/image-27.png)\\n\\n\u7136\u540eEvaluate_AnyThread\u4e5f\u662f\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002\\n\\n### \u5206\u53d1\u5230\u5de5\u4f5c\u7ebf\u7a0b\u7684\u65b9\u5f0f\\n\\n### \u4e3e\u4f8b\u51e0\u4e2aAnimNode\\n#### FAnimNode_TwoBoneIK\\n#### FAnimNode_SequencePlayer\\n#### \u81ea\u5b9a\u4e49 FAnimNode_PSD\\n\\n### Fast Path\\n\u4e0b\u56fe\u4e2d1\u30012\u5747\u652f\u6301Fast Path\uff0c \u5b98\u65b9\u6587\u6863\u5199\u7740\uff1a\u8bfb\u6210\u5458\u53d8\u91cf\u3001\u5bf9\u7ed3\u6784\u4f53\u6210\u5458\u53d8\u91cf\u8fdb\u884cbreak\u64cd\u4f5c\u4ee5\u53caBool Not\u64cd\u4f5c\u4f9d\u7136\u652f\u6301Fast Path\uff0c\u800c\u5176\u4ed6\u6570\u503c\u8fd0\u7b97\u4e0d\u652f\u6301Fast Path\uff08\u56fe\u4e09\uff09\u3002\\n![alt text](images/image-10.png)\\n![alt text](images/image-11.png)\\n![alt text](images/image-12.png)\\n\\n**\u4ec0\u4e48\u662fFast Path**\\n\u4f7f\u7528FastPath\uff0c\u5f15\u64ce\u5c31\u53ef\u4ee5\u5728\u5185\u90e8\u590d\u5236\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u6267\u884c\u84dd\u56fe\u4ee3\u7801\uff0c\u540e\u8005\u9700\u8981\u8c03\u7528\u84dd\u56fe\u865a\u62df\u673a\u5728runtime\u5bf9\u7f16\u8bd1\u7684\u84dd\u56fe\u5b57\u8282\u7801\u8fdb\u884c\u89e3\u91ca\uff0c\u6d4b\u901f\u9a8c\u8bc1\u7ed3\u679c\u5982\u4e0b\u3002\\n![alt text](images/image-14.png)\\n![alt text](images/image-15.png)\\n![alt text](images/image-13.png)\\n\\n* graph-1  13 + 47\\n* graph-2  13 + 52\\n* graph-3  13 + 61\\n\\n\\n\\n\\n# Reference\\n* [addtive\u52a8\u753b cocos](https://docs.cocos.com/creator/3.8/manual/en/animation/marionette/additive-animation/)\\n* [addtive\u52a8\u753b \u535a\u5ba2](https://docs.unrealengine.com/4.27/en-US/AnimatingObjects/SkeletalMeshAnimation/AimOffset/)\\n* [addtive\u52a8\u753b UE4](https://docs.unrealengine.com/4.27/en-US/AnimatingObjects/SkeletalMeshAnimation/AimOffset/)\\n* [UE5\u5b98\u65b9\u6587\u6863 \u52a8\u753b\u4f18\u5316](https://dev.epicgames.com/documentation/zh-cn/unreal-engine/animation-optimization-in-unreal-engine)"},{"id":"/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1","metadata":{"permalink":"/blog/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1.md","source":"@site/blog/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1.md","title":"UE\u7c7b\u578b\u7cfb\u7edf","description":"\u95ee\u9898\u5f15\u5165","date":"2024-07-07T18:07:01.000Z","formattedDate":"July 7, 2024","tags":[{"label":"UE","permalink":"/blog/tags/ue"}],"readingTime":2.22,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"UE\u7c7b\u578b\u7cfb\u7edf","tags":["UE"]},"prevItem":{"title":"UE\u52a8\u753b\u6a21\u5757\u6d45\u6790","permalink":"/blog/Unreal/UE\u52a8\u753b\u6a21\u5757\u6d45\u6790/1"},"nextItem":{"title":"\u6d45\u6790ECS\u67b6\u6784","permalink":"/blog/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS"}},"content":"\x3c!--truncate--\x3e\\n## \u95ee\u9898\u5f15\u5165\\n\u5de5\u4f5c\u4e2d\u9047\u5230\u4e00\u4e2a\u5de5\u5177\u94fe\u4efb\u52a1\uff0c\u9700\u8981\u628a\u4e00\u4e9b\u84dd\u56fe\u7684\u5c5e\u6027\u503c\uff0c\u590d\u5236\u5230\u5bf9\u5e94\u540d\u79f0\u7684\u81ea\u5b9a\u4e49DataAsset\u4e2d\uff0c\u5728\u83b7\u53d6\u84dd\u56fe\u8d44\u6e90\u540e\u62ff\u5230\u4e86`UBlueprint* BP`,\u7136\u540e\u904d\u5386Copy\u4ed6\u7684\u5c5e\u6027\uff0c\\n```cpp\\nfor (TFieldIterator<FProperty> PropIt(BP->GenerateClass); PropIt; ++PropIt)\\n{\\n    FProperty* Property = *PropIt;\\n    FProperty* DataAssetProperty = FindFProperty<FProperty>(DataAssetClass, Property->GetFName());\\n    if (DataAssetProperty)\\n    {\\n        // Copy the value from the blueprint property to the DataAsset property\\n        void* BlueprintPropertyValue = Property->ContainerPtrToValuePtr<void>(BP);\\n        void* DataAssetPropertyValue = DataAssetProperty->ContainerPtrToValuePtr<void>(DataAssetInstance);\\n        Property->CopyCompleteValue(DataAssetPropertyValue, BlueprintPropertyValue);\\n    }\\n}\\n```\\n\u6b64\u65f6\u4f1a\u5d29\u6e83\uff0cdebug\u53d1\u73b0ContainerPtrToValuePtr\u4e2dAssert Error\uff0c\\n![alt text](images/image-2.png)\\n\\n\u6700\u7ec8\u5b9a\u4f4d\u5230\u95ee\u9898\u6240\u5728\\n`UBlueprint* BP`\u662f\u4e2a\u8d44\u4ea7\u7c7b\uff0c\u4ed6\u53ef\u80fd\u7ee7\u627f\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\u6bd4\u5982`UWeapon`, \u6b64\u65f6`BP->GenerateClass()`\u5f97\u5230\u7684\u662f\u8fd9\u4e2a\u84dd\u56fe\u751f\u6210\u7684cpp\u7c7b\uff0cName\u4e3a\\"BlueprintName_C\\"\uff0c\u904d\u5386\u8fd9\u4e2a\u7c7b\u5f97\u5230\u5c5e\u6027`FProperty* Property = TFieldIterator<FProperty> PropIt(BP->GenerateClass)`\uff0c \u6b64\u65f6`Property->GetOwner<UClass>()`\u7684Name\u4e3a\u84dd\u56fe\u771f\u6b63\u7ee7\u627f\u7684\u7c7b`UWeapon`\uff0c\u800c`BP->GetClass()`\u5c31\u662f\\"Blueprint\\".\u4e24\u8005\u81ea\u7136\u4e0d\u662f`IsA`\u5173\u7cfb\u3002\u53ea\u6709\u5728\u84dd\u56feBP\u88ab\u771f\u6b63\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u8f6c\u4e3a\u84dd\u56fe\u7ee7\u627f\u7684\u90a3\u4e2a\u7c7b`UWeapon`\u3002\\n\\n\u56e0\u6b64\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316\\n```cpp\\nUClass* BlueprintClass = InBluerprint->GeneratedClass;\\nUObject* BlueprintInstance = NewObject<UObject>(GetTransientPackage(), BlueprintClass);\\n```\\n\u5b8c\u6574\u7684\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\\n\\n```cpp\\nvoid UTraceAnimInstance::TestTypeSystem(UBlueprint* InBluerprint)\\n{\\n\\tif(!InBluerprint) return;\\n\\tFString PropertyName, PropertyOuterName;\\n\\tUClass* BlueprintClass = InBluerprint->GeneratedClass;\\n\\tUObject* BlueprintInstance = NewObject<UObject>(GetTransientPackage(), BlueprintClass);\\n\\tif (!BlueprintInstance) return;\\n\\n\\tFString BPName = BlueprintInstance->GetName();\\n\\tFString ClassName = BlueprintInstance->GetClass()->GetName();\\n\\n\\tfor (TFieldIterator<FProperty> PropIt(BlueprintClass); PropIt; ++PropIt)\\n\\t{\\n\\t\\tFProperty* Property = *PropIt;\\n\\t\\tif (Property)\\n\\t\\t{\\n\\t\\t\\tPropertyName = Property->GetName();\\n\\t\\t\\tPropertyOuterName = Property->GetOwner<UClass>()->GetName();\\n\\t\\t\\tif(PropertyName == FString(\\"First\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvoid* BlueprintPropertyValue = Property->ContainerPtrToValuePtr<void>(BlueprintInstance, 0);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t} \\n\\t\\t}\\n\\t}\\n\\tFString LogStr = FString::Printf(TEXT(\\"BPName: \'%s\', BPClassName: \'%s\', PropertyName: \'%s\', PropertyOuterName: \'%s\'\\"),\\n\\t\\t*BPName,*ClassName, *PropertyName, *PropertyOuterName);\\n\\tUE_LOG(LogTemp, Log, TEXT(\\"%s\\"), *LogStr);\\n\\t// GEngine->AddOnScreenDebugMessage(-1, 60.f, FColor::Yellow, Log);\\n}\\n```\\n\\n\u6211\u4eec\u8fd8\u9700\u8981\u601d\u8003\u4e00\u4e9b\u5176\u4ed6\u7684\u95ee\u9898\uff1a\\n* GetClass()\\n* GetOwner()\\n* IsA()\\n* GetName()\\n\u8fd9\u4e9b\u51fd\u6570\u6765\u81ea\u54ea\u4e9b\u7c7b\uff0c\u4ed6\u4eec\u7684\u76f8\u4e92\u5173\u7cfb\u662f\u4ec0\u4e48\uff0c\u8fd9\u5c31\u662fUE\u7684\u7c7b\u578b\u7cfb\u7edf\u7684\u5185\u5bb9\u3002\\n\\n## \u7c7b\u578b\u7cfb\u7edf\u7ed3\u6784\\nUE5\u7684\u65f6\u5019\u5bf9UE4\u7684\u7cfb\u7edf\u7ed3\u6784\u8fdb\u884c\u4e86\u5927\u6539\uff0c\u5206\u5f00\u6765\u770b\\n### UE4"},{"id":"/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS","metadata":{"permalink":"/blog/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS.md","source":"@site/blog/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS.md","title":"\u6d45\u6790ECS\u67b6\u6784","description":"\u9879\u76ee\u94fe\u63a5","date":"2023-12-02T07:05:55.000Z","formattedDate":"December 2, 2023","tags":[{"label":"\u6742\u8c08","permalink":"/blog/tags/\u6742\u8c08"}],"readingTime":2.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u6d45\u6790ECS\u67b6\u6784","tags":["\u6742\u8c08"]},"prevItem":{"title":"UE\u7c7b\u578b\u7cfb\u7edf","permalink":"/blog/Unreal/UE\u7c7b\u578b\u7cfb\u7edf/1"},"nextItem":{"title":"Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3","permalink":"/blog/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1"}},"content":"\x3c!--truncate--\x3e\\n[\u9879\u76ee\u94fe\u63a5](https://github.com/CanoeByGuitar/ECS-Template)\\n\\n## Introduce\\n\u6bcf\u4e2aEntiry\u6302\u8f7d\u4e00\u4e9bComponent\uff0c\u6bcf\u6b21Tick\u7684\u65f6\u5019\u5bf9Component\u8fdb\u884cTick\u5c31\u53ef\u4ee5\u4e86\u3002\\n\\n\u6bd4\u5982\u8bf4\u573a\u666f\u91cc\u7684Entity\u53ef\u4ee5\u6302\u6709MeshRenderComponent\u3001TransformComponent\u3001CameraComponent. \u6bcf\u4e2aComponent\u4e0a\u90fd\u4f1a\u5b58\u4e00\u4e9b\u6570\u636e\uff0c\u6bd4\u5982RenderComponent\u91cc\u4f1a\u6709\u6a21\u578b\u6570\u636e\uff08Vertices\u3001Normals\u7b49\uff09\u548cVBO\u3001VAO\u7d22\u5f15\uff1b\u6bcf\u4e2aCameraComponent\u91cc\u4f1a\u6709fov\u3001lookat\u65b9\u5411\u7b49\u53c2\u6570\u3002\\n\\n\u5728\u6bcf\u6b21Tick\u65f6\uff0c\u8fd9\u4e9b\u53c2\u6570\u90fd\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u6709\u4e24\u79cd\u6570\u636e\u5b58\u50a8/\u904d\u5386Tick\u65b9\u5f0f\uff1a\\n* SOA\uff1a\u4e00\u4e2aEntity\u7684\u6240\u6709Component\u6570\u636e\u5b58\u5728\u4e00\u8d77\uff0c\u4e00\u6b21Tick\u904d\u5386\u6240\u6709Entity\uff0c\u4f9d\u6b21Tick\u6bcf\u4e2aEntity\u5168\u90e8\u7684Component\\n* AOS\uff1a \u628a\u540c\u4e00\u7c7b\u7684Component\u5b58\u5728\u4e00\u8d77\uff0c\u4e00\u6b21Tick\uff0c\u4f9d\u6b21Tick\u6240\u6709Compoent\uff0c\u6bd4\u5982\u5148Tick\u6240\u6709Transform\uff0c\u5728Tick\u6240\u6709Render...\\n\\n\u9009\u62e9AOS\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u66f4\u597d\uff0cCache miss\u66f4\u5c11\\n\\n\u5728\u5185\u5b58\u4e2d\u9700\u8981\u5b58\u4e9b\u4ec0\u4e48\uff1f\\n\\n* EntityManager\u4e0d\u7528\u5b58\u50a8\u4efb\u4f55\u5b9e\u9645\u4fe1\u606f\uff08\u56e0\u4e3a\u6240\u6709\u4fe1\u606f\u90fd\u5199\u5728Component\u91cc\uff09\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u751f\u547d\u5468\u671f\u5185\u7684Eid\u96c6\u5408LiveEntitySet\u548c\u53ef\u7528\u7684Eid\u961f\u5217AvailableEidQueue\uff0c\u5f53\u9700\u8981\u521b\u5efa\u4e00\u4e2aEntity\u7684\u65f6\u5019\u53d6AvailableEidQueue\u7684\u961f\u5934head\uff0c\u521b\u5efa\u5b9e\u4f53\uff08Component\u6c60\u5b50\u91cc\u589e\u52a0\u65b0\u7684\u6570\u636e\uff09\uff0c\u7136\u540e\u628ahead\u52a0\u5165LiveEntitySet\\n* ComponentManager\uff0c\u6309\u79cd\u7c7b\u4f9d\u6b21\u5b58\u50a8\u6240\u6709\u7684Component\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2aMap\uff1aName --\x3e Array\u6765\u5b9e\u73b0, \u6bcf\u4e2aArray\u9664\u4e86data\u672c\u8eab\uff0c\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2aMapEidToCid\u548cMapCidToEid\uff0c\u5728\u52a0\u5165\u65b0\u7684Component\u65f6\uff0c\u52a0\u5165\u5230data\u5230\u5c3e\u90e8\uff0c\u800c\u5220\u9664\u4e00\u4e2aEntity\u65f6\uff0c\u628aEid\u5bf9\u5e94\u7684Cid\u5220\u6389\u4f1a\u5bfc\u81f4o(n)\u7684\u5f00\u9500\uff08\u540e\u9762\u7684Component\u8981\u524d\u79fb\uff09\uff0c\u6240\u4ee5\u91c7\u53d6\u628a\u5220\u6389\u7684\u90a3\u4e2a\u4f4d\u7f6e\u7528\u5c3e\u90e8Component\u6765\u4ee3\u66ff\u3002\\n\\n\\n\\n## \u6d45\u6790ECS\u67b6\u6784\\nTODO\\n\\n## \u6027\u80fd\u6d4b\u8bd5\uff08vulgrind\uff09\\n```\\n==34347== I refs:        1,846,865,683\\n==34347== I1  misses:            2,382\\n==34347== LLi misses:            2,200\\n==34347== I1  miss rate:          0.00%\\n==34347== LLi miss rate:          0.00%\\n==34347== \\n==34347== D refs:          763,562,223  (507,107,313 rd   + 256,454,910 wr)\\n==34347== D1  misses:       12,871,245  ( 12,347,581 rd   +     523,664 wr)\\n==34347== LLd misses:           39,315  (      7,755 rd   +      31,560 wr)\\n==34347== D1  miss rate:           1.7% (        2.4%     +         0.2%  )\\n==34347== LLd miss rate:           0.0% (        0.0%     +         0.0%  )\\n==34347== \\n==34347== LL refs:          12,873,627  ( 12,349,963 rd   +     523,664 wr)\\n==34347== LL misses:            41,515  (      9,955 rd   +      31,560 wr)\\n==34347== LL miss rate:            0.0% (        0.0%     +         0.0%  )\\n\\n```"},{"id":"/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1","metadata":{"permalink":"/blog/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1.md","source":"@site/blog/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1.md","title":"Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3","description":"shared_ptr","date":"2023-12-02T06:34:46.000Z","formattedDate":"December 2, 2023","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":3.17,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3","tags":["C++"]},"prevItem":{"title":"\u6d45\u6790ECS\u67b6\u6784","permalink":"/blog/\u6742\u8c08/\u6d45\u6790ECS\u67b6\u6784/ECS"},"nextItem":{"title":"\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b","permalink":"/blog/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1"}},"content":"\x3c!--truncate--\x3e\\n## shared_ptr\\n\\n```cpp\\n//\\n// Created by \u738b\u6668\u8f89 on 2023/8/7.\\n//\\n\\n#include <iostream>\\n\\n#define LINE std::cout << \\"\\\\n*************************************\\\\n\\" << std::endl;\\n#define BLOCK(x)  std::cout << \\"\\\\n\\\\n\\\\n********** \\" <<#x << \\" ********* \\\\n\\\\n\\\\n\\";\\n#define Print(x) std::cout << #x << \\"  cnt : \\" << x.use_count() << \\"  value: \\"<< *x << std::endl;\\n\\n\\nnamespace MySharedPtr {\\n    template<typename T>\\n    class shared_ptr {\\n    public:\\n        // ctor\\n        explicit shared_ptr(T* objPtr);\\n\\n        // dtor\\n        ~shared_ptr();\\n\\n        // copy ctor\\n        shared_ptr(const shared_ptr& other);\\n\\n        // copy assignment\\n        shared_ptr& operator=(const shared_ptr& other);\\n\\n        // dereference\\n        T operator*(){return *m_data;};\\n\\n        // count\\n        int use_count(){return *m_cnt;};\\n\\n        // get\\n        T* get(){return m_data;};\\n\\n    private:\\n        T *m_data;\\n        int *m_cnt;\\n    };\\n\\n    template<typename T, typename... Args>\\n    shared_ptr<T> make_shared(Args&&... args){\\n        return shared_ptr<T>(new T(std::forward<Args>(args)...));\\n    }\\n}\\n\\nint main() {\\n    {// std\\n        using std::shared_ptr;\\n        using std::make_shared;\\n\\n        shared_ptr<int> a(new int(10));\\n        Print(a)  // 1 10\\n\\n//        int raw = 1; // \u4e0d\u8981\u628a\u6808\u91cc\u53d8\u91cf\u7684\u5730\u5740\u7ed9shared_ptr\\n        int* raw = new int(1);\\n        shared_ptr<int> b(raw);\\n        Print(b) // 1 1\\n\\n        auto c = make_shared<int>(10);\\n        Print(c) // 1 10\\n\\n        auto d = make_shared<int>(*raw);\\n        Print(d) // 1 1\\n\\n        // copy construct / copy assignment\\n        auto e = d; // \u6d45\u62f7\u8d1d\\n        Print(e)  // 2 1\\n        shared_ptr<int> g(e); // \u6d45\u62f7\u8d1d\\n        Print(g)  // 3 1\\n        auto f = make_shared<int>(*d); // \u6df1\u62f7\u8d1d\\n        Print(f)  // 1 1\\n\\n        // dereference\\n        auto pa = a.get();\\n        std::cout << *pa << std::endl; // 10\\n        *pa = 2;\\n        std::cout << *a << std::endl; // 2\\n    }\\n\\n    LINE;\\n\\n    {// MySharedPtr\\n        using MySharedPtr::shared_ptr;\\n        using MySharedPtr::make_shared;\\n\\n        shared_ptr<int> a(new int(10));\\n        Print(a)  // 1 10\\n\\n//        int raw = 1; // \u4e0d\u8981\u628a\u6808\u91cc\u53d8\u91cf\u7684\u5730\u5740\u7ed9shared_ptr\\n        int* raw = new int(1);\\n        shared_ptr<int> b(raw);\\n        Print(b) // 1 1\\n\\n        auto c = make_shared<int>(10);\\n        Print(c) // 1 10\\n\\n        auto d = make_shared<int>(*raw);\\n        Print(d) // 1 1\\n\\n        // copy construct / copy assignment\\n        auto e = d; // \u6d45\u62f7\u8d1d\\n        Print(e)  // 2 1\\n        shared_ptr<int> g(e); // \u6d45\u62f7\u8d1d\\n        Print(g)  // 3 1\\n        auto f = make_shared<int>(*d); // \u6df1\u62f7\u8d1d\\n        Print(f)  // 1 1\\n\\n        // dereference\\n        auto pa = a.get();\\n        std::cout << *pa << std::endl; // 10\\n        *pa = 2;\\n        std::cout << *a << std::endl; // 2\\n    }\\n\\n\\n\\n}\\n\\n\\ntemplate<typename T>\\nMySharedPtr::shared_ptr<T>::shared_ptr(T* obj)\\n:m_data(obj), m_cnt(new int(1))\\n{}\\n\\ntemplate<typename T>\\nMySharedPtr::shared_ptr<T>::~shared_ptr(){\\n    (*m_cnt)--;\\n    if(*m_cnt == 0){\\n        delete m_data;\\n        delete m_cnt;\\n    }\\n}\\n\\ntemplate<typename T>\\nMySharedPtr::shared_ptr<T>::shared_ptr(const shared_ptr<T> &other) {\\n    m_data = other.m_data;\\n    m_cnt = other.m_cnt;\\n    (*m_cnt)++;\\n}\\n\\ntemplate<typename T>\\nMySharedPtr::shared_ptr<T>& MySharedPtr::shared_ptr<T>::operator=(const MySharedPtr::shared_ptr<T>& other) {\\n    if(this == &other) return *this;\\n    (*m_cnt)--;\\n    if(*m_cnt == 0){\\n        delete m_cnt;\\n        delete m_data;\\n    }\\n    m_data = other.m_data;\\n    m_cnt = other.cnt;\\n    *(m_cnt)++;\\n}\\n```\\n\\n## unique_ptr\\n\\n\u53ea\u652f\u6301\u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\\n\\n```cpp\\n//\\n// Created by \u738b\u6668\u8f89 on 2023/8/11.\\n//\\n//\\n// Created by \u738b\u6668\u8f89 on 2023/8/7.\\n//\\n\\n#include <iostream>\\n#include <memory>\\n\\n#define LINE std::cout << \\"\\\\n*************************************\\\\n\\" << std::endl;\\n#define BLOCK(x)  std::cout << \\"\\\\n\\\\n\\\\n********** \\" <<#x << \\" ********* \\\\n\\\\n\\\\n\\";\\n\\n\\n\\nnamespace MyUniquePtr{\\n    template<typename T>\\n    class unique_ptr{\\n    private:\\n        T* m_data;\\n\\n    public:\\n        unique_ptr(T* p = nullptr):m_data(p){}\\n        unique_ptr(const unique_ptr<T>&) = delete;\\n        unique_ptr& operator=(const unique_ptr<T>&)  = delete;\\n        unique_ptr(unique_ptr<T>&& other):m_data(other){\\n            other.ptr = nullptr;\\n        }\\n        unique_ptr& operator=(unique_ptr<T>&& other) noexcept {\\n            if(this == &other){\\n                return *this;\\n            }\\n            delete m_data;\\n            m_data = other.m_data;\\n            other.m_data = nullptr;\\n            return *this;\\n        }\\n        ~unique_ptr(){delete m_data;}\\n        T* get() const {return m_data;}\\n    };\\n}\\n\\n\\nstd::unique_ptr<int> pass_through(std::unique_ptr<int> p){\\n    return p;\\n}\\n\\nint main() {\\n    {// std\\n        using std::shared_ptr;\\n        using std::unique_ptr;\\n        using std::make_shared;\\n        using std::make_unique;\\n\\n        unique_ptr<int> p = std::make_unique<int>(1);\\n//        unique_ptr<int> q = pass_through(p); // error unique_ptr has no copy ctor\\n        unique_ptr<int> q1 = std::move(p);  // it has only move ctor\\n//        unique_ptr<int> q2(std::move(p)); // move ctor  but error for p has pass the ownership to q1\\n        unique_ptr<int> q3(std::move(q1));\\n        std::cout << *q3 << std::endl;\\n\\n        unique_ptr<int> w = std::make_unique<int>(1);\\n        q3 = std::move(w);  // move assignment\\n        std::cout << *q3  << std::endl;\\n\\n    }\\n\\n    LINE;\\n\\n\\n}\\n\\n```"},{"id":"/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1","metadata":{"permalink":"/blog/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1.md","source":"@site/blog/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1.md","title":"\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b","description":"\u4e3a\u4ec0\u4e48\u9700\u8981\u79fb\u52a8\u8bed\u4e49","date":"2023-12-02T06:34:46.000Z","formattedDate":"December 2, 2023","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":5.415,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b","tags":["C++"]},"prevItem":{"title":"Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3","permalink":"/blog/C++/Cpp\u548cUE\u667a\u80fd\u6307\u9488\u8be6\u89e3/1"},"nextItem":{"title":"\u7f16\u8bd1\u548c\u94fe\u63a5","permalink":"/blog/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93"}},"content":"\x3c!--truncate--\x3e\\n\\n## \u4e3a\u4ec0\u4e48\u9700\u8981\u79fb\u52a8\u8bed\u4e49\\n\u5bf9\u4e8e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\uff0c\u8be5\u7c7b\u62e5\u6709\u4e00\u4e9b\u8d44\u6e90\uff0c\u6bd4\u5982\u5806\u4e2d\u7684\u8fde\u7eed\u6570\u636e\\n```cpp\\nstruct Vec {\\n    Vec(int size):\\n    size(size),\\n    data(new int[size])\\n    {}\\n\\n    ~Vec(){delete[] data;}\\n    \\n    Vec(const Vec& v) {\\n        size = v.size;\\n        data = new int[size];\\n        memcpy(data, v.data, size);\\n    }\\n\\n    Vec& operator=(const Vec& v) {\\n        if(this == &v) return *this;\\n        size = v.size();\\n        delete[] data;\\n        data = new int[size];\\n        memcpy(data, v.data, size);\\n        return *this;\\n    }\\n\\n    int* data;\\n    int size;\\n};\\n```\\n\u8fd9\u4e2a\u7c7b\u7684\u8bed\u4e49\u662f\u638c\u7ba1\u4e86\u4e00\u4efd\u8d44\u6e90\uff0c\u8fd9\u4e2a\u8d44\u6e90\u53ef\u4ee5\u6df1\u62f7\u8d1d\u7ed9\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u6bcf\u4e2a\u5bf9\u8c61\u62e5\u6709\u7684\u8d44\u6e90\u662f\u4e0d\u540c\u4e14\u552f\u4e00\u7684\uff0c\u4e0d\u53ef\u5171\u4eab\u3002\\n\\n\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u8fd9\u79cd\u8bed\u4e49\u662fOK\u7684\uff0c\u4f46\u5728\u67d0\u4e9b\u9700\u6c42\u4e0b\u5e0c\u671b\u4e00\u4e2a\u5bf9\u8c61\u7684\u8d44\u6e90\u7684\u6240\u6709\u6743\u662f\u53ef\u4ee5\u8f6c\u79fb\u7ed9\u522b\u4eba\u7684\uff0c\u8f6c\u79fb\u4e86\u4e4b\u540e\u81ea\u5df1\u5c31\u4e0d\u518d\u62e5\u6709\u8fd9\u4efd\u8d44\u6e90\u3002\\n\\n\u90a3\u4e48\u5c31\u5e94\u5f53\u8fd9\u6837\u5b9e\u73b0\u62f7\u8d1d\u548c\u8d4b\u503c\\n```cpp\\nVec(Vec-Type v) {\\n    size = v.size;\\n    data = v.data;\\n    v.data = nullptr;\\n    v.size = 0;\\n}\\n\\nVec& operator=(Vec-Type v) {\\n    if(this == &v) return *this;\\n    delete[] data;\\n    size = v.size();\\n    data = v.data;\\n    v.data = nullptr;\\n    v.size = 0;\\n    return *this;\\n}\\n```\\n\u6b64\u5904\u7684Vec-Type\u7528\u4e8e\u533a\u522bconst Vec&, \u8fd9\u6837\u5c31\u80fd\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u6765\u51b3\u5b9a\u8c03\u7528\u62f7\u8d1d\u8fd8\u662f\u79fb\u52a8\u3002\\n\\n\u5728c++11\u524d\uff0c\u4e00\u822c\u4f7f\u7528Boost\u4e2drvref\u6765\u5b9e\u73b0\\n```cpp\\ntemplate<typename T>\\nstruct Boost_rvref {\\n  T& ref;\\n};\\n\\ntemplate<typename T>\\nBoost_rvref<T> move(const T& in) {\\n  return in;\\n}\\n\\nVec(Boost_rvref<Vec> v) {\\n  size = v.ref.size;\\n  data = new int[size];\\n  memcpy(data, v.ref.data, size);\\n}\\n\\nVec a(3);\\nVec b(move(a));\\n``` \\n\u786e\u5b9a\u662f\u9700\u8981\u66f4\u591a\u7684\u4f7f\u7528move\u6765\u89e6\u53d1\u7acb\u5373\u6570\u548c\u5c06\u4ea1\u503c\u7684\u79fb\u52a8\\n```cpp\\nVec(const Vec&) = delete;\\nVec f() {\\n    Vec v(3);\\n    return v;\\n}\\nVec b(f()); // \u4f1a\u8c03\u7528Vec(const Vec&) \u62a5\u9519\\n```\\n\\nc++11\u540e\u5b98\u65b9\u7ed9\u51fa\u4e86rvalue ref\u7c7b\u578b,\u6765\u533a\u5206\u62f7\u8d1d\u548c\u79fb\u52a8\u3002\\n```cpp\\nVec(Vec&& v) {\\n    size = v.ref.size;\\n    data = new int[size];\\n    memcpy(data, v.ref.data, size);\\n}\\nVec a(3);\\nVec b(std::move(a));\\n```\\n\u6240\u4ee5\u53f3\u503c\u5f15\u7528\u7684\u552f\u4e00\u4f5c\u7528\u5c31\u662f\u5b9e\u73b0\u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\\n> \u5bf9\u6bd4boost\u8fd9\u79cd\u6a21\u677f\u7684\u65b9\u5f0f\uff0c\u5b98\u65b9\u7684\u6807\u51c6\u652f\u6301\u7acb\u5373\u6570\u548c\u5c06\u4ea1\u503c\u7684\u79fb\u52a8\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u5957\u4e00\u4e2amove\\n\\n\\n## \u5de6\u503c\u548c\u53f3\u503c\\n\\n**\u7c7b\u578b** \u548c **\u5de6\u53f3\u503c**\u662f\u4e24\u4e2a\u4e0d\u540c\u7ef4\u5ea6\u7684\u4e1c\u897f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7684\u51fd\u6570\u7b7e\u540d\u65e2\u5305\u542b**\u7c7b\u578b**\u4e5f\u5305\u542b**\u5de6\u53f3\u503c**\uff0c \u4e24\u4e2a\u90fd\u5bf9\u5e94\u624d\u80fd\u8c03\u7528\\n\\n\\n\\n\u5de6\u503c\uff1a\u80fd\u53d6\u51fa\u5730\u5740\uff0c\u5185\u5b58\u4e2d\u5b9e\u9645\u5b58\u5728\uff0c\u6709\u4e00\u4e2a\u6807\u8bc6\u7b26\uff08\u540d\u79f0\uff09\u7684\u503c\\n\\n\u53f3\u503c\uff1a\u4e0d\u80fd\u53d6\u51fa\u5730\u5740\uff0c\u901a\u5e38\u662f\u4e34\u65f6\u5bf9\u8c61\\n\\n\u5de6\u503c\u548c\u53f3\u503c\u53ea\u662f\u8bed\u6cd5\u5c42\u9762\u7684\u4e1c\u897f\uff0c\u53ea\u5728\u7f16\u8bd1\u671f\u53d1\u6325\u4f5c\u7528\uff0c\u6307\u6325\u7f16\u8bd1\u5668\u9009\u53d6\u5bf9\u5e94\u51fd\u6570\\n\\n\\n\\n\u53f3\u503c\u5f15\u7528\u662f\u4e00\u79cd**\u7c7b\u578b**\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53f3\u503c\u4e0a\u3002\\n\\n\u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u662f\u5de6\u503c\u4e5f\u53ef\u4ee5\u662f\u53f3\u503c\\n\\n```cpp\\nA a;\\nA&& a1 = std::move(a);\\n// a1\u548cstd::move(a)\u7c7b\u578b\u90fd\u662fA&&, \u4f46a1\u662f\u5de6\u503c\uff0c std::move(a)\u662f\u53f3\u503c\\n```\\n\\n## \u901a\u7528\u5f15\u7528\u548c\u5b8c\u7f8e\u8f6c\u53d1\\n### \u6765\u6e90\\n```cpp\\n// \u53f3\u503c\u5f15\u7528\\nA&& a1 = A();\\n\\n// \u901a\u7528\u5f15\u7528\\nauto&& a2 = A();\\n\\ntemplate<typename T>\\nvoid f(T&& param);\\n```\\n\\n\u901a\u7528\u5f15\u7528\u5176\u5b9e\u662feffective c++\u7684\u4f5c\u8005\u63d0\u51fa\uff0c \u7528\u6765\u63cf\u8ff0**\u5f15\u7528\u6298\u53e0**\u6548\u679c\u7684\u6982\u5ff5\\n\\n\u5f15\u7528\u6298\u53e0\u662fc++\u6807\u51c6\u7684\u7f16\u8bd1\u89c4\u5219\\n> \u53ea\u6709T&& && \u624d\u662f\u53f3\u503c\uff0c\u5176\u4ed6\u7ec4\u5408\u65b9\u5f0f\u90fd\u662f\u5de6\u503c\\n\\n\\n```cpp\\nstruct A {\\n    A() = default;\\n};\\n\\nvoid f(const A&){std::cout << \\"const A&\\\\n\\";}\\nvoid f(A&&){std::cout << \\"A&&\\\\n\\";}\\n\\ntemplate<typename T>\\nvoid test(T&& t) {\\n    f(t);\\n}\\n\\nA a;\\ntest(a); // const A&\uff0c t\u7684\u7c7b\u578b\u662f && + & = &\\ntest(std::move(a)); // const A&\uff0c t\u7684\u7c7b\u578b\u662f&& + && = &&\uff0c \u4f46\u662ft\u662f\u4e2a\u5de6\u503c\\n```\\n\\n### std::forward\\n\u4e3a\u4e86\u5b9e\u73b0\u4f20\u8fdb\u6765\u7684\u53c2\u6570\u662f\u5de6\u503c\uff0ct\u5c31\u662f\u5de6\u503c\uff1b\u4f20\u8fdb\u6765\u7684\u53c2\u6570\u662f\u53f3\u503c\uff0ct\u5c31\u662f\u53f3\u503c\uff0c\u9700\u8981\u52a0std::forward\\n\\n```cpp\\ntemplate<typename T>\\nvoid test(T&& t) {\\n    f(std::forward<T>(t));\\nA a;\\ntest(a); // const A&\\ntest(std::move(a)); // A&&\\n}\\n```\\n\\n\u5177\u4f53\u5b9e\u73b0\\n```cpp\\n// \u9488\u5bf9\u4f20\u5165\u7684\u662f\u5de6\u503c\\ntemplate <typename T>\\nconstexpr T&& forward(typename std::remove_reference<T>::type& t) noexcept {\\n    return static_cast<T&&>(t);\\n}\\n\\n// \u9488\u5bf9\u4f20\u5165\u7684\u662f\u53f3\u503c\\ntemplate <typename T>\\nconstexpr T&& forward(typename std::remove_reference<T>::type&& t) noexcept {\\n    static_assert(!std::is_lvalue_reference<T>::value, \\"T must not be an lvalue reference\\");\\n    return static_cast<T&&>(t);\\n}\\n```\\n\u53ef\u4ee5\u53d1\u73b0forward\u4e5f\u5229\u7528\u4e86\u5f15\u7528\u6298\u53e0\u7684\u89c4\u5219\uff0c\u4f20\u5165\u5de6\u503c && + & = &\uff0c \u4f20\u5165\u53f3\u503c && + && = &&\\n\\n\\n```cpp\\n// f(std::forward<T>(t)) \u76f8\u5f53\u4e8e\\nif t is &, f(t)\\nif t is &&, f(std::move(t))\\n\\n```\\n\\n**\u5e94\u7528**\\n\\n\u5b9e\u73b0\u8f93\u5165\u7c7bT\u7684\u6784\u9020\u53c2\u6570\uff0c\u8fd4\u56deT\u7684\u667a\u80fd\u6307\u9488\\n\\n```cpp\\ntemplate<typename T, typename... Args>\\nstd::shared_ptr<T> make_shared(Args&&... args){\\n  // args\u662fArgs&&...\u7c7b\u578b\u7684\u5de6\u503c\\n  // \u6240\u4ee5\u4e0b\u9762\u8c03\u7528\u7684\u662fT\u7684\u62f7\u8d1d\u6784\u9020\\n  return std::shared_ptr<T>(new T(args...));\\n}\\n```\\n\\n\u6539\u4e3a\\n\\n```cpp\\ntemplate<typename T, typename... Args>\\nstd::shared_ptr<T> make_shared(Args&&... args){\\n  // \u5b8c\u7f8e\u8f6c\u53d1 args\u7684\u5de6/\u53f3\u503c\u5c5e\u6027\\n  // \u4f20\u5165\u7684\u662f\u5de6\u503c\u5c31\u8f6c\u53d1\u5de6\u503c\\n  // \u4f20\u5165\u7684\u662f\u53f3\u503c\u5c31\u8f6c\u53d1\u53f3\u503c\\n  return std::shared_ptr<T> (new T(std::forward<Args>(args)...);\\n}\\n```"},{"id":"/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93","metadata":{"permalink":"/blog/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93.md","source":"@site/blog/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93.md","title":"\u7f16\u8bd1\u548c\u94fe\u63a5","description":"\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u8fc7\u7a0b","date":"2023-12-02T06:34:46.000Z","formattedDate":"December 2, 2023","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":5.775,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u7f16\u8bd1\u548c\u94fe\u63a5","tags":["C++"]},"prevItem":{"title":"\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b","permalink":"/blog/C++/\u4ece\u79fb\u52a8\u8bed\u4e49\u5230\u5c01\u88c5RAII\u7c7b/1"},"nextItem":{"title":"\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa","permalink":"/blog/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b"}},"content":"\x3c!--truncate--\x3e\\n## \u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u8fc7\u7a0b\\n\\n\u9884\u7f16\u8bd1--\u7f16\u8bd1--\u6c47\u7f16--\u94fe\u63a5\\n\\n```cpp\\ngcc hello.c\\n./a.out\\n```\\n\\n### \u9884\u7f16\u8bd1\\n\\n\uff081\uff09\u5c55\u5f00#define\u5b8f\u5b9a\u4e49\\n\\n\uff082\uff09\u5904\u7406\u6761\u4ef6\u9884\u7f16\u8bd1\u6307\u4ee4 #ifdef #if #elif #endif\\n\\n\uff083\uff09\u5220\u9664\u6240\u6709\u6ce8\u91ca\\n\\n### \u7f16\u8bd1\\n\\n\u7ecf\u8fc7\u7f16\u8bd1\u5668\u751f\u6210.s\\n\\n### \u6c47\u7f16\\n\\n\u7ecf\u8fc7\u6c47\u7f16\u5668\u751f\u6210.o\\n\\n### \u94fe\u63a5\\n\\n\u5904\u7406**\u5404\u4e2a\u6a21\u5757\u95f4\u76f8\u4e92\u5f15\u7528**\u7684\u90e8\u5206\uff0c\u4e3b\u8981\u5305\u62ec**\u5730\u5740\u548c\u7a7a\u95f4\u5206\u914d\u3001\u7b26\u53f7\u51b3\u8bae\u3001\u91cd\u5b9a\u4f4d**\\n\\n## \u76ee\u6807\u6587\u4ef6\\n\\n\u76ee\u6807\u6587\u4ef6\u3001\u9759\u6001\u5e93\u3001\u52a8\u6001\u5e93\u3001\u53ef\u6267\u884c\u6587\u4ef6\u5728\u7ed3\u6784\u4e0a\u90fd\u5dee\u4e0d\u591a\uff0c\u8fd9\u91cc\u4ee5\u76ee\u6807\u6587\u4ef6\u4ee3\u66ff\u3002\u6bd4\u5982linux\u4e2d\u7684ELF\u6587\u4ef6\\n\\n\u4ee5\u6bb5\u7684\u5f62\u5f0f\u7ec4\u5408\uff0c\u4e3b\u8981\u5305\u62ec\uff1a\\n\\n|            |                                   |\\n| ---------- | --------------------------------- |\\n| ELF header |                                   |\\n| .text      | \u4ee3\u7801\u6bb5                            |\\n| .data      | \u521d\u59cb\u5316\u4e86\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf  |\\n| .bss       | \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u9759\u6001\u53d8\u91cf  |\\n| .rodata    | const\u4fee\u9970\u7684\u53d8\u91cf\u3001\u5b57\u7b26\u4e32\u5e38\u91cf       |\\n| .symtab    | \u7b26\u53f7\u8868                            |\\n| .rel.text  | \u5bf9.text\u7684\u91cd\u5b9a\u4f4d\u8868\uff0c\u6bd4\u5982\u8c03\u7528printf |\\n| ......     |                                   |\\n\\n### header\\n\\n\u6bb5\u8868\u957f\u5ea6\u3001\u6bb5\u8868\u4f4d\u7f6e\u3001\u6bb5\u6570\u91cf\u3001ELF\u6587\u4ef6\u7c7b\u578b\uff08.o/.so/\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7cfb\u7edf\u901a\u8fc7\u8fd9\u4e2a\u5b57\u6bb5\u5224\u65ad\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u540e\u7f00\uff09\u7b49\u4fe1\u606f\\n\\n### \u7b26\u53f7\u8868\uff08.symtab\uff09\\n\\n\u7b26\u53f7\u540d\uff08\u51fd\u6570/\u53d8\u91cf\u540d\uff09 \u2014\u2014 \u7b26\u53f7\u503c\uff08\u8ddd\u6bb5\u9996\u7684\u504f\u79fb\u5730\u5740\uff09\u2014\u2014\u7b26\u53f7\u6240\u5728\u6bb5\\n\\n### C++\u7b26\u53f7\u4fee\u9970\u548c\u51fd\u6570\u7b7e\u540d\\n\\n\u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u4e0d\u540c\\n\\n```cpp\\nint func(int) ===> _Z4funci\\nint C::func(int) ===> _ZN1C4funcEi\\n```\\n\\nextern  \\"C\\" \u4e3b\u8981\u5c31\u7528\u6765\u63a7\u5236\u7b26\u53f7\u4fee\u9970\uff0c\u56e0\u4e3aC\u548cC++\u7684\u7b26\u53f7\u4fee\u9970\u89c4\u5219\u4e0d\u540c\uff0c\u5982\u679c\u9700\u8981\u8c03\u7528C\u8bed\u8a00\u5e93\u7684\u51fd\u6570\uff0c\u91c7\u7528C++\u7684\u7b26\u53f7\u4fee\u9970\uff0c\u5c31\u4f1a\u5bfc\u81f4\u627e\u4e0d\u5230\u7b26\u53f7\u7684\u9519\u8bef\\n\\n\\n\\n### \u5f3a\u7b26\u53f7\u548c\u5f31\u7b26\u53f7\\n\\n\u5f3a\u7b26\u53f7\uff1a\u76ee\u6807\u6587\u4ef6A\u548c\u76ee\u6807\u6587\u4ef6B\u540c\u65f6\u5b9a\u4e49\u5168\u5c40\u53d8\u91cfglobal\uff0c\u4f1a\u62a5\u9519`multiple definition of \'global\'`\\n\\nTODO: \u8865\u5145\\n\\n\\n\\n## \u94fe\u63a5\\n\\n> \u4e3a\u4ec0\u4e48\u4e0d\u628a\u4e0d\u540c\u76ee\u6807\u6587\u4ef6\u76f4\u63a5\u987a\u5e8f\u62fc\u63a5\\n>\\n> \u56e0\u4e3a\u53ef\u80fd\u4f1a\u5b58\u5728\u5f88\u591a\u5f88\u5c0f\u7684\u6bb5\uff0c\u6bcf\u4e2a\u6bb5\u4f1a\u8fdb\u884c\u5206\u9875\uff0c\u5206\u9875\u540e\u5f88\u77ed\u7684\u6bb5\u4f1a\u51fa\u73b0\u5185\u90e8\u788e\u7247\\n\\n\u5206\u4e3a\u4e24\u6b65\\n\\n* \u7a7a\u95f4\u4e0e\u5730\u5740\u5206\u914d\uff08\u7a7a\u95f4\uff1a \u591a\u4e2a.o\u53d8\u6210.exe\u540e\uff0celf\u6587\u4ef6\u7a7a\u95f4\u600e\u4e48\u5206\u914d\uff1b\u5730\u5740\uff1a \u6bcf\u4e2a\u6bb5\u7684\u865a\u62df\u5730\u5740\u548c\u957f\u5ea6 \uff09\\n* \u7b26\u53f7\u89e3\u6790\u4e0e\u91cd\u5b9a\u4f4d\uff08\u7b26\u53f7\u89e3\u6790\u3001\u91cd\u5b9a\u4f4d\u3001\u8c03\u6574\u4ee3\u7801\u4e2d\u7684\u5730\u5740\uff09\\n\\n### \u7a7a\u95f4\u4e0e\u5730\u5740\u5206\u914d\\n\\n\uff081\uff09\u94fe\u63a5\u5668\u626b\u63cf\u6240\u6709\u8f93\u5165\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u8ba1\u7b97\u5408\u5e76\u540e\u6bcf\u4e2a\u6bb5\u7684\u4f4d\u7f6e\u548c\u957f\u5ea6\uff08\u6bd4\u5982a\u7684.text\u548cb\u7684.text\u5408\u5e76\u5230\u4e00\u8d77\uff09\uff1b\\n\\n\u5728\u94fe\u63a5\u4e4b\u524d\uff0c\u6240\u6709\u76ee\u6807\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\uff08VMA\uff09\u662f0\uff0c\u94fe\u63a5\u65f6\u5c31\u4f1a\u8fdb\u884c\u5206\u914d\uff0c\u94fe\u63a5\u540e\u7684\u6587\u4ef6\u4f1a\u8bb0\u5f55\u6bcf\u4e2a\u6bb5\u7684\u865a\u62df\u5730\u5740\u3002\\n\\n\\n\\n\uff082\uff09\u6536\u96c6\u6240\u6709\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u7b26\u53f7\u5f15\u7528\uff0c\u8ba1\u7b97\u4ed6\u4eec\u7684\u865a\u62df\u5730\u5740\uff0c\u5e76\u653e\u5230\u5168\u5c40\u7684\u7b26\u53f7\u8868\u3002\\n\\n\u6bcf\u4e2a\u7b26\u53f7\u5728\u5404\u81ea\u6bb5\u7684offset\u8bb0\u5f55\u5728\u539f\u5148\u7684.o\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u8868\u91cc\uff0c\u5728\u786e\u5b9a\u6bb5\u5728\u5168\u5c40\u7684\u865a\u62df\u5730\u5740\u540e\uff0c\u4fbf\u53ef\u4ee5\u786e\u5b9a\u8fd9\u4e9b\u7b26\u53f7\u7684\u865a\u62df\u5730\u5740\u4e86\\n\\n\\n\\n### \u7b26\u53f7\u89e3\u6790\u4e0e\u91cd\u5b9a\u4f4d\\n\\n\u4e00\u4e2a\u6587\u4ef6\u5982\u679c\u7528\u5230\u5916\u90e8\u6587\u4ef6\u51fd\u6570/\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u6210\u76ee\u6807\u6587\u4ef6\u540e\uff0c\u7f16\u8bd1\u5668\u5c06\u76f8\u5e94\u8bed\u53e5\u5bf9\u5e94\u7684\u5730\u5740\u6682\u65f6\u8bbe\u7f6e\u4e3a0\u3002\u540c\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u505a\u4e24\u4ef6\u4e8b\uff1a\\n\\n* \u7b26\u53f7\u8868\uff1a\u8bb0\u5f55\u67d0\u4e2a\u7b26\u53f7\u6240\u5728\u6bb5\u3001\u5728\u6240\u5c5e\u6bb5\u7684\u504f\u79fb\u5730\u5740\\n* \u91cd\u5b9a\u4f4d\u8868\uff1a\u6bd4\u5982.rel.text     .rel.data \\n\\n\u91cd\u5b9a\u4f4d\u8868\u7684\u7ed3\u6784\uff1a\\n\\n* offset\uff1a \u8ddd\u79bb\u6bb5\u9996\u7684\u504f\u79fb\u503c\\n* info\uff1a**\u91cd\u5b9a\u4f4d\u5165\u53e3**\u7684\u7c7b\u578b\u548c\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684\u4e0b\u6807\\n\\n\u94fe\u63a5\u5668\u5904\u7406\u6bcf\u4e2a**\u91cd\u5b9a\u4f4d\u5165\u53e3**\uff0c\u67e5\u627e\u5168\u5c40\u7b26\u53f7\u8868\uff0c\u627e\u5230\u76f8\u5e94\u7b26\u53f7\u8fdb\u884c\u91cd\u5b9a\u4f4d\\n\\n\u5982\u679c\u627e\u4e0d\u5230\u4f1a\u62a5\\"**undefined reference to xxx**\\"\\n\\n### C++\u94fe\u63a5\u8fc7\u7a0b\u7684\u4e00\u4e9b\u95ee\u9898\\n\\n#### \u91cd\u590d\u4ee3\u7801\u6d88\u9664\\n\\nC++\u6a21\u7248\u3001\u865a\u51fd\u6570\u8868\u5728\u6bcf\u4e00\u4e2a\u7528\u5230\u7684\u6587\u4ef6\u90fd\u4f1a\u7f16\u8bd1\u6210\u540c\u6837\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u94fe\u63a5\u4f1a\u9020\u6210\u91cd\u590d\uff0c\u94fe\u63a5\u5668\u4f1a\u8fdb\u884c\u91cd\u590d\u4ee3\u7801\u6d88\u9664\u3002\\n\\n#### \u5168\u5c40\u6784\u9020\u4e0e\u6790\u6784\\n\\n**\u5168\u5c40\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u5728main\u4e4b\u524d\u6267\u884c\uff0c\u5728main\u4e4b\u540e\u6790\u6784**\\n\\n\u6240\u4ee5C++\u7684ELF\u6587\u4ef6\u4e2d\uff0c\u8fd8\u989d\u5916\u5b9a\u4e49\u4e86\u4e24\u79cd\u6bb5\\n\\n* .init\uff1a main\u4e4b\u524d\u4f1a\u6267\u884c\u7684\u4ee3\u7801\\n* .fini:    main\u4e4b\u540e\u4f1a\u6267\u884c\u7684\u4ee3\u7801\\n\\n#### API\u548cABI\\n\\nAPI\u662f\u6e90\u4ee3\u7801\u7ea7\u522b\u7684\u63a5\u53e3\uff1bABI\u662f\u4e8c\u8fdb\u5236\u7ea7\u522b\u7684\u63a5\u53e3\\n\\n\u6bd4\u5982C++\u7684\u5bf9\u8c61\u5185\u5b58\u5e03\u5c40\u662fABI\u7684\u4e00\u90e8\u5206\uff1b POSIX\u662f\u4e00\u4e2aAPI\u6807\u51c6\\n\\n### \u9759\u6001\u5e93\u94fe\u63a5\\n\\n\u9759\u6001\u5e93\u662f\u4e00\u7ec4\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408\uff0c\u591a\u76ee\u6807\u6587\u4ef6\u538b\u7f29\u3001\u6253\u5305\\n\\n\u94fe\u63a5\u5668\u94fe\u63a5\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u628a\u9700\u8981\u7684\u76ee\u6807\u6587\u4ef6\u4ece\u5e93\u4e2d\u89e3\u538b\u51fa\u6765\uff0c\u5e76\u94fe\u63a5\u6210\u4e00\u4e2a\u6587\u4ef6"},{"id":"/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b","metadata":{"permalink":"/blog/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b.md","source":"@site/blog/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b.md","title":"\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa","description":"\u547d\u4ee4","date":"2023-12-02T06:34:46.000Z","formattedDate":"December 2, 2023","tags":[{"label":"\u6742\u8c08","permalink":"/blog/tags/\u6742\u8c08"}],"readingTime":3.82,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa","tags":["\u6742\u8c08"]},"prevItem":{"title":"\u7f16\u8bd1\u548c\u94fe\u63a5","permalink":"/blog/C++/\u7f16\u8bd1\u548c\u94fe\u63a5/\u94fe\u63a5\u3001\u88c5\u8f7d\u4e0e\u5e93"},"nextItem":{"title":"\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine","permalink":"/blog/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine"}},"content":"\x3c!--truncate--\x3e\\n# Linux\\n## \u547d\u4ee4\\n\\n| \u547d\u4ee4                              | \u5907\u6ce8                                          |\\n| --------------------------------- | --------------------------------------------- |\\n| pwd                               | \u5f53\u524d\u76ee\u5f55\u7684\u7edd\u5bf9\u8def\u5f84\uff08print working directory\uff09 |\\n| env                               | \u5217\u51fa\u6240\u6709\u73af\u5883\u53d8\u91cf                              |\\n| echo $PATH                        | \u5217\u51fa\u73af\u5883\u53d8\u91cf\u4e2dPATH\u7684\u503c                        |\\n| cat [file_path]                   | \u6253\u5370\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9                            |\\n| xdg-open ./                       | \u4ecebash\u6253\u5f00\u6587\u4ef6\u7a97\u53e3                            |\\n| top                               | \u67e5\u7cfb\u7edf\u72b6\u51b5                                    |\\n| cp -r [direction_a] [direction_b] | \u5faa\u73af\u590d\u5236                                      |\\n\\n\u73af\u5883\u53d8\u91cf\u6587\u4ef6\u53ca\u52a0\u8f7d\u987a\u5e8f\\n\\nhttps://www.cnblogs.com/youyoui/p/10680329.html\\n\\n\u7528\u4e86zsh\u4e4b\u540e\uff0c\u914d\u7f6e\u5728~/.zshrc\u91cc\\n\\n## \u53cc\u7cfb\u7edfUbuntu22.04\\n\\nhttps://blog.csdn.net/Flag_ing/article/details/121908340\\n\\n\\n\\n## \u6362\u6e90\\n\\n/etc/apt/source.list\\n\\ndeb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\\n\\n## Nvidia driver\\n\\nhttps://blog.csdn.net/Perfect886/article/details/119109380\\n\\n\\n\\n## \u5b89\u88c5nvidia\u9a71\u52a8\u540e \u7f51\u5361\u4e22\u5931\\n\\n```\\nSudo lshw -c network\\n\\n```\\n\\n\u663e\u793a *-network UNCLAIMED \\n\\n\\n\\n\u8981\u7528\u5176\u4ed6\u7535\u8111\u4e0b\u8f7d\u4e86\u62f7\u8d1d\u8fc7\u6765\\n\\nhttps://askubuntu.com/questions/1437477/22-04-1-network-unclaimed\\n\\n\u4e0b\u8f7d\u5730\u5740\\n\\nhttp://mirrors.edge.kernel.org/ubuntu/ubuntu/ubuntu/ubuntu/ubuntu/pool/main/l/linux-hwe-5.19/\\n\\n## \u8f93\u5165\u6cd5\\n\\nhttps://blog.csdn.net/qq_19331985/article/details/125998219\\n\\n\\n\\n## VPN\\n\\n### V2Ray gui\\n\\nhttps://github.com/v2rayA/v2rayA\\n\\n### Clash for windows\\n\\n\\n\\n## github ssh key\\n\\n```cpp\\n// check if configured before\\ngit config user.name\u548cgit config user.email\\n  \\n\\ngit config --global user.name \u2018xxxxx\u2019 \\ngit config --global user.email \u2018xxx@xx.xxx\u2019\\nssh-keygen -t rsa -C \u2018\u4e0a\u9762\u7684\u90ae\u7bb1\u2019\\n  \\n// \u628arsa.pub\u7684\u5185\u5bb9\u590d\u5236\u5230github\\n```\\n\\n\\n\\n## Oh my ZSH\\n\\nhttps://blog.csdn.net/weixin_42326144/article/details/121957795\\n\\n```cpp\\ncat /etc/shells\\n \\nsudo apt-get install zsh\\n  \\n sudo  curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh \\n\\n// \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4shell\\nchsh -s $(which zsh) // \u7136\u540e\u6ce8\u9500\u91cd\u65b0\u767b\u5f55\\n\\n  \\n```\\n\\n\u5982\u679c\u8981\u7528\u5230bash\uff08\u6bd4\u5982\u914d\u7f6esource .bashrc\uff09\\n\\n\u5207\u6362shell  `exec bash`  `exec zsh`\\n\\n\u914d\u7f6e\\n\\nhttps://github.com/ohmyzsh/ohmyzsh/\\n\\n\u4e71\u7801\\n\\n\u641c\u7d22powerline \u6700\u540e\u5728bash\u7a97\u53e3\u8bbe\u7f6e\u91cc\u6362\u5b57\u4f53 \u5982\u679c\u914d\u7f6e\u6ca1\u80fd\u6210\u529f \u6ce8\u9500\u8bd5\u8bd5\\n\\n## CLion\\n\\n\u7528\u4e86zsh\u4e4b\u540e\u914d\u7f6e\u5728 ~/.zshrc\u91cc\\n\\n```\\n# CLion \\nCLION_PATH=/home/chenhui/App/clion-2023.1.2/bin \\nPATH=$PATH:$CLION_PATH\\n```\\n\\n## Houdini\\n\\nlinux\u7248\u672c\u5b98\u7f51\u4e0b\u8f7d\u8bf4\u660e\\n\\n\u9047\u5230qt\u95ee\u9898\\n\\nhttps://www.sidefx.com/forum/topic/81990/?page=1#post-376619\\n\\n## OpenGL\\n\\nhttps://crainyday.gitee.io/Ubuntu_004.html\\n\\n```\\nsudo apt-get install build-essential libgl1-mesa-dev\\nsudo apt-get install libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev\\nsudo apt-get install libglfw3-dev libglfw3\\n```\\n\\n## TBB\\n\\n```\\nsudo apt-get install libtbb-dev\\n```\\n\\n\\n\\n## cuda\\n\\n\u5728\u5df2\u7ecf\u5b89\u88c5\u597dnvdia driver\u7684\u57fa\u7840\u4e0a\uff0c\u53ea\u9700\u8981\u5b89\u88c5cuda-toolkit\\n\\n**\u67e5\u770bdriver\u7248\u672c**\\n\\n```\\nnvidia-smi                                \\nThu Jun 29 12:15:02 2023       \\n+-----------------------------------------------------------------------------+\\n| NVIDIA-SMI 525.116.04   Driver Version: 525.116.04   CUDA Version: 12.0     |\\n|-------------------------------+----------------------+----------------------+\\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\\n|                               |                      |               MIG M. |\\n|===============================+======================+======================|\\n|   0  NVIDIA GeForce ...  Off  | 00000000:01:00.0  On |                  N/A |\\n|  0%   51C    P8    19W / 200W |    337MiB /  8192MiB |      0%      Default |\\n|                               |                      |                  N/A |\\n+-------------------------------+----------------------+----------------------+\\n                                                                               \\n+-----------------------------------------------------------------------------+\\n| Processes:                                                                  |\\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\\n|        ID   ID                                                   Usage      |\\n|=============================================================================|\\n|    0   N/A  N/A      1325      G   /usr/lib/xorg/Xorg                249MiB |\\n|    0   N/A  N/A      1607      G   /usr/bin/gnome-shell               28MiB |\\n|    0   N/A  N/A      2220      G   ...mviewer/tv_bin/TeamViewer       14MiB |\\n|    0   N/A  N/A    296705      G   ...182476128516229679,262144       41MiB |\\n+-----------------------------------------------------------------------------+\\n\\n```\\n\\n**google \\"cuda 12.0 download\\"**\\n\\nhttps://developer.nvidia.com/cuda-12-0-0-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_network\\n\\n\u6ce8\u610f\u6700\u540e\u4e0d\u8981`sudo apt-get -y install cuda`\u90a3\u4f1a\u91cd\u65b0\u4e0b\u8f7d\u9a71\u52a8\uff0c\u800c\u5e94\u8be5`sudo apt-get -y install cuda-toolkit`\\n\\n**\u4fee\u6539env path**\\n\\n```\\n# chenhui\'s env variables\\n# CLion \\nCLION_PATH=/home/chenhui/App/clion-2023.1.2/bin\\n# Cuda\\nCUDA_PATH=/usr/local/cuda-12.0/bin\\nPATH=$PATH:$CLION_PATH:$CUDA_PATH\\n\\n\\n```\\n\\n\\n\\n**\u5b89\u88c5\u9519\u7248\u672c\u600e\u4e48\u529e**\\n\\n1. cuda \u8def\u5f84\\n\\n```\\n$ ll /usr/local | grep cuda\\nlrwxrwxrwx  1 root    root      22  6\u6708 29 10:43 cuda -> /etc/alternatives/cuda\\nlrwxrwxrwx  1 root    root      25  6\u6708 29 10:43 cuda-12 -> /etc/alternatives/cuda-12\\ndrwxr-xr-x 15 root    root    4.0K  6\u6708 29 12:12 cuda-12.0\\n```\\n\\n2. \u628a\u4e0b\u9519\u7684\u7248\u672c\u5148\u5220\u6389\\n\\n```mv cuda-12.2 /.trash```\\n\\n3. \u628a\u8f6f\u8fde\u63a5\u90fd\u6539\u4e86\\n\\n```\\nsudo ln -sf /usr/local/cuda-12.0 cuda\\n\\n-sf \u8868\u793a\u4fee\u6539  \\nln -sf <A> <B>\\nB\u6307\u5411A\\n```\\n\\n4. \u4fee\u6539env path\\n5. `nvcc --version`"},{"id":"/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine","metadata":{"permalink":"/blog/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine.md","source":"@site/blog/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine.md","title":"\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine","description":"\x3c!-- ---","date":"2023-12-02T06:34:46.000Z","formattedDate":"December 2, 2023","tags":[],"readingTime":13.505,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa","permalink":"/blog/\u6742\u8c08/\u4e09\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u73af\u5883\u7684\u642d\u5efa/Linux\u95ee\u9898\u6c47\u603b"},"nextItem":{"title":"\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics","permalink":"/blog/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1"}},"content":"\x3c!-- ---\\ntitle: \u8bfe\u7a0b\u4f5c\u4e1a\uff1aTiny PhysicEngine  \\ntags: [graphics]\\n--- --\x3e\\n\x3c!--truncate--\x3e\\n## Before Reading\\n\u672c\u9879\u76ee\u53ea\u4f5c\u4e3a\u8bfe\u7a0b\u4f5c\u4e1a\u3002[\u9879\u76ee\u5730\u5740](https://github.com/CanoeByGuitar/GamePhysicsEngine)\\n\\n## \u603b\u4f53\u6a21\u5757\\n\u51e0\u4f55\u6a21\u5757\u4e3a\u516c\u5171\u7684\u51e0\u4f55\u4f53\uff0c\u5982line\u3001circle\u3001AABB\u3001triangle\u3001mesh\u7b49\uff0c\u5e76\u6709\u76f8\u5e94\u7684\u51e0\u4f55\u53d8\u6362\u548c\u7a7a\u95f4\u52a0\u901f\u65b9\u6cd5\u3002\\n\\n\u7269\u7406\u548c\u6e32\u67d3\u6a21\u5757\u90fd\u7ee7\u627f\u51e0\u4f55\u6a21\u5757\u7684\u7c7b\uff0c\u7269\u7406\u6a21\u5757\u53ef\u80fd\u6709\u989d\u5916\u7684\u8d28\u91cf\u3001\u901f\u5ea6\u3001\u5f62\u53d8\u68af\u5ea6\u7b49\u6570\u636e\uff0c\u6e32\u67d3\u6a21\u5757\u6709\u989d\u5916\u7684\u4e09\u89d2\u5f62\u5256\u5206\u3001shader\u3001VAO\u7b49\u6570\u636e\\n\\n\u4f7f\u7528\u89c2\u5bdf\u8005\u6a21\u5f0f\u548cstd::function\u5b9e\u73b0\uff0c\u7269\u7406\u6a21\u5757\u5bf9Geometry\u4ea7\u751f\u66f4\u65b0\u65f6\u901a\u77e5\u6e32\u67d3\u6a21\u5757\u8fdb\u884c\u52a8\u6001\u6e32\u67d3\u3002\\n\\n![](assets/image-20230601162356773.png)\\n\\n## \u51e0\u4f55\u6a21\u5757\\n\\n### BVH\\n\\n\u4ece\u8ddd\u79bb\u7684\u4e2d\u70b9\u53bb\u5212\u5206\uff0c\u5b58\u5728\u6b7b\u5faa\u73af\u7684\u95ee\u9898\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u4e3a\u7a7a\u65f6\uff0c\u5c31\u9700\u8981\u9012\u5f52\u8fd4\u56de\u4e86\uff0c\u5426\u5219\u4e00\u4e2aAABB\u4e2d\u6709n\u4e2a\u4e09\u89d2\u5f62\uff0c\u5212\u5206\u540e\u53d8\u4e3a0 + n, \u7ee7\u7eed\u8fd8\u662f0 + n\\n\\n```cpp\\nstd::pair<BVHNode*, BVHNode*> SplitBVHNode(BVHNode* node){\\n        // x-alias partition\\n        auto bound = node->bound;\\n        std::vector<Triangle*> leftTriangles, rightTriangles;\\n        leftTriangles.reserve(node->triangles.size());\\n        rightTriangles.reserve(node->triangles.size());\\n        for(const auto& tri : node->triangles){\\n            if(GetMax(GetBound(*tri)).x < bound.position.x){\\n                leftTriangles.push_back(tri);\\n            }else{\\n                rightTriangles.push_back(tri);\\n            }\\n        }\\n        auto left = new BVHNode(GetBound(leftTriangles), std::move(leftTriangles));\\n        auto right = new BVHNode(GetBound(rightTriangles), std::move(rightTriangles));\\n        return {left, right};\\n    }\\n\\n    void RecursiveBuildBVH(BVHNode* node, int kThreshold) {\\n        // Boundary Condition\\n        if(node->triangles.size() < kThreshold){\\n            return;\\n        }\\n//        if(BVH_DEPTH > MAX_DEPTH) return;\\n\\n        PHY_DEBUG(\\"Node bound pos: {}, halfSize: {}, triNum:{}\\", node->bound.position, node->bound.halfSize, node->triangles.size());\\n\\n\\n        // Split\\n        auto [leftNode, rightNode] = SplitBVHNode(node);\\n\\n        if(!leftNode->triangles.empty() || !rightNode->triangles.empty()){\\n            std::vector<Triangle*>().swap(node->triangles);\\n        }\\n\\n        bool shouldReturn = false;\\n        if(!leftNode->triangles.empty()){\\n            node->left = leftNode;\\n        }else{\\n            shouldReturn = true;\\n        }\\n\\n        if(!rightNode->triangles.empty()){\\n            node->right = rightNode;\\n        }else{\\n            shouldReturn = true;\\n        }\\n        if(shouldReturn) return;\\n\\n        // Recursive\\n        BVH_DEPTH++;\\n        RecursiveBuildBVH(node->left, kThreshold);\\n        BVH_DEPTH--;\\n\\n        BVH_DEPTH++;\\n        RecursiveBuildBVH(node->right, kThreshold);\\n        BVH_DEPTH--;\\n    }\\n```\\n\\n\u53ea\u4ecex\u65b9\u5411\u53d6\u4e2d\u70b9\u53bb\u5212\u5206\u4e5f\u4f1a\u5bfc\u81f4AABB\u8d8a\u6765\u8d8a\u7ec6\u957f\\n\\n![image-20230610133059596](assets/image-20230610133059596.png)\\n\\n## \u6e32\u67d3\u6a21\u5757\\n\\n![image-20230530004420139](assets/image-20230530004420139.png)\\n\\n### CMakeLists.txt\\n\\n```cmake\\nif(APPLE)\\n#   OPENGL\\n    find_package(OpenGL REQUIRED)\\n\\n#   GLFW\\n    find_package(glfw3 REQUIRED)\\n\\n    target_link_libraries(Renderer PUBLIC OpenGL::GL glfw)\\n```\\n\\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3aCMake\u4f1a\u5c1d\u8bd5\u67e5\u627e\u540d\u4e3a`FindOpenGL.cmake`\u7684\u6a21\u5757\u6587\u4ef6\u3002\u5728\u672c\u5730mac\u4e2d\u8def\u5f84\u4e3a\\n\\n**~/brew-2.2.2/Cellar/cmake/3.23.2/share/cmake/Modules**\\n\\n\u91cc\u9762\u4f1a\u8bbe\u5b9a\u4e00\u4e9b\u5e93\u7684\u540d\u79f0\uff0c\u6bd4\u5982OpenGL::GL\u53ef\u4ee5\u76f4\u63a5\u94fe\u63a5\\n\\n```cmake\\n31 ``OpenGL::GL``\\n 32   Defined to the platform-specific OpenGL libraries if the system has OpenGL    .\\n 33 ``OpenGL::GLU``\\n 34   Defined if the system has OpenGL Utility Library (GLU).\\n 35 \\n 36 .. versionadded:: 3.10\\n 37   Additionally, the following GLVND-specific library targets are defined:\\n 38 \\n 39 ``OpenGL::OpenGL``\\n 40   Defined to libOpenGL if the system is GLVND-based.\\n 41 ``OpenGL::GLX``\\n 42   Defined if the system has OpenGL Extension to the X Window System (GLX).\\n 43 ``OpenGL::EGL``\\n 44   Defined if the system has EGL.\\n```\\n\\n\\n\\n\\n\\n### VAO VBO EBO\\n\\n\\n\\n\\n### \u601d\u8def\\n\\n1 VAO <==> 1 VBO,  1 VEO  \u7528\u4e00\u4e2aGLVertexArray\u7c7b\\n\\n\u5c06\u4e00\u4e2aGLVertexArray\u5bf9\u8c61\u7ed1\u5b9a\u4e00\u4e2a\u7269\u4f53\uff0c\u573a\u666f\u4e2d\u53ef\u4ee5\u52a0\u5165\u591a\u4e2a\u7269\u4f53\uff0c\u6bcf\u4e2a\u7269\u4f53\u8d1f\u8d23\u81ea\u5df1\u7684GLVertexArray\u7684GenBuffer\u3001BufferData\u3001Bind\u3001UnBind\\n\\n\\n\\n\u6e32\u67d3\u7684\u4e00\u4e2a\u6d41\u7a0b\u5927\u6982\u662f\uff1a\\n\\n* \u8bbe\u7f6e\u6e32\u67d3\u53c2\u6570\uff08\u6bd4\u5982\u6df1\u5ea6\u6d4b\u8bd5\u3001\u6df7\u5408\u6d4b\u8bd5\u7b49\uff09\\n* \u8bbe\u7f6eMVP\u77e9\u9635\\n* ==\u8bbe\u7f6ematerial\uff08\u5305\u62ec\u5404\u79cdtexture\uff09\u3010\u53ef\u4ee5\u901a\u8fc7\u5de5\u5382\u6a21\u5f0f\uff0c\u8bfb\u53d6json\u3011==\uff08SetMaterial\uff09\\n* \u6e32\u67d3\u7b2c\u4e00\u5e27\\n  * ==mesh ==> [vertices data, indices data]==(GetVerticesBuffer)\\n  * // \u4ee5\u4e0b4\u4e2a\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\uff08SetPipelineData\uff09\\n  * ==\u751f\u6210 VAO, VBO, EBO==\\n  * ==vertices data ==> VBO==\\n  * ==indices data ==> EBO==\\n  * ==\u8bbe\u7f6eVAO\u7684vertex attribute pointer\uff0c \u5e76enable==\\n  * \\n  * draw\\n* RenderLoop\\n  * Update mesh\u3010\u7269\u7406\u8fd0\u52a8\u3011\\n  * \u6e32\u67d3\u4e00\u5e27\\n    * ==mesh ==> [vertices data, indices data]==(GetVerticesBuffer)\\n    * ==\u66f4\u65b0texture, material\uff08\u53ef\u80fd\u9700\u8981, \u53ea\u9700\u8981\u66f4\u65b0material\uff0c\u800c\u4e0d\u7528\u66f4\u65b0shader\uff09==\uff08SetMaterial\uff09\\n    * // \u4ee5\u4e0b4\u4e2a\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u91cc\uff08SetPipelineData\uff09\\n    * ==\u751f\u6210 VAO, VBO, EBO==\\n    * ==vertices data ==> VBO==\\n    * ==indices data ==> EBO==\\n    * ==\u8bbe\u7f6eVAO\u7684vertex attribute pointer\uff0c \u5e76enable==\\n    * \\n    * draw\\n\\n\u9ec4\u8272\u90e8\u5206\u5199\u5728ObjectBase\u91cc, ObjectBase\u88ab\u5404\u79cd\u7269\u4f53\u7ee7\u627f\uff0c\u6bd4\u5982Mesh, Cube\u7b49\u3002\\n\\n\u989d\u5916\u5957\u4e00\u5c42Object\u662f\u4e3a\u4e86Scene\u91cc\u53ef\u4ee5\u7528```std::vector<std::shared_ptr<Object>> m_objects``` \u6765\u5b9e\u73b0\u591a\u6001\\n\\n```cpp\\nclass Object{\\n    public:\\n        virtual ~Object() = default;\\n        virtual void SetPipelineData() = 0;\\n        virtual void GetVerticesBuffer() = 0;\\n        virtual void SetMaterial() = 0;\\n    };\\n\\ntemplate<typename VertexType>\\nclass ObjectBase : public Object {\\n  public:\\n  virtual void SetPipelineData() = 0; // Setup VAO, VBO, VEO\\n  virtual void GetVerticesBuffer() = 0; // Get vertices and indices\\n  virtual void SetMaterial() = 0; // Set shader/material parameter/texture\\n\\n  public:\\n  std::vector<VertexType> m_vertices;\\n  std::vector<unsigned int> m_indices;\\n  Shader *m_shader;\\n  GLVertexArray m_VAO{};\\n};\\n```\\n\\n\\n\\nVertexType\u7528\u6765\u5236\u5b9a\u67d0\u4e2a\u7269\u4f53\u5728\u6e32\u67d3\u7ba1\u7ebf\u4e0a\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u683c\u5f0f\uff0c\u5728ObjectBase\u7684\u7ee7\u627f\u7c7b\u4e2d\u8bbe\u7f6e\uff0c\u65b9\u4fbf\u62d3\u5c55\uff0c\u6bd4\u5982\\n\\n```cpp\\nstruct MeshVertex{\\n        vec3 position;\\n        vec3 normal;\\n        vec2 coord;\\n    };\\n\\n    class Mesh : public ObjectBase<MeshVertex>{\\n    public:\\n        ~Mesh() override;\\n        void SetPipelineData() override;\\n        void GetVerticesBuffer() override;\\n        void SetMaterial() override;\\n\\n    private:\\n        std::shared_ptr<geo::Mesh> GeoMesh;\\n    };\\n```\\n\\n\u867d\u7136\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6a21\u578b\uff0c\u6bd4\u5982*.obj\u53ef\u80fd\u7531\u5f88\u591a\u4e2amesh\u7ec4\u6210\uff0c\u4f46\u6211\u4eec\u5c06\u8fd9\u79cd\u6a21\u578b\u62bd\u8c61\u4e3ageo::mesh\uff0c\u5728geometry\u4e2d\u5904\u7406\u53d8\u6362\u3001\u7f29\u653e\u7b49\u64cd\u4f5c\uff0c\u4f20\u8f93\u7ed9renderer::mesh\u9001\u4e0a\u6e32\u67d3\u7ba1\u7ebf\u3002\\n\\n## Physic\u6a21\u5757\\n\\n### cloth\\n\\n#### implicit solver\\n\\n\u6ce8\u610f \u4e0b\u56fe\u4e2d\u7684x[0] , v[0]\u8868\u793a\u7b2c0\u65f6\u523b\uff0c x(0)\u8868\u793anewton\u7684\u521d\u59cb\u503c\\n\\n![image-20230617225252412](assets/image-20230617225252412.png)\\n\\n\u51c6\u786e\u7684Solve dx\u5e94\u8be5\u91c7\u7528\u7ebf\u6027\u7cfb\u7edf\u7684\u89e3\u7b97\u5668\uff0c\u6bd4\u5982jacobi\u3001pcg\u7b49\uff0c\u8fd9\u91cc\u7528\u8fd1\u4f3c\uff0c g\u662f\u4e00\u4ecb\u5bfc\uff0c hessian\u8fd1\u4f3c\u4f4d\u4e00\u4e2a\u5bf9\u89d2\u9635\uff0ck\u662f\u5f39\u7c27\u7684K\\n\\n![image-20230617225755140](assets/image-20230617225755140.png)\\n\\n\u4e24\u79cd\u521d\u59cb\u5316\u533a\u522b\u4e0d\u5927\uff0c\u5728\u8bbe\u5b9a\u6700\u5927\u8fed\u4ee3\u6b21\u6570\u4f4d32\u65f6\uff0c\u524d\u8005\u4e3a40ms/substep\uff0c\u540e\u8005\u4e3a50ms/substep\\n\\n**\u4f18\u5316\u8fc7\u7a0b**\\n\\n1. \u6700\u5f00\u59cb40ms\\n2. \\n\\n## C++\\n\\n### std::string_view\\n\\nc++17\\n\\n```cpp\\nstd::string s = \\"123456\\"; // \u4f1a\u628a c string \u5e38\u91cf\u6df1\u62f7\u8d1d\u7ed9s \\nstd::string_view s = \\"123456\\"; //\u53ea\u5305\u62ec\u9996\u4f4d\u4e24\u4e2a\u6307\u9488\uff0c \u4e0d\u4f1a\u62f7\u8d1d\uff0c\u4f46read-only\\n```\\n\\n\\n\\n## \u5751\\n\\n### \u5173\u4e8eModel\\n\\n\u4ee5.obj\u4e3a\u4f8b\uff0c\u6b63\u5e38\u7684obj file\u4e2d\uff0cvertex\u662f\u4e0d\u4f1a\u91cd\u590d\u7684\uff0c\u6240\u4ee5**vertices.size() < indices.size()**\\n\\n\u4f46\u5728load\u4e4b\u540e\uff0c\u4e3b\u6d41\u7684loader\uff08\u6bd4\u5982assimp\u7684\u9ed8\u8ba4\u53c2\u6570\u548ctinyobjloader\uff09\u4f1a\u628avertex\u91cd\u590d\u6765\u5b9e\u73b0\u4e24\u4e2a\u9762\u7684\u516c\u5171\u9876\u70b9\u5177\u6709\u4e0d\u540c\u7684normal\uff0c\u6240\u4ee5**vertices.size() == indices.size()**\\n\\n\u800c\u6211\u5728\u6e32\u67d3\u6a21\u5757\u4e2d\u91c7\u53d6\u4e86\u91cd\u590d\u5b9a\u70b9\u7684\u65b9\u6848\uff0c\u5728\u7269\u7406\u6a21\u5757\u4f7f\u7528\u4e86\u4e0d\u91cd\u590d\u7684\u65b9\u6848\uff08\u540e\u7eed\u4f18\u5316\uff09\uff0c\u6240\u4ee5\u5199\u4e86\u76f8\u4e92\u8f6c\u5316\u7684\u51fd\u6570\u3002\\n\\n* \u4e0d\u91cd\u590d ==> \u91cd\u590d\uff0c \u8fd9\u91cc\u8f6c\u6210 vector<Triangle*>\\n\\n```cpp\\nauto& triVec = m_model->m_meshes[0].triangles;\\n    triVec.clear();\\n    triVec.reserve(m_indices.size() / 3);\\n    for(int i = 0; i < m_indices.size(); i += 3){\\n        auto tri = new geo::Triangle(\\n                m_vertices[m_indices[i]],\\n                m_vertices[m_indices[i + 1]],\\n                m_vertices[m_indices[i + 2]]\\n        );\\n        triVec.push_back(tri);\\n```\\n\\n* \u91cd\u590d ==> \u4e0d\u91cd\u590d\\n\\n```cpp\\nstruct Vec3Hash {\\n    size_t operator()(const vec3& v) const {\\n        size_t seed = 0;\\n        std::hash<float> hasher;\\n        seed ^= hasher(v.x) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\\n        seed ^= hasher(v.y) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\\n        seed ^= hasher(v.z) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\\n        return seed;\\n    }\\n};\\n\\nstd::unordered_map<vec3, int, Vec3Hash> vertexMap;\\nstd::vector<vec3> uniqueVertices;\\nuniqueVertices.reserve(m_vertices.size());\\n\\n// \u6ce8\u610f\u8981\u904d\u5386face\\nfor (int i = 0; i < m_indices.size(); i++) {\\n  auto vertIdx = m_indices[i];\\n  auto it = vertexMap.find(m_vertices[vertIdx]);\\n  if (it == vertexMap.end()) {\\n    int newIndex = static_cast<int>(uniqueVertices.size());\\n    vertexMap[m_vertices[vertIdx]] = newIndex;\\n    uniqueVertices.push_back(m_vertices[vertIdx]);\\n    m_indices[i] = newIndex;\\n  } else {\\n    m_indices[i] = vertexMap[m_vertices[vertIdx]];\\n  }\\n}\\nuniqueVertices.shrink_to_fit();\\nm_vertices = std::move(uniqueVertices);\\nPHY_INFO(\\"after deduplicate: {} vertices, {} indices\\",\\n         m_vertices.size(), m_indices.size());\\n```\\n\\n\\n\\n**\u62fc\u63a5mesh**\\n\\n```cpp\\nfor (const auto &mesh: m_model->m_meshes) {\\n        m_indices.reserve(m_indices.size() + mesh.indices.size());\\n        auto tempSize = m_vertices.size();  // \u6613\u9519\\n        for(int i = 0; i < mesh.indices.size(); i++){\\n            m_indices.push_back(mesh.indices[i] + tempSize);\\n        }\\n        m_vertices.reserve(m_vertices.size() + mesh.vertices.size());\\n        m_vertices.insert(m_vertices.end(), mesh.vertices.begin(), mesh.vertices.end());\\n    }\\n```\\n\\n\\n\\n\\n\\n\\n\\n### switch case\\n\\n\u539f\u7406\u662f\u8df3\u8f6c\u5230\u76f8\u5e94\u7684case\u5f80\u4e0b\u6267\u884c\uff0c\u6240\u4ee5\u5fc5\u987b\u52a0break\\n\\n```cpp\\nswitch(x):\\ncase a:\\n\\tbreak;\\ncase b:\\n\\tbreak;\\n```\\n\\n\\n\\n### IMGUI \u4e0e renderer\u5c42\u7ea7\\n\\nIMGUI\u9762\u677f\u5728\u9876\u5c42\uff0c\u6240\u4ee5\u653e\u5728\u540e\u9762\\n\\n```cpp\\n///////////// physics\\nm_physics->Update(dt);\\n\\n///////////// renderer\\nm_camera.Update(dt);\\nm_renderer.Update(m_camera);\\nauto renderList = m_scene->GetObjects();\\nm_renderer.Render(m_camera, renderList.cbegin(), renderList.cend());\\n\\n\\n//////////// Gui\\nm_gui->Draw(m_window.m_window);\\n```\\n\\n### \u9f20\u6807\u5728IMGUI\u9762\u677f\u4e0a\u65f6\u7981\u7528\u6444\u50cf\u5934\u8f6c\u52a8\\n\\n\u5728gui\u7c7b\u91ccinclude Input.h\uff0c Input\u7c7b\u4e2d\u58f0\u660ebool m_mouseClickEnabled, \u540c\u65f6\u76d1\u542c\u9f20\u6807\u4e0e\u9762\u677f\u7684\u5173\u7cfb\uff0c\u5bf9m_mouseClickEnabled\u8fdb\u884c\u4fee\u6539\uff0cMouseClicked\u76d1\u542c\u4e8b\u4ef6\u52a0\u5165\u5224\u65ad\\n\\n```cpp\\nstd::function<void(int, int, int)> mouseClicked = [&](auto button, auto action, auto mode){\\n  if(m_mouseClickEnabled && button >= 0 && button < 128){\\n    switch (action){\\n      case GLFW_PRESS:\\n        //                    PHY_INFO(\\"press\\");\\n        m_buttons[button] = true;\\n        break;\\n      case GLFW_RELEASE:\\n        m_buttons[button] = false;\\n        //                    PHY_INFO(\\"release\\");\\n        break;\\n    }\\n  }\\n};\\n```\\n\\ngui\u7c7b\u5185\\n\\n```cpp\\n if (ImGui::IsWindowHovered())\\n        {\\n            // Disable mouse actions by capturing mouse input events\\n//            ImGui::CaptureMouseFromApp(true);\\n            Input::GetInstance().disableMouse();\\n            // Optionally, you can also disable keyboard input events\\n            // ImGui::CaptureKeyboardFromApp(true);\\n        }else{\\n            // Release mouse input events when the mouse is not hovering\\n//            ImGui::CaptureMouseFromApp(false);\\n            Input::GetInstance().enableMouse();\\n            // Optionally, release keyboard input events\\n            // ImGui::CaptureKeyboardFromApp(false);\\n        }\\n```\\n\\n\\n\\n### \u5168\u5c40\u53d8\u91cf static / extern\\n\\n\u7f16\u8bd1\u5355\u5143\u5c31\u662f\u4e00\u4e2acpp\uff0c\u5e76\u4e14\u5c55\u5f00\u91cc\u9762\u6240\u6709\u7684#include\\n\\n#### static \u5b9a\u4e49\u672c\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\\n\\n```cpp\\n// Base.h\\nstatic int x;\\n\\n// A.cpp (A \u7f16\u8bd1\u5355\u5143)\\n#include <Base.h>\\nx = 1; // A_x\\n\\n// B.cpp (B\u7f16\u8bd1\u5355\u5143)\\n#include <Base.h>\\nx = 2;  // B_x\\n\\n\\n// A_x\u548cB_x\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u5730\u5740 \u662f\u4e0d\u4e00\u6837\u7684\\n```\\n\\n#### extern \u58f0\u660e\u672c\u7f16\u8bd1\u5355\u5143\u6216\u5176\u4ed6\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\\n\\n\u9996\u5148\u662f**\u5b9a\u4e49**\u548c**\u58f0\u660e**\u7684\u533a\u522b\\n\\n```cpp\\nint x; // \u5b9a\u4e49 \u672a\u521d\u59cb\u5316\\nint y = 1; // \u5b9a\u4e49 \u5e76\u521d\u59cb\u5316\\nextern int x; // \u58f0\u660e\\nextern int x = 0; // \u5b9a\u4e49\uff0c\u80fd\u7f16\u8bd1\u4f46\u4e00\u822c\u4e0d\u8fd9\u4e48\u7528\\n```\\n\\n\\n\\n\u8fd9\u91cc\u7684\u5168\u5c40\uff0c\u53ea\u80fd\u7528\u4e8e**\u76f8\u4e92\u94fe\u63a5**\u7684\u67d0\u4e00\u4e2a\u6216\u51e0\u4e2a\u5e93(STATIC, SHARED\u90fd\u53ef\u4ee5)\u3001\u6216executable\\n\\n\u76f8\u4e92\u94fe\u63a5\u662f\u901a\u8fc7```target_link_libraries(lib_a PUBLIC lib_b)```\\n\\n\u5728\u6253\u5305\u67d0\u4e00\u4e2a\u5e93\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u4ed6\u7528\u5230\u7684\u5168\u5c40\u53d8\u91cf\u5728[\u8fd9\u4e2a\u5e93\u6216\u4ed6\u94fe\u63a5\u7684\u5e93\u5185\u90e8]**\u5b9a\u4e49**\\n\\n```cpp\\nadd_library(render A.cpp B.cpp C.cpp)\\n  \\nadd_library(physic D.cpp)  \\ntarget_link_libraries(physic render) \\n  // physics\u53ea\u80fd\u7528render\uff0cphysics\u91cc\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\\n  // \u800crender\u5e76\u4e0d\u80fd\u7528physics\u91cc\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\\n  \\n  \\nadd_executable(main main.cpp)\\ntarget_link_libraries(main render physic) \\n  // main\u53ea\u80fd\u7528render\uff0cphysics\u91cc\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\\n  // \u800crender,physics\u5e76\u4e0d\u80fd\u7528main\u91cc\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\\n```\\n\\n\\n\\n```cpp\\n// case 0\\nadd_executable(main A.cpp B.cpp C.cpp)\\n  \\n// case 1\\n// D.cpp\u67e5\u627e\u4e0d\u5230A.cpp\u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\\n//  Undefined symbols\\n// \u56e0\u4e3aphysic\u548crender\u662f\u4e24\u4e2a\u72ec\u7acb\u7684\u5e93\uff0c\u6240\u4ee5\u4e92\u76f8\u67e5\u4e0d\u5230 \u53ef\u4ee5\u901a\u8fc7target_link_libraries(physic render)\u89e3\u51b3\\nadd_library(render A.cpp B.cpp C.cpp)\\nadd_library(physic D.cpp)  \\nadd_executable(main main.cpp)\\ntarget_link_libraries(main render physic)\\n  \\n// case 2\\n// \u53ef\u4ee5\u7684 \u56e0\u4e3amain\u94fe\u63a5\u4e86render\u5e93\\nadd_library(render A.cpp B.cpp C.cpp)\\nadd_executable(main main.cpp)\\ntarget_link_libraries(main render)\\n```\\n\\n\\n\\n\u5728\u67d0\u4e00\u4e2a\u6a21\u5757\u91cc**\u5b9a\u4e49**\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u672c\u6a21\u5757\u6216\u5176\u4ed6\u6a21\u5757\u4f7f\u7528\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u9700\u8981**\u58f0\u660e**\\n\\n* \u5fc5\u987b\u5728cpp\u4e2d**\u5b9a\u4e49**\u5168\u5c40\u53d8\u91cf\uff0c\u5426\u5219\u53ef\u80fd\u4f1aredefinition error\\n\\n```cpp\\n// A.cpp\\nint x; // \u6ce8\u610f\u8fd9\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u6ca1\u6709\u521d\u59cb\u5316\\nvoid f(){\\n  x = 5;\\n}\\n\\n// B.cpp\\nextern int x; // \u52a0\u4e86extern\u8868\u793a\u58f0\u660e\\nx = 6;\\n\\n// C.cpp\\nextern int x; // \u52a0\u4e86extern\u8868\u793a\u58f0\u660e\\nstd::cout << x;\\n```\\n\\n* \u5728header\u4e2d\u58f0\u660e\uff0c\u7528\u4e8e\u7b80\u5316\\n\\n```cpp\\n// A.cpp\\nint x; // \u6ce8\u610f\u8fd9\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u6ca1\u6709\u521d\u59cb\u5316\\nvoid f(){\\n  x = 5;\\n}\\n\\n// Base.h\\nextern int x;// \u52a0\u4e86extern\u8868\u793a\u58f0\u660e\\n\\n// B.cpp\\n#include <Base.h> \\nx = 6;\\n\\n// C.cpp\\n#include <Base.h>\\nstd::cout << x;\\n```\\n\\n\\n\\n* \u5728header\u4e2d\u5b9a\u4e49\u7684\u8bdd\\n\\n```cpp\\n////// \u6b63\u786e\\n// A.h\\nextern int x; // \u58f0\u660e \u5728\u672c\u6a21\u5757\u6216\u5176\u4ed6\u6a21\u5757\u5b58\u5728x\u7684\u5b9a\u4e49\\n\\n// A.cpp\\n#include \\"A.h\\"\\nint x = 5;\\nint main(){\\n    std::cout << x;\\n}\\n\\n\\n////// \u9519\u8bef redifinition\\n// A.h\\nextern int x = 0; // \u8fd9\u662f\u5b9a\u4e49\\n\\n// A.cpp\\nint x = 5;\\nint main(){\\n    std::cout << x;\\n}\\n```\\n\\n#### \u5b9e\u8df5\\n\\n\u5728demo\u91cc\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\uff0c\u63a7\u5236imgui\u4e8b\u4ef6\u5bf9\u6e32\u67d3\u3001\u4eff\u771f\u7ed3\u679c\u505a\u51fa\u6539\u53d8\\n\\n```cpp\\n// demo.cpp\\n\\n// \u5b9a\u4e49\u53ea\u5728demo.cpp\u4f1a\u7528\u5230\u7684\u53d8\u91cf\\nnamespace control{\\n    static geo::BVHNode* currNode;\\n    static vec3 ground_color = {0.2, 0.4, 0.6};\\n    static vec3 ground_pos = vec3(0, -1.2, 0);\\n    static vec3 ground_halfSize = vec3(100, 1.2, 100);\\n    static int show_level = 10;\\n}\\n\\n// \u58f0\u660e\u9700\u8981\u53bb\u5916\u90e8\u627e\u7684\u53d8\u91cf\\nnamespace control{\\n    extern vec4 clear_color;\\n    extern geo::BVHSplitStrategy bvh_strategy;\\n}\\nvoid f(){control::clear_color ....}\\n\\n// RenderSystem.cpp\\n// \u58f0\u660e\u9700\u8981\u53bb\u5916\u90e8\u627e\u7684\u53d8\u91cf\\nnamespace control{\\n    extern vec4 clear_color;\\n}\\nvoid f(){control::clear_color ....}\\n\\n// GuiSystem.cpp\\n// \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\\nnamespace control{\\n    vec4 clear_color = vec4(0.45f, 0.55f, 0.60f, 1.00f);\\n}\\n\\n\\n// \u5305\u542b\u5173\u7cfb\\nadd_library(Gui GuiSystem.cpp)\\n  \\nadd_library(RenderSystem RenderSystem.cpp)\\ntarget_link_libraries(RenderSystem Gui)\\n\\nadd_executable(demo demo.cpp)\\ntarget_link_libraries(demo RenderSystem Gui)\\n\\n```\\n\\n### \u865a\u51fd\u6570\\n\\nDerived\u7c7b\u7684\u7b2c\u4e00\u4e2a\u865a\u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\uff0c\u53ea\u58f0\u660e\u4e0d\u5b9a\u4e49\u4f1a\u62a5\u9519\\n\\n```cpp\\nUndefined symbols for architecture x86_64:\\n  \\"vtable for Cloth\\", referenced from:\\n      ActorBase<geo::Model>::InitPhysicsObject() in BVHTest.cpp.o\\n  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.\\n```\\n\\n**\u865a\u51fd\u6570\u7684\u9ed8\u8ba4\u53c2\u6570\u4e0d\u4f1a\u88ab\u7ee7\u627f**\uff0c\u901a\u8fc7\u4ec0\u4e48\u7c7b\u578b\u7684\u6307\u9488\u8c03\u7528\uff0c\u5c31\u4f1a\u7528\u5bf9\u5e94\u7684\u9ed8\u8ba4\u53c2\u6570\\n\\n### opengl\\n\\nglDrawElement \u5982\u679c\u753b\u7684\u662f\u4e09\u89d2\u5f62primitive\uff0c\u5e76\u4e14ebo\u51fa\u73b0 \uff081\uff0c1\uff0c0\uff09\u8fd9\u6837\u91cd\u590d\u7684\u9876\u70b9\u4f1a\u62a5\u9519\\n\\n### Texture uv\u5750\u6807\\n\\nstb_image\u8bfb\u53d6\u7684\u56fe\u7247\u548copengl\u6e32\u67d3\u7ba1\u7ebf\u8bfb\u5165\u7684 y\u5750\u6807\u8981\u8fd4\u8f6c\u4e00\u4e0b\\n\\nhttps://gamedev.stackexchange.com/questions/140789/texture-coordinates-seem-to-have-flipped-or-incorrect-position\\n\\n```cpp\\nm_coord[i] = vec2(vertices[i].TextureCoordinate.X,\\n                  1- vertices[i].TextureCoordinate.Y);\\n```"},{"id":"/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1","metadata":{"permalink":"/blog/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1.md","source":"@site/blog/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1.md","title":"\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics","description":"\u4ee3\u7801\u5b9e\u73b0\u8fc7\u7a0b\u8bb0\u5f55","date":"2023-03-03T15:25:44.000Z","formattedDate":"March 3, 2023","tags":[{"label":"rendering","permalink":"/blog/tags/rendering"}],"readingTime":9.76,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics","tags":["rendering"]},"prevItem":{"title":"\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine","permalink":"/blog/\u9879\u76ee/CAD\u8bfe\u7a0b\u4f5c\u4e1a\uff1a\u7269\u7406\u5f15\u64ce/PhysicEngine"},"nextItem":{"title":"\u5165\u95e8\uff1aC++\u9762\u5411\u5bf9\u8c61","permalink":"/blog/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1"}},"content":"\x3c!--truncate--\x3e\\n\\n## \u4ee3\u7801\u5b9e\u73b0\u8fc7\u7a0b\u8bb0\u5f55\\n\\n\u5177\u4f53\u4ee3\u7801\u89c1https://github.com/CanoeByGuitar/chenhui-lib\\n\\n### \u5149\u7ebf\u548c\u5404\u79cd\u7269\u4f53\u6c42\u4ea4\\n\\n![image-20230311143332619](assets/image-20230311143332619.png)\\n\\n![image-20230311143310242](assets/image-20230311143310242.png\\n\\n![image-20230311143322657](assets/image-20230311143322657.png)\\n\\n![image-20230311143345703](assets/image-20230311143345703.png)\\n\\n> \u4e0a\u9762\u90a3\u4e2a\u628a\u6cd5\u7ebf\u4ece[-1,1]\u6620\u5c04\u5230[0,255,255]\\n\\n\u5e26\u6709Anti-aliasing\u7684\u591a\u7269\u4f53\u6c42\u4ea4\\n\\n![image-20230311143820082](assets/image-20230311143820082.png)\\n\\n![image-20230311143840947](assets/image-20230311143840947.png)\\n\\n### Lambertian Shading\\n\\n```cpp\\n// light\\nvec3 light_pos(0,4,-2);\\n    float intensity = 1.f;\\n    Light light(light_pos, intensity);\\n```\\n\\n```cpp\\n// World\\n    Material *m = new Material(vec3(100, 100, 100));\\n    SurfaceList world(nullptr);\\n    world.add(std::make_shared<Circle>(Circle(m, vec3(0, 0, -1), 0.5)));\\n    world.add(std::make_shared<Circle>(Circle(m, vec3(0, -100.5, -1), 100)));\\n```\\n\\n\\n\\n```cpp\\nvec3 ray_color(SurfaceList &world, Ray r, Light light){\\n    Intersection inter1;\\n    vec3 color(0, 0, 0);\\n    if(world.getIntersect(r, 0.f, INF, inter1)){\\n        auto p = inter1.point;\\n        auto n = inter1.normal;\\n        auto light_ray = Ray(p, light.pos - p);\\n        auto l = light_ray.direction();\\n        auto k_d = inter1.m->k_d;\\n        Intersection inter2;\\n        if(world.getIntersect(light_ray, 0.f, INF, inter2)){\\n            // light cannot arrive at obj\\n        }else{\\n            auto I = light.intensity;\\n            color += k_d * max(n * l, 0.f) * I;\\n        }\\n    }\\n    return color;\\n}\\n```\\n\\n\\n\\n![image-20230311142508493](assets/image-20230311142508493.png)\\n\\n\\n\\n\u68c0\u67e5\u4ee3\u7801 \u6750\u8d28\u91cc\u7684k_d\u5e94\u8be5\u662f[0,1]\u533a\u95f4\u800c\u4e0d\u662f[0,255]\\n\\n```cpp\\nMaterial *m = new Material(vec3(0.7f, 0.7f, 0.7f));\\n```\\n\\n![image-20230311143039992](assets/image-20230311143039992.png)\\n\\n\\n\\n### Blinn-Phong Shading\\n\\n\u7ed9\u8f93\u51facolor\u52a0\u4e86\u4e00\u4e2aclamp\uff0c\u8d85\u8fc71\u7684\u8f93\u51fa1\uff0c\u5426\u5219ppm\u4f1a\u88ab\u5927\u4e8e255\u7684\u6570\u89e3\u6790\u6210\u9ed1\u7684\\n\\n![image-20230311145558608](assets/image-20230311145558608.png)\\n\\n\\n\\n\u4e0b\u56fe\u7684\u53c2\u6570\u4e3a\uff1a\\n\\n```cpp\\n// World\\n    auto *m1 = new Material(vec3(1, 0, 0), vec3(1, 0, 0), vec3(1, 0, 0));\\n    auto *m2 = new Material(vec3(0, 1, 0), vec3(0, 1, 0), vec3(0, 1, 0));\\n    auto *m3 = new Material(vec3(0.25, 0.25, 0.25), vec3(0.25, 0.25, 0.25), vec3(0.25, 0.25, 0.25));\\n    SurfaceList world(nullptr);\\n    world.add(std::make_shared<Circle>(Circle(m1, vec3(0.42, -0.08, -1.5), 0.4)));\\n    world.add(std::make_shared<Circle>(Circle(m2, vec3(-0.35, -0.1, -1.3), 0.35)));\\n    world.add(std::make_shared<Circle>(Circle(m3, vec3(0, -100.5, -1), 100)));\\n\\n    // light\\n    std::vector<Light> light_list;\\n    light_list.emplace_back(vec3(-4, 4, -3), 0.2f);\\n    light_list.emplace_back(vec3(4, 4, -3), 0.5f);\\n    light_list.emplace_back(vec3(0, 6, 0), 0.3f);\\n```\\n\\n```cpp\\nvec3 ray_color(SurfaceList &world, Ray r, const std::vector<Light> &light_list) {\\n    Intersection inter1;\\n    vec3 color(0, 0, 0);\\n    if (world.getIntersect(r, 0.f, INF, inter1)) {\\n        auto p = inter1.point;\\n        auto n = inter1.normal;\\n        auto v = -r.direction();\\n        auto k_d = inter1.m->k_d;\\n        auto k_s = inter1.m->k_s;\\n        auto k_a = inter1.m->k_a;\\n        // ambient shading\\n        float I_a = 0.2;\\n        color += k_a * I_a;\\n        for (auto light: light_list) {\\n            auto light_ray = Ray(p, light.pos - p);\\n            auto l = light_ray.direction();\\n            auto h = unit_vec((v + l));\\n            Intersection inter2;\\n            if (world.getIntersect(light_ray, 0.f, INF, inter2)) {\\n                // light cannot arrive at obj\\n            } else {\\n                auto I = light.intensity;\\n                color += k_d * max(n * l, 0.f) * I + k_s * I * pow(max(0.f, n * h), 10);\\n            }\\n        }\\n    }else{\\n        // background color\\n        return vec3(0.847, 0.914, 0.996);\\n    }\\n    return clamp(color, 0, 1);\\n}\\n```\\n\\n\u8c03\u6574\u4e0b\u9762\u7684p\u5f97\u5230\u4e0d\u540c\u7684\u6750\u8d28\\n\\n```L = k_d* I * max(0,n.dot(l))+ k_s* I  * max(0,n.dot(h))^p // p\u662f\u4e3a\u4e86\u52a0\u901f\u4ece\u9ad8\u5149\u5230\u6d88\u5931\u7684\u53d8\u5316\u6548\u679c\u7684```\\n\\n![image-20230311162947638](assets/image-20230311162947638.png)\\n\\n![image-20230311164147390](assets/image-20230311164147390.png)\\n\\n## Math\\n\\n### \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb\\n\\n![image-20230222153001768](assets/image-20230222153001768.png)\\n\\n\\n\\n### \u8ba1\u7b97\u884c\u5217\u5f0f\\n\\nLU\u5206\u89e3 L\u4e0b\u4e09\u89d2 U\u4e0a\u4e09\u89d2\\n\\n### \u53d8\u6362\u77e9\u9635\\n\\n\u9996\u5148\u6ce8\u610f\uff0c**\u6b63\u4ea4\u77e9\u9635\u5305\u62ec\u65cb\u8f6c\u548c\u955c\u9762\u53cd\u5c04\u4e24\u79cd\u60c5\u51b5**\\n\\n$A=A^{T}$ \\n\\ndet(A) == 1 ==> rotation \\n\\ndet(A) == -1 ==> reflection\\n\\n\u4efb\u610f\u4e00\u4e2a\u5bf9\u6210\u77e9\u9635A\uff0c\u90fd\u8868\u793a\u6cbf\u7740\u67d0\u4e00\u4e2a\u65b9\u5411\uff08x\'oy\')\u8fdb\u884c\u653e\u7f29\uff0cx\'oy\'\u7531\u7279\u5f81\u5411\u91cf\u7ec4\u6210\\n\\n==symmetric matrices can be decomposed via eigenvalue diagonalization into a rotation times a scale times the inverse-rotation==\\n\\n![image-20230225021423520](assets/image-20230225021423520.png)\\n\\n\u76f8\u4f3c\u5bf9\u89d2\u5316$ A =   R  S R^{T} $\\n\\n\u65cb\u8f6c ==> \u653e\u7f29 ==> \u8f6c\u56de\u6765\\n\\n\\n\\n3D \u65cb\u8f6c\u77e9\u9635\\n\\n![image-20230225221351128](assets/image-20230225221351128.png)\\n\\n### SVD\\n\\nsingular value decomposition\\n\\n==every matrix can be decomposed via SVD into a rotation times a scale times another rotation==\\n\\n![image-20230225021509148](assets/image-20230225021509148.png)\\n\\n\\n\\n>  \u5982\u4f55\u89e3\u51b3\u6b63\u4ea4\u77e9\u9635\u4e0d\u4e00\u5b9a\u662f\u65cb\u8f6c\u77e9\u9635\u7684\u95ee\u9898\uff1f(Dynamic Deformables P181)\\n\\n**\u624b\u7b97SVD\u5206\u89e3\uff1a**\\n\\n$A = UBV^T ==> AA^T = UB^TBU^T$\\n\\n$A = UBV^T ==> A^TA = VB^TBV^T$\\n\\n\u5bf9\u79f0\u77e9\u9635\u6b63\u4ea4\u76f8\u4f3c\u5316\uff0c\u6c42\u7279\u5f81\u503c\u3001\u7279\u5f81\u5411\u91cf, \u7279\u5f81\u503c\u5f00\u6839\u5c31\u662fB\uff0c\u539f\u5219\u4e0a\u7edf\u4e00\u53d6B\u4e3a\u6b63\u7684\u3002\\n\\n**\u6781\u5206\u89e3**\uff1a\\n\\n\u4efb\u610f\u4e00\u4e2a\u77e9\u9635A\u53ef\u4ee5\u5206\u89e3\u4e3a $A = R S$\\n\\n\u5176\u4e2dR\u662f \u6b63\u4ea4\u77e9\u9635\uff0c S\u662f\u5bf9\u79f0\u534a\u6b63\u5b9a\u77e9\u9635\\n\\n\u5206\u89e3\u8fc7\u7a0b\u501f\u52a9\u4e8eSVD\\n\\n$A=UBV^T = (UV^T) (VBV^T)$\\n\\n\u4ee4$R = UV^T$, $S = VBV^T$ \\n\\n\u56e0\u4e3aU V\u4e3a\u6b63\u4ea4\u77e9\u9635\uff0c\u6240\u4ee5$UV^T$\u4e5f\u662f\u6b63\u4ea4\u77e9\u9635\uff08\u4e58\u81ea\u5df1\u8f6c\u7f6e\u4e3aE\uff09\\n\\nB\u662f\u5bf9\u89d2\u9635\uff0c\u4e14\u6b63\u5b9a\uff0c\u6240\u4ee5S\u5bf9\u79f0\u6b63\u5b9a\u3002\\n\\n**\u5b9e\u73b0**\uff08JacobiSVD\uff09\\n\\n> https://zhuanlan.zhihu.com/p/459369233\\n>\\n> Matrix Computation(2013) p447\\n\\n* \u5148\u7b97\u6781\u5206\u89e3\uff0c $A = R S$\uff0c\u5f97\u5230\u5bf9\u79f0\u77e9\u9635S\\n* \u5bf9S\u8fdb\u884c**Jacobi\uff08Givens\uff09\u65cb\u8f6c\u5bf9\u89d2\u5316**\uff0c\u53bb\u6389\u975e\u4e3b\u5bf9\u89d2\u7684\u975e\u96f6\u5143\u7d20\\n\\n$\\\\frac{\\\\partial f(z)}{\\\\partial \\\\Im z}=i \\\\frac{\\\\partial f(z)}{\\\\partial \\\\Re z}$\\n\\n### \u9f50\u6b21\u5750\u6807\uff08*homogeneous coordinates*\uff09\\n\\n\u70b9 ==> (x, y, 1)\\n\\n\u65b9\u5411 ==> (x, y, 0)\\n\\n## Ray tracing\\n\\n```cpp\\nfor each pixel do\\n  compute view ray\\n  find first hit object and its norml n\\n  set pixel color from hit point, light, normal n\\n```\\n\\n\\n\\n### Gen rays\\n\\n![image-20230220215106252](assets/image-20230220215106252.png)\\n\\n\\n\\n$p(t)=e+(s-e)t$\\n\\n![image-20230220215229532](assets/image-20230220215229532.png)\\n\\n![image-20230220215237979](assets/image-20230220215237979.png)\\n\\n\u76f8\u673a\u7684view port\u662fw\u7684\u53cd\u65b9\u5411\uff08Opengl\u91cc\u4e5f\u662f\u5982\u6b64\uff09\u3002\\n\\n![image-20230220221002172](assets/image-20230220221002172.png)\\n\\n#### Orthographic view\\n\\n```cpp\\n// input [l,r,b,t, nx, ny, u, v, w]\\n// pixel (i,j)  ==> position coordinates\\npx = l + (r - l) / nx * (i + 0.5)\\npy = b + (t - b) / ny * (j + 0.5)\\n\\nray.direction = -w\\nray.origin = e + px * u + py * v\\n```\\n\\n\\n\\n#### Perspective Views\\n\\n```cpp\\npx = l + (r - l) / nx * (i + 0.5)\\npy = b + (t - b) / ny * (j + 0.5)\\n\\nray.direction = -d * w + px * u + py * v;\\nray.origin = e;\\n```\\n\\n### Ray-Object intersection\\n\\n##### Ray-Sphere\\n\\n![image-20230221213907621](assets/image-20230221213907621.png)\\n\\n![image-20230221213919969](assets/image-20230221213919969.png)\\n\\n##### Ray-Triangle\\n\\n![image-20230221215048656](assets/image-20230221215048656.png)\\n\\n![image-20230221215210083](assets/image-20230221215210083.png)\\n\\n```cpp\\n// ray-triangle intersection\\ncompute t\\nif(t < t0 || t > t1) return false;\\ncompute gamma;\\nif(gamma < 0 || gamma > 1) return false;\\ncompute beta;\\nif(beta < 0 || beta > 1 - gamma) return false;\\nreturn true;\\n```\\n\\n##### Ray-Polygon\\n\\n![image-20230221221501295](assets/image-20230221221501295.png)\\n\\n![image-20230307233719862](assets/image-20230307233719862.png)\\n\\n2D\u5224\u65adp\u5728\u591a\u8fb9\u5f62\u5185/\u5916\\n\\n```cpp\\nray from p intersects with polygon boundary\\ncount the hit number h\\nif(h is odd) return inside\\nelse return outside\\n```\\n\\n\\n\\n![image-20230221221516596](assets/image-20230221221516596.png)\\n\\n##### A group of Objects\\n\\n```cpp\\n// input [t0, t1] ray\\nintersection{\\n  bool hit = false\\n  for(each object o: group){\\n    if(o intersets ray in t && t >= t0 && t < t1){\\n      hit = true;\\n      hit_obj = o;\\n      t1 = t;\\n    }\\n  }\\n  return hit\\n}\\n\\n```\\n\\n\\n\\n\\n\\n### Shading\\n\\nimportant variables: \\n\\n* light direction **l**\\n\\n* view dirction **v**\\n* ![image-20230222221603312](assets/image-20230222221603312.png)\\n\\n#### Lambertian Shading\\n\\n\u843d\u5728surface\u4e0a\u7684\u5149\u7684\u91cf\u53ea\u548c\u5165\u5c04\u89d2\u5ea6\u76f8\u5173\uff08view independent \u4e0d\u8003\u8651\u4eba\u773c\u4f4d\u7f6e\u770b\u5230\u7684\u5149\u7684\u4e0d\u540c\uff09\\n\\n* \u5782\u76f4\u7684\u65f6\u5019 \u5149\u6700\u591a\\n\\n* \u76f8\u5207\u7684\u65f6\u5019 \u5149\u4e3a0\\n\\n* \u4e24\u8005\u4e4b\u95f4\u65f6\uff0c\u548c\u5165\u5c04\u5149\u4e0eface normal\u7684\u5939\u89d2theta\u6210\u6b63\u6bd4\u3002\\n\\n  ```cpp\\n  L = k_d * I * max(0, n.dot(l)); \\n  \\n  // k_d: diffuse coef / surface color    3 channels\\n  // I: light intensity     3 channels\\n  // n: unit face normal\\n  // l: unit light dir\\n  ```\\n\\n  \\n\\n#### Blinn-Phong Shading\\n\\n\u5728Lambertian\u7684\u57fa\u7840\u4e0a\u989d\u5916\u8003\u8651\u9ad8\u5149\uff08Phong\u548cBlinn\u4e24\u4e2a\u4eba\u5206\u522b\u5b8c\u6210\u548c\u6539\u8fdb\uff09\\n\\n![image-20230223012824894](assets/image-20230223012824894.png)\\n\\n```cpp\\nh = (v + l).norm()\\n  // Labert diffusion  + specular\\nL = k_d* I * max(0,n.dot(l))+ k_s* I  * max(0,n.dot(h))^p // p\u662f\u4e3a\u4e86\u52a0\u901f\u4ece\u9ad8\u5149\u5230\u6d88\u5931\u7684\u53d8\u5316\u6548\u679c\u7684\\n```\\n\\n#### Ambient Shading\\n\\n\u7136\u800c\u5728\u65e9\u671f\u7684blinn-phong\u6a21\u578b\u4e0b\uff0c\u6ca1\u6709\u88ab\u5149\u6e90\u76f4\u63a5\u7167\u5c04\u7684\u5730\u65b9\u5c31\u662f\u7eaf\u9ed1\u7684\uff0c\u56e0\u4e3ablinn-phong\u4e0d\u8003\u8651\u95f4\u63a5\u5149\uff0c\u6240\u4ee5\u4e00\u4e2a\u8ba8\u5de7\u7684\u65b9\u6cd5\u662f\uff0c\\n\\n\u7ed9surface\u8868\u9762\u9ed8\u8ba4\u9644\u4e0a\u4e00\u4e2a\u989c\u8272\uff0c\u53ebambient shading\\n\\n\u4ee5\u4e0a\u4e09\u5757\u6574\u4f53\u6784\u6210blinn-phong\u6a21\u578b\\n\\n```cpp\\nL = diffusion + specular + ambient(\u73af\u5883\u5149)\\nL = k_d* I * max(0,n.dot(l))+ k_s* I  * max(0,n.dot(h))^p + k_a * I_a // \u53ef\u4ee5\u6240\u6709\u7684surface k_a\u90fd\u76f8\u540c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4e00\u6837\\n```\\n\\n![image-20230311145636904](assets/image-20230311145636904.png)\\n\\n#### Multiple Point Lights\\n\\n![image-20230223013800906](assets/image-20230223013800906.png)\\n\\n> \u7591\u95ee\uff1a$I$\u600e\u4e48\u8bbe\u5b9a, \u4e0d\u4f1a\u4ea7\u751f\u8fc7\u7206\u5417\uff1f\\n\\n\\n\\n### A ray tracing program\\n\\n```cpp\\nfor each pixel{\\n  compute viewing ray r\\n  if(r hits a object with t in [0, +inf]){\\n    compute normal n;\\n    evaluating shading and set color to the pixel\\n  }else{\\n    set pixel to background color\\n  }\\n}\\n```\\n\\nOOP\u7c7b\u8bbe\u8ba1\\n\\n```cpp\\nclass surface: geometry{\\n  virtual bool hit(ray r+td, real t0, real t1, hit_record rec);\\n  virtual box bounding_box()\\n    \\n  private material *mtl;\\n}\\n\\nclass sphere:surface{\\n  box bounding_box(){\\n    vec3 min = center - vec3(radius, radius, radius);\\n    vec3 max = center + vec3(radius, radius, radius);\\n    return box(min, max);\\n  }\\n}\\n```\\n\\n### Shadows\\n\\n![image-20230223191948973](assets/image-20230223191948973.png)\\n\\nshadow ray\uff08\u533a\u5206\u4e0eview ray\uff09 \u7528\u6765\u5224\u65ad\u662f\u5426\u5728\u9634\u5f71\u4e2d\uff08\u5982\u679chit\u4e86object\uff0c\u5219\u5728\u9634\u5f71\u4e2d\uff09\\n\\n```cpp\\np+t*l, t in [0,+inf)\\n             \\n// \u5b9e\u8df5\u4e2d\u901a\u5e38\u4e3a\\nt in [kesi, +inf] // \u9632\u6b62\u6570\u503c\u8bef\u5dee\u5bfc\u81f4intersect with p\u672c\u8eab\u5728\u7684\u5e73\u9762\u3002\\n```\\n\\n![image-20230223205039759](assets/image-20230223205039759.png)\\n\\n\u81f3\u6b64\uff0c\u66f4\u65b0ray tracing\u4e2d\u8ba1\u7b97\u67d0\u4e2a\u50cf\u7d20\u989c\u8272\u7684\u7b97\u6cd5\\n\\n```cpp\\nraycolor(e+t*d, t0, t1){\\n  if(hit(e + t*d, t0, t1, &rec)){\\n    p = e + (hit_record).t * d;\\n    color c = rec.k_a * I_a; // ambient light\\n    \\n    // \u5224\u65ad\u80fd\u5426\u88ab\u5149\u6e90\u7167\u5230\\n    if(not hit(p + s*l, kesi,inf, &second_record)){\\n      // \u6ca1\u6709\u9634\u5f71\\n      vec3 h = (l.norm() + (-d).norm()).norm();\\n      c = c + rec.k_d*I*max(0, n*l) + rec.k_s * I * (n  * h)^(rec.p);\\n    }else{\\n      // \u6709\u9634\u5f71\u4e0d\u505a\u5176\u4ed6\u5904\u7406\\n    }\\n  }else{\\n    // \u6ca1\u6709\u770b\u5230\u7269\u4f53\\n    return background;\\n  }\\n}\\n```\\n\\n## Viewing\\n\\nObject Space   ==>  World Space ==> Camera Space ==> Canonical View Volume$[-1,-1]^2$ ==> Screen Space\\n\\n  \\t\\t\\t\\t\\t\\tM\\t\\t\\t\\t\\t\\t\\t V\\t\\t\\t\\t\\t\\t\\t\\tP\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tviewport transformation\\n\\n\\n\\n\u4e00\u4e9b\u522b\u79f0\uff1a\\n\\nCanonical View Volume\uff1a **Clip Space**\uff0c Normalized device coordinates\uff08**NDC**\uff09\\n\\n\\n\\n\\n\\n![image-20230309004657706](assets/image-20230309004657706.png)\\n\\n\\n\\n\\n\\n### Viewport Transformation\\n\\n$[-1,1]^2 ==> [-0.5, nx-0.5] \\\\times [-0.5,ny-0.5]$\\n\\n![image-20230309010736288](assets/image-20230309010736288.png)\\n\\n\u52a0\u4e0az\u8f74\uff0c\u8ba9z\u4fdd\u6301\u4e0d\u53d8\\n\\n![image-20230309010805176](assets/image-20230309010805176.png)\\n\\n### Projection transformation\\n\\n#### Orthographic\\n\\n $[l, r] \xd7 [b, t] \xd7 [f, n] ==> [-1,1]^3$\\n\\n\u524d\u8005\u53d6\u51b3\u4e8e\u7528\u6237\u8bbe\u5b9a\\n\\n![image-20230309013611534](assets/image-20230309013611534.png)\\n\\ne.g:\\n\\nn = -0.01\\n\\nf = -150\\n\\n![image-20230309013717698](assets/image-20230309013717698.png)\\n\\n#### Projective\\n\\n\\n\\n\\n\\n### View\uff08Camera\uff09 transformation\\n\\n**world space[x,y,z]  ===> camera space[u, v, w]**\\n\\n[u, v, w] can be generated from camera info\uff1a\\n\\n* eye position: **e**\\n* gaze direction: **g**\\n* view-up vector: **t** \u53ea\u662f\u628a\u89c2\u5bdf\u8005\u7684\u5934\u90e8\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\\n\\n![image-20230310003101303](assets/image-20230310003101303.png)\\n\\n\\n\\n![image-20230310005027077](assets/image-20230310005027077.png)\\n\\n![image-20230310005147083](assets/image-20230310005147083.png)\\n\\n\u53ef\u4ee5\u7406\u89e3\u6210\u5148\u79fb\u52a8-e\u5230\u539f\u70b9\u518d\u65cb\u8f6c\\n\\n$M = M_{vp}M_{orth}M_{cam}$"},{"id":"/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1","metadata":{"permalink":"/blog/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1.md","source":"@site/blog/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1.md","title":"\u5165\u95e8\uff1aC++\u9762\u5411\u5bf9\u8c61","description":"\u5934\u6587\u4ef6\u603b\u4f53\u5e03\u5c40","date":"2023-02-15T12:12:11.000Z","formattedDate":"February 15, 2023","tags":[{"label":"C++","permalink":"/blog/tags/c"}],"readingTime":17.17,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u5165\u95e8\uff1aC++\u9762\u5411\u5bf9\u8c61","tags":["C++"]},"prevItem":{"title":"\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics","permalink":"/blog/Rendering/\u6e32\u67d3\u57fa\u7840 - Fundamental of Graphics/1"},"nextItem":{"title":"\u7ea2\u9ed1\u6811","permalink":"/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree"}},"content":"\x3c!--truncate--\x3e\\n\\n## \u5934\u6587\u4ef6\u603b\u4f53\u5e03\u5c40\\n\\n![image-20230215212402568](assets/image-20230215212402568.png)\\n\\nguard\uff08\u9632\u536b\u5f0f\u58f0\u660e\uff09\\n\\n\u53ea\u6709\u7b2c\u4e00\u6b21include\u4f1ainclude\u8fdb\u6765\uff0c\u7b2c\u4e8c\u6b21\u4e0d\u4f1a\u88abinclude\u8fdb\u6765\\n\\n```\\n#ifndef __Complex__\\n#define __Complex__\\n...\\n\\n\\n#endif\\n```\\n\\n\u5b9a\u4e49\u4e00\u4e2a\u590d\u6570\\n\\n```cpp\\nclass complex{\\n  public:\\n  complex(double r = 0,double i = 0): re(r)\\t,im(i){}\\n   ...\\n  private:\\n  double re,im;\\n}\\n\\ncomplex c1(0,0.5)\\n```\\n\\n\u7f3a\u70b9\uff1a\u5982\u679c\u60f3\u628adouble\u6539\u4e3afloat\u5c31\u5f97\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u7c7b\\n\\n===> template(\u6a21\u7248)\\n\\n```cpp\\ntemplate<typename T>\\nclass complex{\\n  public:\\n  complex(T r = 0,T i = 0): re(r)\\t,im(i){}\\n   ...\\n  private:\\n  T re,im;\\n}\\n\\ncomplex<double> c1(0,0.5)\\ncomplex<float> c1(0,0.5)\\n```\\n\\n\\n\\n**Inline(\u5185\u8054)**\\n\\n\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u662f\u5426inline\u53ea\u662f\u7ed9\u7f16\u8bd1\u5668\u5efa\u8bae\uff0c\u7f16\u8bd1\u5668\u6700\u7ec8\u662f\u5426inline\u53d6\u51b3\u4e8e\u51fd\u6570\u662f\u5426\u590d\u6742\u3002\\n\\n```cpp\\nclass complex{\\n  public:\\n  complex(double r = 0,double i = 0): re(r)\\t,im(i){}\\n  \\n  // \u5728class\u672c\u4f53\u91cc\u76f4\u63a5\u5b9a\u4e49\u7684\u51fd\u6570\u4f1a\u81ea\u52a8inline\\n  double real() const\\t{return re;} // inline function\\n  double img() const;// declaration\\n  private:\\n  double re,im;\\n}\\n\\n// class\u672c\u4f53\u5185\u58f0\u660e\u4e86\u7684\uff0c\u800c\u672c\u4f53\u5916\u60f3\u8981\u5efa\u8bae\u7f16\u8bd1\u5668inline\u9700\u8981\u52a0inline\u5173\u952e\u8bcd\\ninline double img(const complex& x){\\n  return x.img();\\n}\\n\\nvoid real(double r){real = r;}\\n```\\n\\n\\n\\n**\u6784\u9020\u51fd\u6570**\\n\\n```cpp\\nclass complex{\\n  public:\\n  // \uff081\uff09\u6700\u597d\u5199\u6210\u8fd9\u6837\uff0c\u76f4\u63a5\u521d\u59cb\u5316 r\u548ci\\n  complex(double r = 0,double i = 0): // =0\u4e3a\u9ed8\u8ba4\u53c2\u6570\\n  re(r)\\t,im(i) // \u521d\u59cb\u5217\\n  {}   // \u8d4b\u503c\\n  // \uff082\uff09\u800c\u6700\u597d\u4e0d\u8981\u5199\u6210\u8fd9\u6837\uff0c\u5148\u521d\u59cb\u5316\uff0c \u518d\u8d4b\u503cr\u548ci\\n  complex(double r = 0,double i = 0) {re = r; im = i};\\n  \\n  // \u5728class\u672c\u4f53\u91cc\u76f4\u63a5\u5b9a\u4e49\u7684\u51fd\u6570\u4f1a\u81ea\u52a8inline\\n  double real() const\\t{return re;} // inline function\\n  double img() const;// declaration\\n  private:\\n  double re,im;\\n}\\n\\n{\\n  complex c1(1,2);  //1+2i\\n  complex c1;  // 0 + 0i\\n  complex *p = new complex(4);\\n}\\n```\\n\\n\u53ef\u4ee5\u628a\u6784\u9020\u51fd\u6570\u653e\u5728private\uff0c\u8868\u793a\u8be5\u7c7b\u5bf9\u8c61\u4e0d\u80fd\u88ab\u5176\u4ed6\u7c7b\u521b\u5efa\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u53cb\u5143\u6765\u521b\u5efa\u3002\\n\\n\u5e94\u7528\uff1asingleton(\u5355\u4f8b)\u8bbe\u8ba1\u6a21\u5f0f\\n\\n```cpp\\nclass A{\\npublic:\\n  static A& getInstance();\\n  setup(){...};\\nprivate:\\n  A();\\n  A(const A& rhs);\\n  ...\\n}\\n\\nA& A::getInstance(){\\n  static A a;\\n  return a;\\n}\\n\\nA::getInstance().setup();\\n```\\n\\n\\n\\n**Overload(\u91cd\u8f7d)**\\n\\n\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u540c\u53c2\u6570\u5217\u8868\u6216\u8fd4\u56de\u503c\u3002\\n\\n\u80fd\u91cd\u8f7d\u7684\u539f\u56e0\u662f\uff0c\u7f16\u8bd1\u540e\u4e0d\u540c\u53c2\u6570\u8fd4\u56de\u503c\u7684\u540c\u540d\u51fd\u6570\u5728\u7f16\u8bd1\u5668\u770b\u6765\u540d\u5b57\u5e76\u4e0d\u4e00\u6837\\n\\n![image-20230215162624548](assets/image-20230215162624548.png)\\n\\n\\n\\n```cpp\\nclass complex{\\n  public:\\n  // 1\\n  complex(double r = 0,double i = 0): re(r)\\t,im(i){}\\n  // 2\\n  complex():re(0),im(0){}\\n  // 1\u30012\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\uff0c\u56e0\u4e3a1\u6709\u9ed8\u8ba4\u503c\\n  \\n  // 3\\n  double real() const\\t{return re;} // inline function\\n  double img() const;// declaration\\n  private:\\n  double re,im;\\n}\\n\\n// 4\\nvoid real(double r){real = r;}\\n// 3\u30014\u53ef\u4ee5\u540c\u65f6\u51fa\u73b0\\n```\\n\\n\\n\\n==const member function \uff08\u5e38\u91cf\u6210\u5458\u51fd\u6570\uff09==\\n\\n```cpp\\ndouble real() const{\\n\\treturn re;\\n}\\n```\\n\\n\\n\\n* const\u7528\u5728\u6210\u5458\u51fd\u6570\u8868\u793a\u201c\u4e0d\u4f1a\u6539\u53d8\u7c7b\u5bf9\u8c61\u6570\u636e\u5185\u5bb9\u7684\u6210\u5458\u51fd\u6570\u201d\\n* const int/double/complex \u8868\u793a\u5e38\u91cf\uff0c\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u91cf\\n\\n\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\uff0cconst member function\u7684const\u4e0d\u53ef\u7701\u7565\uff0c\u5426\u5219\u7f16\u8bd1\u4e0d\u901a\u8fc7.\\n\\n```cpp\\ndouble real() const{\\n\\treturn re;\\n}\\n\\n{\\n  const complex c(2,1);\\n  cout << c1.real();\\n}\\n```\\n\\n==const \u5bf9\u8c61 \u53ea\u80fd\u8c03\u7528 \u6709const\u7684\u6210\u5458\u53d8\u91cf==\\n\\n* \u7c7b\u4e2d\u67d0\u4e2a\u51fd\u6570\u52a0\u4e86const\uff0c\u8fd9\u65f6\u5019\u5176\u4ed6\u4eba\u5b9a\u4e49\u7684\u65e0\u8bba\u662fconst\u7684\u5bf9\u8c61\u8fd8\u662f\u975econst\u7684\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\\n* \u4f46\u67d0\u4e2a\u51fd\u6570\u6ca1\u6709\u52a0const\uff08\u5373\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab\u4fee\u6539\uff09\uff0c\u8fd9\u65f6\u5019\u5176\u4ed6\u4eba\u5b9a\u4e49\u4e86\u4e00\u4e2aconst\u7684\u5bf9\u8c61\uff0c\u5c31\u65e0\u6cd5\u518d\u8c03\u7528\u8fd9\u4e2a\u53ef\u4ee5\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u51fd\u6570\u4e86\u3002\\n\\n\u56e0\u6b64\u7c7b\u8bbe\u8ba1\u8005\u8981\u5e94const\u5c3dconst\u3002\\n\\n\\n\\n\\n\\n## \u53c2\u6570\u4f20\u9012/\u8fd4\u56de\u503c\u4f20\u9012\\n\\n* pass by Value\\n* pass by Reference\\n* pass by Reference Const\\n\\n\u5c3d\u91cf\u4e0d\u8981pass by Value\\n\\n\u5f15\u7528\u5728\u5e95\u5c42\u5176\u5b9e\u5c31\u662f\u6307\u9488\\n\\nReference Const\u5c31\u662f\u4f20\u9012\u5f15\u7528\uff0c\u4f46\u662f\u51fd\u6570\u4e0d\u80fd\u5bf9\u8fd9\u4e2a\u5f15\u7528\u8fdb\u884c\u4fee\u6539\uff0c\u5426\u5219\u7f16\u8bd1\u4f1a\u51fa\u9519\\n\\n\\n\\n* return  by Value\\n\\n* return by Reference\\n\\n  \u6bd4\u8f83\u8fd9\u4e24\u79cd\u65b9\u5f0f\\n\\n  \uff081\uff09\\n\\n  ```cpp\\n  inline complex& __doapl(complex *ths, const complex &r){// doapl == do assignment plus\\n    ths->re += r.re;\\n    ths->im += r.im;\\n    return *ths; // ths\u662f\u4e2a\u6307\u9488\uff0c *ths\u662f\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\\n  }\\n  \\n  // \u6b64\u65f6\uff0c\u522b\u4eba\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\\n  complex c3;\\n  c3 = __doapl(&c1, c2); // \u7b49\u53f7\u524d\u9762\u7684c3\u4e0d\u7528\u601d\u7d22\u5c31\u80fd\u76f4\u63a5\u5199\u4e86\\n  ```\\n\\n  \uff082\uff09\\n\\n  ```cpp\\n  inline complex __doapl(complex *ths, const complex &r){// doapl == do assignment plus\\n    ths->re += r.re;\\n    ths->im += r.im;\\n    return *ths;\\n  }\\n  complex c3;\\n  c3 = __doapl(&c1, c2);\\n  \\n  \\n  inline complex __doapl(complex *ths, const complex &r){// doapl == do assignment plus\\n    ths->re += r.re;\\n    ths->im += r.im;\\n    return *ths;\\n  }\\n  complex *c3 = new complex();\\n  *c3 = __doapl(&c1, c2);\\n  \\n  // \u8c03\u7528\u8005\u9700\u8981\u601d\u8003\u4e00\u4e0b\u662f\u5199 c3 \u8fd8\u662f *c3\\n  ```\\n\\n  \u8c03\u7528\u8be5\u51fd\u6570\u7684\u4eba\u4e0d\u7528\u77e5\u9053\u4f20\u9012\u7684\u4e1c\u897f\u662f\u4ec0\u4e48\u5f62\u5f0f\u7684\uff08by reference\u6216by value\uff09\\n\\n* return by Reference Const\\n\\n\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\u5c3d\u91cf\u8fd4\u56dereference\uff0c\u4e3a\u4e86\u66f4\u5feb\u3002\\n\\n\u4e0d\u80fd\u8fd4\u56dereference\u7684\u60c5\u51b5\uff1a\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u80fd\u7528\u5df2\u6709\u7684\u4ee3\u66ff\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e5f\u6ca1\u4e86\uff01\\n\\n## friend\u53cb\u5143\\n\\n\u58f0\u660e\u4e00\u4e2afriend\u51fd\u6570\uff0c\u53ef\u4ee5\u4e0d\u7ecf\u8fc7public\u65b9\u6cd5\uff0c\u76f4\u63a5\u83b7\u5f97\u7c7b\u5bf9\u8c61\u7684private\u6570\u636e\u3002\\n\\n```cpp\\nclass complex{\\n  public:\\n  complex(double r = 0,double i = 0): re(r)\\t,im(i){}\xb7\\n  \\n  double real() const\\t{return re;} // inline function\\n  double img() const;// declaration\\n  private:\\n  double re,im;\\n  \\n  // \u58f0\u660e\u53cb\u5143\\n  friend complex& __doapl(complex*, const complex&);\\n}\\n\\ninline complex& __doapl(complex* ths,const complex& r){\\n  ths->re += r.re;\\n  ths->im += r.im;\\n  return *ths;\\n}\\n\\n\\n```\\n\\n\\n\\n**\u76f8\u540cclass\u7684\u5404\u4e2aObjects\u4e92\u4e3a\u53cb\u5143**\\n\\n```cpp\\nclass complex{\\n  public:\\n  complex(double r = 0,double i = 0): re(r)\\t,im(i){}\\n  \\n int func(const complex& param){\\n   return param.re;\\n }\\n  private:\\n  double re,im;\\n}\\n\\n{\\n  complex c1(2,1);\\n  commplex c2;\\n  c2.func(c1);\\n}\\n```\\n\\n\\n\\n## \u64cd\u4f5c\u7b26\u91cd\u8f7d\u548c\u4e34\u65f6\u5bf9\u8c61\\n\\nc++\u91cc\u64cd\u4f5c\u7b26\u4e5f\u662f\u4e00\u79cd\u51fd\u6570\uff0c\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u7684\\n\\n### \u7c7b\u5185\u90e8\u7684\u64cd\u4f5c\u7b26\u91cd\u8f7d\\n\\n```cpp\\ninline complex& __doapl(complex *ths, const complex &r){// doapl == do assignment plus\\n  ths->re += r.re;\\n  ths->im += r.im;\\n  return *ths;\\n}\\n\\n// 1\\ninline complex& += (const complex &r){\\n  return __doapl(this, r);\\n}\\n\\n// 2  \u662f\u9519\u7684 this\u4e0d\u80fd\u5199\u51fa\u6765 \u4ed6\u662f\u88ab\u7f16\u8bd1\u5668\u5904\u7406\u4e4b\u540e\u7684\u7ed3\u679c\uff08\u4e0b\u56fe\u662f\u793a\u610f\u56fe\uff09\\n//    \u7f16\u8bd1\u5668\u5904\u7406\u540e\u7684this\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e5f\u53ef\u80fd\u662f\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff0c\u53d6\u51b3\u4e8e\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\\ninline complex& += (this, const complex &r){\\n  return __doapl(this, r);\\n}\\n\\n\\n```\\n\\n>  \u7f16\u8bd1\u5668\u770b\u5f85\u201cc2 += c1\u201d\\n>\\n>  += (c2, c1)\\n>\\n>  +=\u662f\u4e00\u4e2a\u51fd\u6570\\n\\n\\n\\n![image-20230215162547923](assets/image-20230215162547923.png)\\n\\n**this**\\n\\n\u6240\u6709\u7684\u6210\u5458\u51fd\u6570\u90fd\u542b\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u53c2\u6570\uff1a this\uff0c \u53ef\u4ee5\u628a\u5b83\u5199\u51fa\u6765\u3002\\n\\n\u8c01\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u8c01\u5c31\u662f\u90a3\u4e2athis\u3002\\n\\nthis\u662f\u4e2a\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u51fd\u6570\u7684\u5bf9\u8c61\\n\\n\\n\\n> \u4e3a\u4ec0\u4e48\u8981\u8bbe\u8ba1\u6210\u6709\u8fd4\u56de\u503c \u800c\u4e0d\u662fvoid\uff1a \u4e3a\u4e86 c1 += c2 += c3\\n>\\n> \u4ece\u540e\u5f80\u524d\uff1a c2 += c3 \u7136\u540e c1 += c2\\n\\n\\n\\n### \u7c7b\u5916\u7684\u64cd\u4f5c\u7b26\u91cd\u8f7d\\n\\n```cpp\\nc2 = c1 + c2\\nc2 = 7 + c1\\n//\u591a\u79cd\u52a0\u6cd5\uff0c\u6240\u4ee5\u4e0d\u80fd\u5728\u7c7b\u91cc\u9762\u91cd\u8f7d\\n```\\n\\n\\n\\n```cpp\\ninline complex operator + (const complex &x, const complex &y){\\n  return complex(x.real()+y.real(), x.img()+y.img());\\n}\\n\\ninline complex operator + (int x, const complex &y){\\n  return complex(x + y.real(), x.img()+y.img());\\n}\\n```\\n\\n==\u7edd\u4e0d\u80fd\u8fd4\u56de\u5f15\u7528\uff0c \u56e0\u4e3a\u51fd\u6570\u4f53\u5185\u521b\u5efa\u7684\u4e34\u65f6\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u540e\u6e05\u7a7a==\\n\\n![image-20230215214734334](assets/image-20230215214734334.png)\\n\\n\\n\\n```cpp\\ncout << c1;\\n// \u8fd9\u91cc\u7684<<\u53ea\u80fd\u5199\u6210\u975e\u6210\u5458\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff0c\u56e0\u4e3acout\u8fd9\u4e2a\u5bf9\u8c61\u6539\u4e0d\u4e86\\n```\\n\\n```cpp\\n#include <iostream>\\n\\nostream&\\noperator << (ostream &os, const complex &x){\\n  return os << real(x) << \\" \\" << img(x);\\n}\\n\\n// \u4e3a\u4e86\u89e3\u51b3\u4e00\u8fde\u4e32\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u80fd\u8bbe\u7f6e\u6210void\u8fd4\u56de\u503c\\ncout << c1 << c2;\\n// \u8fd9\u4e2a\u662f\u4ece\u5de6\u5f80\u53f3\u7684 cout << c1 \u518d << c2\\n```\\n\\n\u4e0a\u8ff0\u8fd4\u56de\u503c\u53ef\u4ee5\u7528&\uff08\u4e0d\u662f\u4e34\u65f6\u5bf9\u8c61\uff09\uff0c \u4e0d\u80fd\u52a0const\uff08\u4e3a\u4e86\u8fde\u7eed\u8f93\u51fa\uff09\\n\\n### \u4e34\u65f6\u5bf9\u8c61\\n\\n```cpp\\ncomplex(a, b) \\ncomplex()\\nint(7)\\n```\\n\\n\u8fd9\u6837\u7684\u5199\u6cd5\u5c31\u662f\u521b\u5efa\u4e34\u65f6\u5bf9\u8c61\uff0c \u5b83\u7684\u751f\u547d\u5728\u4e0b\u4e00\u884c\u5c31\u7ed3\u675f\u4e86\\n\\n\u9700\u8981\u5728\u672c\u884c\u5c31\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\uff0c\u6bd4\u5982\\n\\n```cpp\\nreturn complex()\\nstd::cout << complex()\\nauto a = complex()\\n```\\n\\n## ==\u8bbe\u8ba1\u4e00\u4e2aclass\u5e94\u8be5\u6ce8\u610f\u7684\u4e8b\u60c5==\\n\\n1. \u5584\u7528\u6784\u9020\u51fd\u6570\u7684initilization list\\n2. \u6210\u5458\u51fd\u6570\u52a0\u4e0d\u52a0const\uff0c \u5e94\u52a0\u5c3d\u52a0\uff0c\u5426\u5219\u4f1a\u6709\u526f\u4f5c\u7528\\n3. \u53c2\u6570\u3001\u8fd4\u56de\u503c\u4f20\u9012\u5c3d\u91cfpass by reference\u3001return by reference\uff0c\u8003\u8651\u80fd\u4e0d\u80fd\u7528reference\uff08\u4e34\u65f6\u53d8\u91cf\uff09\\n4. \u6570\u636e\u5c3d\u53ef\u80fd\u653e\u5728private\\n\\n\\n\\n## BigThree\uff1a\u62f7\u8d1d\u6784\u9020\u3001\u62f7\u8d1d\u51fd\u6570\u3001\u6790\u6784\\n\\n```cpp\\n// \u8bbe\u8ba1\u4e00\u4e2astring.h\\n#ifndef __MYSTRING__\\n#define __MYSTRING__\\n\\nclass string{\\n  \\n}\\n#endif\\n\\n// \u80fd\u591f\u5b9e\u73b0\u4e0b\u5217\u64cd\u4f5c\\n\\nstring s1();\\nstring s1(\\"hello\\");\\nstring s3(s1); // \u62f7\u8d1d\u6784\u9020\\n\\ncout << s3 << endl;\\ns3 = s2; // \u62f7\u8d1d\u590d\u5236\\ncout << s3 << endl;\\n```\\n\\n\u5982\u679c\u6ca1\u6709\u5199\u62f7\u8d1d\u6784\u9020\u548c\u62f7\u8d1d\u590d\u5236\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u7ed9\u5199\u4e00\u4efd\uff0c\u5b83\u7684\u5b9e\u73b0\u662f\u4e00\u4e2abyte\u4e00\u4e2abyte\u7684\u53bb\u590d\u5236\u3002\\n\\n\u5982\u679c\u4e00\u4e2a\u7c7b\u91cc\u9762\u6709\u4e00\u4e2a\u6307\u9488\uff0c\u5c31\u9700\u8981\u81ea\u5df1\u53bb\u5b9e\u73b0\u62f7\u8d1d\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7684\u62f7\u8d1d\u4f1a\u628a\u62f7\u8d1d\u8fc7\u53bb\u7684\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u800c\u4e0d\u662f\u5f00\u4e00\u4e2a\u65b0\u7a7a\u95f4\u3002\\n\\n\\n\\n```cpp\\n\\nclass String{\\n  String(const char* cstr = 0); // ascii 0 is null\\n  String(const String &str); // \u62f7\u8d1d\u6784\u9020\\n  String& operator = (const String &str); // \u62f7\u8d1d\u51fd\u6570\\n  ~String(); // \u6790\u6784\\n  char* get_c_str() const {return m_data};\\n \\n  private:\\n  \\tchar* m_data; // \u53ef\u4ee5\u52a8\u6001\u589e\u957f\uff0c\u7528\u6307\u9488\\n}\\n```\\n\\n\\n\\n```cpp\\nString::String(const char* cstr = 0){\\n  if(cstr){\\n    m_data = new char[strlen(cstr) + 1];\\n    strcpy(m_data, cstr);\\n  }else{\\n    m_data = new char[1];\\n    *m_data = \'\\\\0\';\\n  }\\n}\\n\\nString::~String(){\\n  delete[] m_data;\\n}\\n\\n{\\n  string s1();\\n\\tstring s2(\\"hello\\");\\n  string *p = new string(\\"hello\\");\\n  delete p;\\n  \\n  // \u524d\u4e24\u4e2a\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff08\u79bb\u5f00\u4f5c\u7528\u57df\uff09\u4f1a\u81ea\u52a8\u8c03\u7528\u6790\u6784\u51fd\u6570\\n  // \u6700\u540e\u4e00\u4e2a\u5f97\u624b\u52a8delete\\n}\\n\\n```\\n\\n\\n\\n\u6d45\u62f7\u8d1d\uff08\u4e0d\u62f7\u8d1d\u503c\uff09\\n\\n\u6839\u636e\u7f16\u8bd1\u5668\u9ed8\u8ba4\u7684\u62f7\u8d1d\u5b9e\u73b0\u65b9\u5f0f\uff08\u4e00\u4e2abit\u4e00\u4e2abit\u62f7\u8d1d\uff09\uff0c\u8fd9\u79cd\u5199\u6cd5\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\\n\\n\u5f00\u4e86\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u6ca1\u6709\u6307\u9488\u6307\u7740\uff08\u518d\u4e5f\u4e0d\u80fd\u7ba1\u7406\u5230\u8fd9\u5757\u5185\u5b58\u4e86\uff09\\n\\n![image-20230218132144354](assets/image-20230218132144354.png)\\n\\n\\n\\n\u6df1\u62f7\u8d1d\\n\\n```cpp\\nstring::string(const string &str){\\n  m_data = new char[strlen(str.m_data) + 1]; // \u76f8\u540cclass\u7684\u5404\u4e2aObjects\u4e92\u4e3a\u53cb\u5143\\n  strcpy(m_data, str.m_data);\\n}\\n\\nstring s1(\\"hello\\");\\nstring s2(s1);\\n```\\n\\n\\n\\n```cpp\\nstring& string::operator=(const string& str){\\n  // \u5148\u6e05\u7a7a\\n  if(this == &str) return *this;// \u68c0\u6d4b\u81ea\u6211\u8d4b\u503c \u4e0d\u5199\u7684\u8bdd\u5982\u679c\u81ea\u6211\u8d4b\u503c\u4f1a\u51fa\u9519\\n  delete[] m_data; \\n  // \u5f00\u7a7a\u95f4\\n  m_data = new char[strlen(str.m_data) + 1];\\n  // \u8d4b\u503c\\n  strcpy(m_data, str.m_data);\\n  return *this;\\n}\\n```\\n\\n==Array new\u4e00\u5b9a\u8981\u642d\u914dArray Delete==\\n\\n\\n\\n```cpp\\nostream& operator<<(ostream &os, const string &str){\\n  os << str.get_c_str();\\n  return os;\\n}\\n```\\n\\n\\n\\n\\n\\n## \u5806\u3001\u6808\u3001\u5185\u5b58\u7ba1\u7406\\n\\n\u6808\uff1astack\uff0c\u5b58\u5728\u4e8e\u4e00\u4e2a\u4f5c\u7528\u57df\u7684\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\\n\\n\u5806\uff1aheap\uff0c \u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u5168\u5c40\u7684\u5185\u5b58\u7a7a\u95f4\\n\\n```cpp\\n{\\n  Complex c1(1,2); // stack  \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u751f\u547d\u81ea\u52a8\u6d88\u5931\uff08\u8c03\u7528\u6790\u6784\u51fd\u6570\uff09\\n  static Complex c2(1,2); // \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u751f\u547d\u8fd8\u4f1a\u5b58\u5728\\n  Complex *p = new Complex(3); // heap \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u624b\u52a8\u91ca\u653e\uff0c\u5426\u5219\u4f1a\u4e00\u76f4\u5b58\u5728\\n}\\n```\\n\\n\\n\\n```cpp\\n{\\nComplex *p = new Complex;\\n...\\ndelete p; //\u4e00\u5b9a\u8981delete\u6216\u8005\u4f20\u51fa\u53bb\\n}\\n```\\n\\nnew \u7684\u65f6\u5019\u5185\u90e8\u662f malloc\u3001\u8f6c\u578b\u3001\u6784\u9020\u51fd\u6570\\n\\ndelete\u7684\u65f6\u5019\u5185\u90e8\u662f\u6790\u6784\u51fd\u6570\u548c\u91ca\u653e\u5185\u5b58\\n\\n> \u5bf9\u4e8eString\u6765\u8bf4 \u6790\u6784\u51fd\u6570\u6e05\u7a7adata\u7684\u5185\u5b58\u3001\u7136\u540e\u7f16\u8bd1\u5668\u518d\u5220\u9664String\u7c7b\u5185\u7684char *\u6307\u9488\\n\\nnew\u7684\u65f6\u5019\u4f1a\u5206\u914d\u5f88\u591a\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u6bd4\u59828\u5b57\u8282\u7684complex\uff0c\u5b9e\u9645\u80fd\u5206\u914d64\uff08debug mode\uff09/ 16\uff08release mode\uff09\u5b57\u8282\uff0c\u5305\u62ec\u4e09\u6216\u56db\u4e2a\u90e8\u5206\\n\\n\u4e0a\u4e0bcookie\uff08\u8bb0\u5f55\u5206\u914d\u51fa\u53bb\u7684\u5927\u5c0f\uff09\u3001\u7c7b\u5185\u5bb9\u3001debug\u989d\u5916\u6240\u9700\u90e8\u5206\u3001padding\u3002\\n\\n\\n\\n**\u52a8\u6001\u5206\u914d\u6570\u7ec4**\\n\\n```cpp\\nString *p = new String[3];\\ndelete[] p; // \u8c03\u7528\u4e09\u6b21\u6790\u6784\u51fd\u6570\\n\\nString *p = new String[3];\\ndelete p; // \u8c03\u7528\u4e00\u6b21\u6790\u6784\u51fd\u6570\uff08\u5728string\u8fd9\u79cd\u52a8\u6001\u5206\u914d\u7684class\u7684\u60c5\u51b5\u4e0b\u4f1a\u5f15\u8d77\u5185\u5b58\u6cc4\u6f0f \uff09\\n```\\n\\n\\n\\n## \u8f6c\u6362\u51fd\u6570\\n\\n```cpp\\nclass Fraction{\\n  public: \\n  ...\\n    // non-explicit-one-argument ctor\\n    Fraction(int num, int den = 1):m_numerator(num),m_denominator(den){}\\n  \\n    operator double() const{ // \u8f6c\u6362\u51fd\u6570\u4e00\u822c\u90fd\u4f1a\u52a0const\\n    return (double) const(m_numerator / m_denominator);\\n  }  \\n private:\\n    int m_numerator;\\n    int m_denominator;\\n  }\\n}\\n\\nFraction f(3,5);\\ndouble d = 4 + f;\\n// \u7f16\u8bd1\u5668\u5904\u7406\uff1a\\n// 1. \u627e\u6709\u6ca1\u6709\u5168\u5c40\u7684operator +(int, Fraction)\\n// 2. \u627e\u8f6c\u6362\u51fd\u6570\uff0cf\u80fd\u4e0d\u80fd\u8f6c\u4e3adouble\\n```\\n\\n\\n\\n```cpp\\nclass Fraction{\\n  public: \\n  ...\\n    // non-explicit-one-argument ctor\\n    Fraction(int num, int den = 1):m_numerator(num),m_denominator(den){}\\n  }  \\n private:\\n    int m_numerator;\\n    int m_denominator;\\n  }\\n}\\n\\nFraction d2 = f + 4;\\n// \u7f16\u8bd1\u5668\u5904\u7406\uff1a\\n// non-explicit-one-argument ctor: \u5c064\u8f6c\u5316\u4e3afraction\\n```\\n\\n\\n\\n\u4e24\u79cd\u65b9\u6cd5\u5199\u4e00\u8d77\u53ef\u80fd\u9020\u6210\u7f16\u8bd1\u5668\u77db\u76fe\\n\\n```cpp\\nclass Fraction{\\n  public: \\n  ...\\n    // non-explicit-one-argument ctor\\n    Fraction(int num, int den = 1):m_numerator(num),m_denominator(den){}\\n  \\n    operator double() const{ // \u8f6c\u6362\u51fd\u6570\u4e00\u822c\u90fd\u4f1a\u52a0const\\n    return (double) const(m_numerator / m_denominator);\\n  }  \\n private:\\n    int m_numerator;\\n    int m_denominator;\\n  }\\n}\\n\\nFraction f(3,5);\\nFraction d = 4 + f;\\n// \u628af\u8f6c\u4e3adouble \u8fd8\u662f \u628a4\u8f6c\u4e3afraction\\n```\\n\\n\u89e3\u51b3==> explicit\\n\\n\u8868\u793a\u6784\u9020\u51fd\u6570\u53ea\u6709\u663e\u793a\u7684\u5199\u7684\u65f6\u5019\u624d\u80fd\u505a\uff0c\u800c\u4e0d\u80fd\u9690\u5f0f\u8f6c\u5316\\n\\n```cpp\\nexplicit Fraction(int num, int den = 1):m_numerator(num),m_denominator(den){}\\n```\\n\\n## \u7c7b\u6307\u9488\u7c7b\uff08Pointer-like Class\uff09 shared_ptr\u548citerator\\n\\n```cpp\\ntemplete<class T>\\nclass shared_ptr{\\n  public:\\n  T& operator*() const{return *px} // \u5b9a\u4e49 *A \u53d6\u6307\u9488\u5bf9\u5e94\u5185\u5bb9\u7684\u64cd\u4f5c\\n  \\n  T* operator->() const{return px}; // -> \u64cd\u4f5c\u7b26 \u4f1a\u4f5c\u7528\u5728\u4ed6\u524d\u9762\u7684\u90a3\u4e2a\u53d8\u91cf\u4e0a\uff0c\u8fd4\u56de\u503c\u662fT*\\n  \\n  shared_ptr(T *p):px(p){}\\n  private:\\n  T* px;\\n  long *pn;\\n}\\n\\nstruct Foo{\\n  void method(){...}\\n}\\n\\nsp = shared_ptr<Foo> (new Foo());\\nFoo f(*sp);\\nsp->method();\\n// ==>  \u7bad\u5934\u4f5c\u7528\u5728sp\u4e0a\uff0c\u8f6c\u5316\u4e3a px->method();\\n// ==> \u7bad\u5934\u7b26\u53f7\u7684\u7279\u6b8a\u6027\uff0c \u4f1a\u7ee7\u7eed\u6267\u884c\u4e0b\u53bb\uff0c \u800c\u4e0d\u50cf\u5176\u4ed6\u7b26\u53f7\u6267\u884c\u4e00\u6b21\u5c31\u505c\u6b62\\n```\\n\\n```cpp\\ntemplete<class T>\\nstruct __list_node{\\n  void* prev;\\n  void *next;\\n  T data;\\n}\\n\\ntemplete<class T,class Ref, class ptr>\\nstruct __list_iterator{\\n  typedef __list_node<T>* link_type;\\n  link_type node;\\n  \\n  ref operator*() const{ return (*node).data};\\n  ptr operator->() const {return &(operator*())};\\n}\\n\\n\\nlist<Foo> iter;\\niter->method();\\n// ===> &(*iter)->method\\n\\n\\n```\\n\\n## \u7c7b\u51fd\u6570\u7c7b\uff08function-like class\uff09\\n\\n```cpp\\ntemplete<class T1, class T2>\\nstruct pair{\\n  T1 first;\\n  T2 second;\\n  pair():first(T1()),second(T2()){}\\n  pair(const &t1, const &t2):first(t1),second(t2){}\\n}\\n\\n\\ntemple<class Pair>\\nstruct select1st{\\n  const typename  Pair::first_type& operator()(const Pair &x) const{\\n    {return x.first};\\n  }\\n}\\n```\\n\\n## \u6a21\u7248 template\\n\\n\u53ea\u6709\u8fd9\u4e2a\u4f4d\u7f6e typename\u7b49\u4ef7\u4e8eclass\\n\\n#### \u6a21\u7248 \u7c7b\\n\\n```cpp\\ntemple <class T> // \u6216 temple <typename T>\\nclass complex{\\n  public:\\n  \\tcomplex(T r = 0, T i = 0):re(r), im(i){}\\n}\\ncomplex<int>  c1(2, 1);\\n\\n\\n```\\n\\n#### \u6a21\u7248 \u51fd\u6570\\n\\n```cpp\\ntemplete<class T>\\ninline const T& min(const T &a, const T &b\\t){\\n  return b < a ? b : a;\\n}\\n```\\n\\n\u6a21\u7248\u5728\u7684\u6587\u4ef6\u4f1a\u5148\u7f16\u8bd1\u4e00\u6b21\uff0c\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff1b\\n\\n\u4e4b\u540e\u8fd8\u4f1a\u548c\u5176\u4ed6\u6587\u4ef6\u4e00\u8d77\u518d\u7f16\u8bd1\u4e00\u6b21\uff0c\u5982\u679c\u8be5\u7c7b\u578bT\uff0c\u6ca1\u6709\u91cd\u8f7d < \u8fd8\u662f\u4f1a\u62a5\u9519\u3002\\n\\n#### \u6a21\u7248 \u6210\u5458\\n\\n```cpp\\ntemplete <class T1, class T2>\\n\\nstruct pair{\\n  T1 first;\\n  T2 second;\\n  pair(const &T1 a, const &T2 b):first(a),second(b){};\\n  \\n  templete<class U1, class U2>\\n  pair(const pair<U1,U2> &p) first(p.first),second(p.second){}\\n}\\n\\n\\nclass Derived1: public Base1{\\n  \\n}\\n\\nclass Derived2: public Base2{\\n  \\n}\\n\\npair<Derived1, Derived2> p;\\npair<Base1, Base2> p2(p);\\n```\\n\\n\\n\\n#### \u6a21\u7248\u7279\u5316\\n\\n\u7279\u5316 <--\x3e \u6cdb\u5316\\n\\n**\u5168\u7279\u5316**\\n\\n```cpp\\ntemplete <class key>\\nstruct hash { };\\n\\n// \u7279\u5316\uff0c\u67d0\u4e9b\u6307\u5b9a\u7c7b\u578b\u65f6\u7279\u6b8a\u5904\u7406\\ntemplete <>\\nstruct \\thash<char>{\\n  size_t operator()(char x) const {return x};\\n}\\n\\nstruct \\thash<int>{\\n  size_t operator()(int x) const {return x};\\n}\\n\\nstruct \\thash<long>{\\n  size_t operator()(long\\t x) const {return x};\\n}\\n\\n// \u7279\u5316 specialization\\ncout << hash<long>()(1000);\\n```\\n\\n**\u504f\u7279\u5316**\\n\\n\uff081\uff09\u4e2a\u6570\u4e0a\u7684\u504f\\n\\n```cpp\\ntemplete<typename T, typename Alloc=...>\\nclass vector{\\n  \\n};\\n\\ntemplete<typename T, typename Alloc=...>\\nclass vector<bool, Alloc>{\\n  \\n}\\n```\\n\\n\\n\\n(2) \u8303\u56f4\u4e0a\u7684\u504f\\n\\n```cpp\\ntemplete <typename T>\\nclass C{\\n  \\n}\\n\\ntemplete <typename U>\\nclass C<U*>{\\n  ...\\n}\\n\\n//\\nC<string> c1;\\nC<string*> c2;\\n```\\n\\n\\n\\n\\n\\n#### \u6a21\u7248\u5957\u6a21\u7248\\n\\n```cpp\\ntemplete<typename T, templete <typename T>\\n                     class Container>\\nclass XCLs{\\n  private Container<T> c;\\n}\\n\\nXCLs<string, list> mylst;\\n\\n```\\n\\n\\n\\n## C++\u6807\u51c6\u5e93\\n\\n### Containers\uff08\u5bb9\u5668\uff09\\n\\n1. **Sequence**\uff1aarray\uff0c vector\uff0c deque\uff0c forwar_list\uff0c list\\n2. **container adaptors**: stack, queue, priority_queue\\n3. **associate** : set, multiset, map, multimap\\n4. **unordered associate**: unordered_set, unordered_multiset, unordered_map, unordered_multimap\\n\\n\\n\\n![image-20230308224157732](assets/image-20230308224157732.png)"},{"id":"/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree","metadata":{"permalink":"/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree.md","source":"@site/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree.md","title":"\u7ea2\u9ed1\u6811","description":"\u5b9a\u4e49\u548c\u6027\u8d28","date":"2021-06-10T23:12:01.000Z","formattedDate":"June 10, 2021","tags":[{"label":"Algorithm","permalink":"/blog/tags/algorithm"}],"readingTime":5.61,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"\u7ea2\u9ed1\u6811","date":"2021-06-10T23:12:01.000Z","tags":["Algorithm"]},"prevItem":{"title":"\u5165\u95e8\uff1aC++\u9762\u5411\u5bf9\u8c61","permalink":"/blog/C++/\u9762\u5411\u5bf9\u8c61\u57fa\u7840/1"},"nextItem":{"title":"Djikstra\u9898\u578b\u603b\u7ed3","permalink":"/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/Dijkstra/Dijkstra"}},"content":"\x3c!--truncate--\x3e\\n## \u5b9a\u4e49\u548c\u6027\u8d28\\n\u7ea2\u9ed1\u6811\u662f\u4e00\u79cd\u542b\u6709\u7ea2\u9ed1\u7ed3\u70b9\u5e76\u80fd\u81ea\u5e73\u8861\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5b83\u5fc5\u987b\u6ee1\u8db3\u4e0b\u9762\u6027\u8d28\uff1a\\n* \u6027\u8d281\uff1a\u6bcf\u4e2a\u8282\u70b9\u8981\u4e48\u662f\u9ed1\u8272\uff0c\u8981\u4e48\u662f\u7ea2\u8272\u3002\\n* \u6027\u8d282\uff1a\u6839\u8282\u70b9\u662f\u9ed1\u8272\u3002\\n* \u6027\u8d283\uff1a\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\uff08NIL\uff09\u662f\u9ed1\u8272\u3002\\n* \u6027\u8d284\uff1a\u6bcf\u4e2a\u7ea2\u8272\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u4e00\u5b9a\u90fd\u662f\u9ed1\u8272\u3002\\n* \u6027\u8d285\uff1a\u4efb\u610f\u4e00\u7ed3\u70b9\u5230\u6bcf\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u90fd\u5305\u542b\u6570\u91cf\u76f8\u540c\u7684\u9ed1\u7ed3\u70b9\uff08\u9ed1\u8272\u5b8c\u7f8e\u5e73\u8861\uff09\u3002\u5b9a\u4e49\u4e3a\u9ed1\u9ad8black-height \u8bb0\u4f5cbh(x)\\n\u4e3a\u4fbf\u4e8e\u8fb9\u754c\u5904\u7406\uff0c\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u548c\u666e\u901a\u8282\u70b9\u62e5\u6709\u76f8\u540c\u6570\u636e\u7ed3\u6784\u7684\u54e8\u5175\u5bf9\u8c61\u6765\u4ee3\u8868\u53f6\u8282\u70b9NIL\uff0c\u53f6\u8282\u70b9\u4e0d\u5b58\u50a8\u4fe1\u606f\uff0c\u53ea\u7528\u6765\u6307\u793a\u8fb9\u754c\u3002\\n\\n\u4f18\u79c0\u7684\u6027\u8d28\uff1a\u4e00\u68f5\u6709n\u4e2a\u5185\u90e8\u8282\u70b9\u7684\u7ea2\u9ed1\u6811\u9ad8\u5ea6\u81f3\u591a\u4e3a2lg(n+1).\u56e0\u6b64\u589e\u5220\u67e5\u6539\u64cd\u4f5c\u590d\u6742\u5ea6\u90fd\u662fO\uff08lg n\uff09\\n\\n\u7ea2\u9ed1\u6811\u81ea\u5e73\u8861\u901a\u8fc7\u4e09\u79cd\u64cd\u4f5c\u5b9e\u73b0\uff1a\\n1. \u5de6\u65cb\uff1a\u4ee5\u67d0\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u652f\u70b9(\u65cb\u8f6c\u7ed3\u70b9)\uff0c\u5176\u53f3\u5b50\u7ed3\u70b9\u53d8\u4e3a\u65cb\u8f6c\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\uff0c\u53f3\u5b50\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u53d8\u4e3a\u65cb\u8f6c\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\uff0c\u5de6\u5b50\u7ed3\u70b9\u4fdd\u6301\u4e0d\u53d8\u3002\\n2. \u53f3\u65cb\uff1a\u4ee5\u67d0\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u652f\u70b9(\u65cb\u8f6c\u7ed3\u70b9)\uff0c\u5176\u5de6\u5b50\u7ed3\u70b9\u53d8\u4e3a\u65cb\u8f6c\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\uff0c\u5de6\u5b50\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u53d8\u4e3a\u65cb\u8f6c\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\uff0c\u53f3\u5b50\u7ed3\u70b9\u4fdd\u6301\u4e0d\u53d8\u3002\\n3. \u53d8\u8272\uff1a\u7ed3\u70b9\u7684\u989c\u8272\u7531\u7ea2\u53d8\u9ed1\u6216\u7531\u9ed1\u53d8\u7ea2\u3002\\n\u4e0a\u8ff0\u65cb\u8f6c\u64cd\u4f5c\u540cAVL\u3002\\n\\n## \u67e5\u627e\\n\u56e0\u4e3a\u7ea2\u9ed1\u6811\u662f\u4e00\u9897\u4e8c\u53c9\u5e73\u8861\u6811\uff0c\u5e76\u4e14\u67e5\u627e\u4e0d\u4f1a\u7834\u574f\u6811\u7684\u5e73\u8861\uff0c\u6240\u4ee5\u67e5\u627e\u8ddf\u4e8c\u53c9\u5e73\u8861\u6811\u7684\u67e5\u627e\u65e0\u5f02\uff1a\\n\uff081\uff09\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u67e5\u627e\uff0c\u628a\u6839\u7ed3\u70b9\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ed3\u70b9\uff1b\\n\uff082\uff09\u82e5\u5f53\u524d\u7ed3\u70b9\u4e3a\u7a7a\uff0c\u8fd4\u56denull\uff1b\\n\uff083\uff09\u82e5\u5f53\u524d\u7ed3\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u7528\u5f53\u524d\u7ed3\u70b9\u7684key\u8ddf\u67e5\u627ekey\u4f5c\u6bd4\u8f83\uff1b\\n\uff084\uff09\u82e5\u5f53\u524d\u7ed3\u70b9key\u7b49\u4e8e\u67e5\u627ekey\uff0c\u90a3\u4e48\u8be5key\u5c31\u662f\u67e5\u627e\u76ee\u6807\uff0c\u8fd4\u56de\u5f53\u524d\u7ed3\u70b9\uff1b\\n\uff085\uff09\u82e5\u5f53\u524d\u7ed3\u70b9key\u5927\u4e8e\u67e5\u627ekey\uff0c\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ed3\u70b9\uff0c\u91cd\u590d\u6b65\u9aa42\uff1b\\n\uff086\uff09\u82e5\u5f53\u524d\u7ed3\u70b9key\u5c0f\u4e8e\u67e5\u627ekey\uff0c\u628a\u5f53\u524d\u7ed3\u70b9\u7684\u53f3\u5b50\u7ed3\u70b9\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ed3\u70b9\uff0c\u91cd\u590d\u6b65\u9aa42\uff1b\\n\\n## \u63d2\u5165\\n\\n\u63d2\u5165\u64cd\u4f5c\u5305\u62ec\u4e24\u90e8\u5206\u5de5\u4f5c\uff1a\u4e00\u67e5\u627e\u63d2\u5165\u7684\u4f4d\u7f6e\uff1b\u4e8c\u63d2\u5165\u540e\u81ea\u5e73\u8861\u3002\\n\u67e5\u627e\u63d2\u5165\u7684\u7236\u7ed3\u70b9\u5f88\u7b80\u5355\uff0c\u8ddf\u67e5\u627e\u64cd\u4f5c\u533a\u522b\u4e0d\u5927\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u63d2\u5165\u7684\u8282\u70b9\u5e94\u8be5\u8bbe\u7f6e\u6210\u7ea2\u8272\uff0c\u8fd9\u662f\u56e0\u4e3a\u589e\u52a0\u9ed1\u8272\u8282\u70b9\u5fc5\u7136\u4f1a\u5f15\u8d77\u4e0d\u5e73\u8861\uff08\u6027\u8d285\uff09\\n\\n<font color=\'red\'>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0b\u9762\u6240\u6709\u793a\u610f\u56fe\uff0c\u5706\u5708+\u7f16\u53f7\u8868\u793a\u7684\u8282\u70b9\uff08\u9664\u4e86\u660e\u786e\u6807\u51fa\u5b69\u5b50\u8282\u70b9\u7684\uff09\u8868\u793a\u4ee5\u8be5\u7f16\u53f7\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u3002</font>\\n\\n### \u4e0d\u4f1a\u5f15\u8d77\u81ea\u5e73\u8861\u7684\u60c5\u51b5\\n1. \u7ea2\u9ed1\u6811\u4e3a\u7a7a\\n\u63d2\u5165\u8282\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u8bbe\u7f6e\u6210\u9ed1\u8272\uff1b\\n\\n2. \u63d2\u5165\u8282\u70b9key\u5df2\u5b58\u5728\\n\u8fd9\u91cc\u6309\u7167java hashmap\u7684\u5199\u6cd5\uff0c\u9ed8\u8ba4key\u4e0d\u91cd\u590d\uff0c\u56e0\u6b64insert\u9000\u5316\u4e3aupdate\\n\\n3. \u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e3a\u9ed1\u8282\u70b9\\n\u63d2\u5165\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u76f4\u63a5\u63d2\u5165\uff0c\u65e0\u9700\u81ea\u5e73\u8861\\n\\n### \u9700\u8981\u81ea\u5e73\u8861\u7684\u60c5\u51b5\\n\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e3a\u7ea2\u8282\u70b9\u53ef\u80fd\u5f15\u8d77\u81ea\u5e73\u8861\u3002\u9996\u5148\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u4e00\u5b9a\u662f\u9ed1\u8282\u70b9\uff0c\u6240\u4ee5\u63d2\u5165\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u8ddf\u8282\u70b9\uff0c\u6240\u4ee5\u63d2\u5165\u8282\u70b9\u4e00\u5b9a\u6709\u7956\u7236\u8282\u70b9\u3002\\n\\n#### \u53d4\u53d4\u8282\u70b9\u5b58\u5728\u5e76\u4e14\u4e3a\u7ea2\u8282\u70b9\\n![](\u7ea2\u9ed1\u6811/2.png)\\n\u63d2\u5165\u8282\u70b9\u662f\u7ea2\u8272\uff0c\u56e0\u4e3a\u7ea2\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u5fc5\u987b\u662f\u9ed1\u8272\uff0c\u6240\u4ee5\u9996\u5148\u5c06\u63d2\u5165\u8282\u70b9\u7684\u7956\u7236\u548c\u7236\u8f88\u7684\u9ed1\u7ea2\u7ea2\u53d8\u4e3a\u7ea2\u9ed1\u9ed1\uff0c\u7531\u4e8e\u7956\u7236\u8282\u70b9\u53d8\u4e3a\u7ea2\uff0c\u5bf9\u4e8e\u4e0a\u5c42\u53ef\u80fd\u4f1a\u4e0d\u6ee1\u8db3\u6027\u8d284\uff0c\u56e0\u6b64\u5c06\u7956\u7236\u8282\u70b9\u4f5c\u4e3a\u65b0\u7684\u63d2\u5165\u8282\u70b9\uff08\u7814\u7a76\u5bf9\u8c61\uff09\u3002\\n\u8003\u8651\u81ea\u4e0b\u800c\u4e0a\u7684\u53d8\u52a8\u5230\u8fbe\u8fb9\u754c\u6761\u4ef6\uff0c\u5373\u5982\u679c\u7956\u7236\u8282\u70b9A\u662f\u6839\u8282\u70b9\u4e86\uff0c\u5fc5\u987b\u91cd\u65b0\u5c06\u6839\u8282\u70b9\u5237\u4e3a\u9ed1\u8272\uff0c\u8fd9\u6837\u4f1a\u4f7f\u6574\u4f53\u9ed1\u9ad8\u589e\u52a01\uff0c\u8fd9\u4e5f\u662f\u552f\u4e00\u4e00\u79cd\u4f1a\u589e\u52a0\u9ed1\u8272\u8282\u70b9\u5c42\u6570\u7684\u60c5\u666f\u3002\\n\\n#### \u53d4\u53d4\u8282\u70b9\u4e0d\u5b58\u5728\u6216\u4e3a\u9ed1\u8282\u70b9\\n\u4ee5\u4e0b\u7c7b\u4f3c\u4e8eAVL\u5206\u5de6\u5de6\u3001\u5de6\u53f3\u3001\u53f3\u5de6\u3001\u53f3\u53f3\u56db\u79cd\u60c5\u51b5\\n##### 1. \u5de6\u5de6\\n![](\u7ea2\u9ed1\u6811/3.png)\\n##### 2. \u5de6\u53f3\\n![](\u7ea2\u9ed1\u6811/4.png)\\n##### 3. \u53f3\u5de6\\n![](\u7ea2\u9ed1\u6811/5.png)\\n##### 4. \u53f3\u53f3\\n![](\u7ea2\u9ed1\u6811/6.png)\\n\\n## \u4ee3\u7801"},{"id":"/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/Dijkstra/Dijkstra","metadata":{"permalink":"/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/Dijkstra/Dijkstra","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/Dijkstra/Dijkstra.md","source":"@site/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/Dijkstra/Dijkstra.md","title":"Djikstra\u9898\u578b\u603b\u7ed3","description":"\u6982\u8ff0","date":"2020-06-14T20:20:48.000Z","formattedDate":"June 14, 2020","tags":[{"label":"Algorithm","permalink":"/blog/tags/algorithm"}],"readingTime":3.36,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Djikstra\u9898\u578b\u603b\u7ed3","date":"2020-06-14T20:20:48.000Z","tags":["Algorithm"]},"prevItem":{"title":"\u7ea2\u9ed1\u6811","permalink":"/blog/\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5/RBTree/RBTree"}},"content":"\x3c!--truncate--\x3e\\n## \u6982\u8ff0\\n\u4f7f\u7528Dijkstra\u7684\u6700\u77ed\u8def\u7684\u95ee\u9898\u901a\u5e38\u4e0d\u4ec5\u8981\u6c42\u7ed9\u51fa\u6700\u77ed\u8def\u5f84\uff0c\u8fd8\u9644\u5e26\u4ee5\u4e0b\u51e0\u79cd\u9898\u578b\u6216\u5176\u7ec4\u5408\uff1a\\n- \u989d\u5916\u589e\u52a0\u4e00\u4e2a\u8fb9\u6743\uff0c\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u76f8\u540c\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\uff1b\\n- \u989d\u5916\u589e\u52a0\u4e00\u4e2a\u70b9\u6743\uff0c\u7528\u4e8e\u6700\u77ed\u8def\u5f84\u76f8\u540c\u60c5\u51b5\u4e0b\u7684\u6bd4\u8f83\uff1b\\n- \u95ee\u6709\u591a\u5c11\u79cd\u6700\u77ed\u8def\uff1b\\n- \u8f93\u51fa\u6700\u77ed\u8def\u7ecf\u8fc7\u8282\u70b9\u3002\\n\\n## \u4ee3\u7801\\n```c++\\n#include <iostream>\\n#include <vector>\\n\\nusing namespace std;\\n\\nconst int MAXV = 510; //\u6700\u5927\u9876\u70b9\u6570\uff0c\u901a\u5e38\u53d6\u9898\u76ee\u6240\u7ed9\u6761\u4ef6\u7684\u4e0a\u9650+\uff085\uff5e10\uff09\u5373\u53ef\\nconst int INF = 100000000;//\u5b9a\u4e49\u4e00\u4e2a\u5f88\u5927\u7684\u6570\\n\\nvector<int> Adj[MAXV];//\u56fe\u7684\u90bb\u63a5\u8868\uff08\u53ef\u4ee5\u9009\u62e9\u7528vector<Node> Adj[] \u7ed3\u6784\u4f53\u4e2d\u653e\u5165\u8fb9\u6743\u548c\u70b9\u6743\uff09\\n\\nint d[MAXV];//\u7b2c\u4e00\u7ebf\u6743\uff08\u4ece\u8d77\u70b9s\u5230\u9876\u70b9u\u7684\u6700\u77ed\u8def\u7a0b\u4e3ad[u]\uff09\\nint w[MAXV];//\u70b9\u6743\uff08\u4ece\u8d77\u70b9s\u5230\u9876\u70b9u\u80fd\u6536\u96c6\u5230\u7684\u6700\u591a\u7684\u70b9\u6743\u4e3aw[u]\uff09\\nint c[MAXV];//\u7b2c\u4e8c\u7ebf\u6743\uff08\u4ece\u8d77\u70b9s\u5230\u9876\u70b9u\u82b1\u8d39\u7684\u6700\u5c11\u7ebf\u6743\u4e3ac[u]\uff09\\nint num[MAXV];//\u8bb0\u5f55\u76f8\u540c\u8ddd\u79bb\u8def\u5f84\u4e2a\u6570\\nint pre[MAXV];//\u4ece\u8d77\u70b9\u5230v\u7684\u6700\u77ed\u8def\u5f84\u7684v\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u4e3apre[v]\\n\\nint weight[MAXV];//\u5b58\u50a8\u8f93\u5165\u7684\u70b9\u6743\\nint dist[MAXV][MAXV];//\u5b58\u50a8\u8f93\u5165\u7684\u7b2c\u4e00\u7ebf\u6743\\nint cost[MAXV][MAXV];//\u5b58\u50a8\u8f93\u5165\u7684\u7b2c\u4e8c\u7ebf\u6743\\n\\nbool isVisit[MAXV];//\u7528\u6765\u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u8fc7\\nint M,N;\\n\\nvoid Dijkstra(int s);\\nvoid print_route(int s, int v);\\n\\nint main(){\\n    /*\\n     * \u8f93\u5165\u7684\u683c\u5f0f\\n     * N\uff08\u8282\u70b9\u4e2a\u6570\uff09 M\uff08\u8fb9\u4e2a\u6570\uff09\\n     * w1 w2 ... wN \uff08\u70b9\u6743\uff09\\n     * v1 v2 distance cost (\u4e24\u9876\u70b9\u7f16\u53f7\uff0c\u4ee5\u53ca\u4e24\u8005\u95f4\u7684\u4e24\u79cd\u8fb9\u6743)\\n     */\\n    cin >> M >> N;\\n    for(int i = 0;i < N;i++){\\n        int temp;\\n        cin >> temp;\\n        weight[i] = temp;\\n    }\\n\\n    for(int i = 0; i < M;i++){\\n        int v1,v2,distance,cost_;\\n        cin >> v1 >> v2 >> distance >> cost_;\\n        dist[v1][v2] = distance;\\n        cost[v1][v2] = cost_;\\n    }\\n\\n    /*\\n     * \u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\\n     */\\n    fill(d,d+MAXV,INF);//\u521d\u59cbd\u90fd\u4e3a0\\n    fill(w,w+MAXV,0);\\n    fill(c,c+MAXV,0);\\n\\n    fill(num,num+MAXV,0);\\n    num[0] = 1;\\n\\n    Dijkstra(0);\\n\\n}\\n\\nvoid Dijkstra(int s){//s\u4e3a\u8d77\u70b9\\n    d[s] = 0;//\u8d77\u70b9\u5230\u81ea\u5df1\u8ddd\u79bb\u4e3a0\\n    int u = -1;//\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u7684\u9876\u70b9\\n    for(int i = 0; i < N; i++){//\u8ba1\u7b97\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\\n        int MIN = INF;\\n        for(int j = 0;j < N;j++){\\n            if(isVisit[j]== false && d[j] < MIN){\\n                u = j;\\n                MIN = d[j];\\n            }\\n        }\\n        isVisit[u] = true;\\n\\n        for(int j=0; j < Adj[u].size();j++){\\n            int v = Adj[u][j];\\n            if(isVisit[v] == false && d[u] + dist[u][v] < d[v]){//\u4f18\u5148\u7ea7\uff1a\u7b2c\u4e00\u7ebf > \u7b2c\u4e8c\u7ebf > \u70b9\\n                d[v] = d[u] + dist[u][v];//\u7b2c\u4e00\u7ebf\u6743\\n                c[v] = c[u] + cost[u][v];//\u7b2c\u4e8c\u7ebf\u6743\\n                w[v] = w[u] + weight[v];//\u70b9\u6743\\n                num[v] = num[u];\\n                pre[v] = u;\\n            }else if(isVisit[v] == false && d[u] + dist[u][v] == d[v]){\\n                num[v] = num[v] + num[u];//\u52a0\u6cd5\u539f\u7406\\n                if(c[v] > c[u] + cost[u][v]){\\n                    c[v] = c[u] + cost[u][v];//\u9009\u62e9\u66f4\u5c0f\u7684\u82b1\u8d39\\n                    pre[v] = u;\\n                }else if(c[v] == c[u] + cost[u][v]){\\n                    if(w[v] < w[u] + weight[v]){\\n                        w[v] = w[u] + weight[v];\\n                        pre[v] = u;\\n                    }\\n                }\\n\\n            }\\n        }\\n        print_route(s, i);\\n        cout << \\"\\\\n\\";\\n    }\\n}\\n\\nvoid print_route(int s, int v){//\u7c7b\u4f3c\u4e8e\u5e76\u67e5\u96c6\u6216DFS\\n    if(v==s){\\n        cout << s;\\n        return;\\n    }\\n    print_route(s,pre[v]);\\n    cout << v;\\n}\\n\\n```"}]}')}}]);